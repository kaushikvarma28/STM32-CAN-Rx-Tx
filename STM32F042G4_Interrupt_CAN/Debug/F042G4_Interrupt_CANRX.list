
F042G4_Interrupt_CANRX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000381c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080038dc  080038dc  000138dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003954  08003954  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08003954  08003954  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003954  08003954  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003954  08003954  00013954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003958  08003958  00013958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800395c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000098  080039f4  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  080039f4  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f51  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001688  00000000  00000000  00028011  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000768  00000000  00000000  000296a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006a0  00000000  00000000  00029e08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014524  00000000  00000000  0002a4a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000067f3  00000000  00000000  0003e9cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00071670  00000000  00000000  000451bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b682f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bf8  00000000  00000000  000b68ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000098 	.word	0x20000098
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080038c4 	.word	0x080038c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000009c 	.word	0x2000009c
 8000104:	080038c4 	.word	0x080038c4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fbed 	bl	8000a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f861 	bl	80002f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f953 	bl	80004d8 <MX_GPIO_Init>
  MX_CAN_Init();
 8000232:	f000 f8b1 	bl	8000398 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000236:	f000 f91f 	bl	8000478 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800023a:	4b27      	ldr	r3, [pc, #156]	; (80002d8 <main+0xb8>)
 800023c:	2102      	movs	r1, #2
 800023e:	0018      	movs	r0, r3
 8000240:	f001 f897 	bl	8001372 <HAL_CAN_ActivateNotification>
  canfil.FilterBank = 0;
 8000244:	4b25      	ldr	r3, [pc, #148]	; (80002dc <main+0xbc>)
 8000246:	2200      	movs	r2, #0
 8000248:	615a      	str	r2, [r3, #20]
  canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 800024a:	4b24      	ldr	r3, [pc, #144]	; (80002dc <main+0xbc>)
 800024c:	2200      	movs	r2, #0
 800024e:	619a      	str	r2, [r3, #24]
  canfil.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000250:	4b22      	ldr	r3, [pc, #136]	; (80002dc <main+0xbc>)
 8000252:	2200      	movs	r2, #0
 8000254:	611a      	str	r2, [r3, #16]
  canfil.FilterIdHigh = 0;
 8000256:	4b21      	ldr	r3, [pc, #132]	; (80002dc <main+0xbc>)
 8000258:	2200      	movs	r2, #0
 800025a:	601a      	str	r2, [r3, #0]
  canfil.FilterIdLow = 0;
 800025c:	4b1f      	ldr	r3, [pc, #124]	; (80002dc <main+0xbc>)
 800025e:	2200      	movs	r2, #0
 8000260:	605a      	str	r2, [r3, #4]
  canfil.FilterMaskIdHigh = 0;
 8000262:	4b1e      	ldr	r3, [pc, #120]	; (80002dc <main+0xbc>)
 8000264:	2200      	movs	r2, #0
 8000266:	609a      	str	r2, [r3, #8]
  canfil.FilterMaskIdLow = 0;
 8000268:	4b1c      	ldr	r3, [pc, #112]	; (80002dc <main+0xbc>)
 800026a:	2200      	movs	r2, #0
 800026c:	60da      	str	r2, [r3, #12]
  canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 800026e:	4b1b      	ldr	r3, [pc, #108]	; (80002dc <main+0xbc>)
 8000270:	2201      	movs	r2, #1
 8000272:	61da      	str	r2, [r3, #28]
  canfil.FilterActivation = ENABLE;
 8000274:	4b19      	ldr	r3, [pc, #100]	; (80002dc <main+0xbc>)
 8000276:	2201      	movs	r2, #1
 8000278:	621a      	str	r2, [r3, #32]
  canfil.SlaveStartFilterBank = 14;
 800027a:	4b18      	ldr	r3, [pc, #96]	; (80002dc <main+0xbc>)
 800027c:	220e      	movs	r2, #14
 800027e:	625a      	str	r2, [r3, #36]	; 0x24

  txHeader.DLC = 8;
 8000280:	4b17      	ldr	r3, [pc, #92]	; (80002e0 <main+0xc0>)
 8000282:	2208      	movs	r2, #8
 8000284:	611a      	str	r2, [r3, #16]
  txHeader.IDE = CAN_ID_STD;
 8000286:	4b16      	ldr	r3, [pc, #88]	; (80002e0 <main+0xc0>)
 8000288:	2200      	movs	r2, #0
 800028a:	609a      	str	r2, [r3, #8]
  txHeader.RTR = CAN_RTR_DATA;
 800028c:	4b14      	ldr	r3, [pc, #80]	; (80002e0 <main+0xc0>)
 800028e:	2200      	movs	r2, #0
 8000290:	60da      	str	r2, [r3, #12]
  txHeader.StdId = 0xCC4216;
 8000292:	4b13      	ldr	r3, [pc, #76]	; (80002e0 <main+0xc0>)
 8000294:	4a13      	ldr	r2, [pc, #76]	; (80002e4 <main+0xc4>)
 8000296:	601a      	str	r2, [r3, #0]
  txHeader.ExtId = 0x02;
 8000298:	4b11      	ldr	r3, [pc, #68]	; (80002e0 <main+0xc0>)
 800029a:	2202      	movs	r2, #2
 800029c:	605a      	str	r2, [r3, #4]
  txHeader.TransmitGlobalTime = DISABLE;
 800029e:	4b10      	ldr	r3, [pc, #64]	; (80002e0 <main+0xc0>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	751a      	strb	r2, [r3, #20]
  HAL_CAN_ConfigFilter(&hcan,&canfil);
 80002a4:	4a0d      	ldr	r2, [pc, #52]	; (80002dc <main+0xbc>)
 80002a6:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <main+0xb8>)
 80002a8:	0011      	movs	r1, r2
 80002aa:	0018      	movs	r0, r3
 80002ac:	f000 fd2e 	bl	8000d0c <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan);
 80002b0:	4b09      	ldr	r3, [pc, #36]	; (80002d8 <main+0xb8>)
 80002b2:	0018      	movs	r0, r3
 80002b4:	f000 fe1c 	bl	8000ef0 <HAL_CAN_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	      uint8_t csend[] = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08};
 80002b8:	003b      	movs	r3, r7
 80002ba:	4a0b      	ldr	r2, [pc, #44]	; (80002e8 <main+0xc8>)
 80002bc:	ca03      	ldmia	r2!, {r0, r1}
 80002be:	c303      	stmia	r3!, {r0, r1}
	  	  HAL_CAN_AddTxMessage(&hcan,&txHeader,csend,&canMailbox);
 80002c0:	4b0a      	ldr	r3, [pc, #40]	; (80002ec <main+0xcc>)
 80002c2:	003a      	movs	r2, r7
 80002c4:	4906      	ldr	r1, [pc, #24]	; (80002e0 <main+0xc0>)
 80002c6:	4804      	ldr	r0, [pc, #16]	; (80002d8 <main+0xb8>)
 80002c8:	f000 fe58 	bl	8000f7c <HAL_CAN_AddTxMessage>
	  	  HAL_Delay(1000);
 80002cc:	23fa      	movs	r3, #250	; 0xfa
 80002ce:	009b      	lsls	r3, r3, #2
 80002d0:	0018      	movs	r0, r3
 80002d2:	f000 fbfb 	bl	8000acc <HAL_Delay>
  {
 80002d6:	e7ef      	b.n	80002b8 <main+0x98>
 80002d8:	200000f8 	.word	0x200000f8
 80002dc:	20000124 	.word	0x20000124
 80002e0:	200000c0 	.word	0x200000c0
 80002e4:	00cc4216 	.word	0x00cc4216
 80002e8:	080038dc 	.word	0x080038dc
 80002ec:	200001cc 	.word	0x200001cc

080002f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f0:	b590      	push	{r4, r7, lr}
 80002f2:	b099      	sub	sp, #100	; 0x64
 80002f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f6:	242c      	movs	r4, #44	; 0x2c
 80002f8:	193b      	adds	r3, r7, r4
 80002fa:	0018      	movs	r0, r3
 80002fc:	2334      	movs	r3, #52	; 0x34
 80002fe:	001a      	movs	r2, r3
 8000300:	2100      	movs	r1, #0
 8000302:	f002 fecf 	bl	80030a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000306:	231c      	movs	r3, #28
 8000308:	18fb      	adds	r3, r7, r3
 800030a:	0018      	movs	r0, r3
 800030c:	2310      	movs	r3, #16
 800030e:	001a      	movs	r2, r3
 8000310:	2100      	movs	r1, #0
 8000312:	f002 fec7 	bl	80030a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	0018      	movs	r0, r3
 800031a:	2318      	movs	r3, #24
 800031c:	001a      	movs	r2, r3
 800031e:	2100      	movs	r1, #0
 8000320:	f002 fec0 	bl	80030a4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000324:	193b      	adds	r3, r7, r4
 8000326:	2220      	movs	r2, #32
 8000328:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800032a:	193b      	adds	r3, r7, r4
 800032c:	2201      	movs	r2, #1
 800032e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000330:	193b      	adds	r3, r7, r4
 8000332:	2200      	movs	r2, #0
 8000334:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000336:	193b      	adds	r3, r7, r4
 8000338:	0018      	movs	r0, r3
 800033a:	f001 fca3 	bl	8001c84 <HAL_RCC_OscConfig>
 800033e:	1e03      	subs	r3, r0, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000342:	f000 f8fd 	bl	8000540 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000346:	211c      	movs	r1, #28
 8000348:	187b      	adds	r3, r7, r1
 800034a:	2207      	movs	r2, #7
 800034c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800034e:	187b      	adds	r3, r7, r1
 8000350:	2203      	movs	r2, #3
 8000352:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000354:	187b      	adds	r3, r7, r1
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800035a:	187b      	adds	r3, r7, r1
 800035c:	2200      	movs	r2, #0
 800035e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000360:	187b      	adds	r3, r7, r1
 8000362:	2101      	movs	r1, #1
 8000364:	0018      	movs	r0, r3
 8000366:	f002 f813 	bl	8002390 <HAL_RCC_ClockConfig>
 800036a:	1e03      	subs	r3, r0, #0
 800036c:	d001      	beq.n	8000372 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800036e:	f000 f8e7 	bl	8000540 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	2201      	movs	r2, #1
 8000376:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	2200      	movs	r2, #0
 800037c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	0018      	movs	r0, r3
 8000382:	f002 f97d 	bl	8002680 <HAL_RCCEx_PeriphCLKConfig>
 8000386:	1e03      	subs	r3, r0, #0
 8000388:	d001      	beq.n	800038e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800038a:	f000 f8d9 	bl	8000540 <Error_Handler>
  }
}
 800038e:	46c0      	nop			; (mov r8, r8)
 8000390:	46bd      	mov	sp, r7
 8000392:	b019      	add	sp, #100	; 0x64
 8000394:	bd90      	pop	{r4, r7, pc}
	...

08000398 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b08a      	sub	sp, #40	; 0x28
 800039c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800039e:	4b34      	ldr	r3, [pc, #208]	; (8000470 <MX_CAN_Init+0xd8>)
 80003a0:	4a34      	ldr	r2, [pc, #208]	; (8000474 <MX_CAN_Init+0xdc>)
 80003a2:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 12;
 80003a4:	4b32      	ldr	r3, [pc, #200]	; (8000470 <MX_CAN_Init+0xd8>)
 80003a6:	220c      	movs	r2, #12
 80003a8:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80003aa:	4b31      	ldr	r3, [pc, #196]	; (8000470 <MX_CAN_Init+0xd8>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003b0:	4b2f      	ldr	r3, [pc, #188]	; (8000470 <MX_CAN_Init+0xd8>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80003b6:	4b2e      	ldr	r3, [pc, #184]	; (8000470 <MX_CAN_Init+0xd8>)
 80003b8:	22c0      	movs	r2, #192	; 0xc0
 80003ba:	0312      	lsls	r2, r2, #12
 80003bc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80003be:	4b2c      	ldr	r3, [pc, #176]	; (8000470 <MX_CAN_Init+0xd8>)
 80003c0:	2280      	movs	r2, #128	; 0x80
 80003c2:	0352      	lsls	r2, r2, #13
 80003c4:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80003c6:	4b2a      	ldr	r3, [pc, #168]	; (8000470 <MX_CAN_Init+0xd8>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80003cc:	4b28      	ldr	r3, [pc, #160]	; (8000470 <MX_CAN_Init+0xd8>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003d2:	4b27      	ldr	r3, [pc, #156]	; (8000470 <MX_CAN_Init+0xd8>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80003d8:	4b25      	ldr	r3, [pc, #148]	; (8000470 <MX_CAN_Init+0xd8>)
 80003da:	2200      	movs	r2, #0
 80003dc:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003de:	4b24      	ldr	r3, [pc, #144]	; (8000470 <MX_CAN_Init+0xd8>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003e4:	4b22      	ldr	r3, [pc, #136]	; (8000470 <MX_CAN_Init+0xd8>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003ea:	4b21      	ldr	r3, [pc, #132]	; (8000470 <MX_CAN_Init+0xd8>)
 80003ec:	0018      	movs	r0, r3
 80003ee:	f000 fb8f 	bl	8000b10 <HAL_CAN_Init>
 80003f2:	1e03      	subs	r3, r0, #0
 80003f4:	d001      	beq.n	80003fa <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80003f6:	f000 f8a3 	bl	8000540 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef sFilterConfig = {0};
 80003fa:	003b      	movs	r3, r7
 80003fc:	0018      	movs	r0, r3
 80003fe:	2328      	movs	r3, #40	; 0x28
 8000400:	001a      	movs	r2, r3
 8000402:	2100      	movs	r1, #0
 8000404:	f002 fe4e 	bl	80030a4 <memset>
  sFilterConfig.FilterBank = 0;
 8000408:	003b      	movs	r3, r7
 800040a:	2200      	movs	r2, #0
 800040c:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800040e:	003b      	movs	r3, r7
 8000410:	2200      	movs	r2, #0
 8000412:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000414:	003b      	movs	r3, r7
 8000416:	2201      	movs	r2, #1
 8000418:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 800041a:	003b      	movs	r3, r7
 800041c:	2200      	movs	r2, #0
 800041e:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000420:	003b      	movs	r3, r7
 8000422:	2200      	movs	r2, #0
 8000424:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000426:	003b      	movs	r3, r7
 8000428:	2200      	movs	r2, #0
 800042a:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800042c:	003b      	movs	r3, r7
 800042e:	2200      	movs	r2, #0
 8000430:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000432:	003b      	movs	r3, r7
 8000434:	2200      	movs	r2, #0
 8000436:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000438:	003b      	movs	r3, r7
 800043a:	2201      	movs	r2, #1
 800043c:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 800043e:	003b      	movs	r3, r7
 8000440:	220e      	movs	r2, #14
 8000442:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK){
 8000444:	003a      	movs	r2, r7
 8000446:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <MX_CAN_Init+0xd8>)
 8000448:	0011      	movs	r1, r2
 800044a:	0018      	movs	r0, r3
 800044c:	f000 fc5e 	bl	8000d0c <HAL_CAN_ConfigFilter>
 8000450:	1e03      	subs	r3, r0, #0
 8000452:	d001      	beq.n	8000458 <MX_CAN_Init+0xc0>
    Error_Handler();
 8000454:	f000 f874 	bl	8000540 <Error_Handler>
  }

  if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8000458:	4b05      	ldr	r3, [pc, #20]	; (8000470 <MX_CAN_Init+0xd8>)
 800045a:	0018      	movs	r0, r3
 800045c:	f000 fd48 	bl	8000ef0 <HAL_CAN_Start>
 8000460:	1e03      	subs	r3, r0, #0
 8000462:	d001      	beq.n	8000468 <MX_CAN_Init+0xd0>
    Error_Handler();
 8000464:	f000 f86c 	bl	8000540 <Error_Handler>
  }
  /* USER CODE END CAN_Init 2 */

}
 8000468:	46c0      	nop			; (mov r8, r8)
 800046a:	46bd      	mov	sp, r7
 800046c:	b00a      	add	sp, #40	; 0x28
 800046e:	bd80      	pop	{r7, pc}
 8000470:	200000f8 	.word	0x200000f8
 8000474:	40006400 	.word	0x40006400

08000478 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800047c:	4b14      	ldr	r3, [pc, #80]	; (80004d0 <MX_USART1_UART_Init+0x58>)
 800047e:	4a15      	ldr	r2, [pc, #84]	; (80004d4 <MX_USART1_UART_Init+0x5c>)
 8000480:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000482:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <MX_USART1_UART_Init+0x58>)
 8000484:	2296      	movs	r2, #150	; 0x96
 8000486:	0192      	lsls	r2, r2, #6
 8000488:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800048a:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <MX_USART1_UART_Init+0x58>)
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000490:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <MX_USART1_UART_Init+0x58>)
 8000492:	2200      	movs	r2, #0
 8000494:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <MX_USART1_UART_Init+0x58>)
 8000498:	2200      	movs	r2, #0
 800049a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800049c:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <MX_USART1_UART_Init+0x58>)
 800049e:	220c      	movs	r2, #12
 80004a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004a2:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <MX_USART1_UART_Init+0x58>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004a8:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <MX_USART1_UART_Init+0x58>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ae:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <MX_USART1_UART_Init+0x58>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <MX_USART1_UART_Init+0x58>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004ba:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <MX_USART1_UART_Init+0x58>)
 80004bc:	0018      	movs	r0, r3
 80004be:	f002 f9cd 	bl	800285c <HAL_UART_Init>
 80004c2:	1e03      	subs	r3, r0, #0
 80004c4:	d001      	beq.n	80004ca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80004c6:	f000 f83b 	bl	8000540 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	2000014c 	.word	0x2000014c
 80004d4:	40013800 	.word	0x40013800

080004d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004de:	4b17      	ldr	r3, [pc, #92]	; (800053c <MX_GPIO_Init+0x64>)
 80004e0:	695a      	ldr	r2, [r3, #20]
 80004e2:	4b16      	ldr	r3, [pc, #88]	; (800053c <MX_GPIO_Init+0x64>)
 80004e4:	2180      	movs	r1, #128	; 0x80
 80004e6:	03c9      	lsls	r1, r1, #15
 80004e8:	430a      	orrs	r2, r1
 80004ea:	615a      	str	r2, [r3, #20]
 80004ec:	4b13      	ldr	r3, [pc, #76]	; (800053c <MX_GPIO_Init+0x64>)
 80004ee:	695a      	ldr	r2, [r3, #20]
 80004f0:	2380      	movs	r3, #128	; 0x80
 80004f2:	03db      	lsls	r3, r3, #15
 80004f4:	4013      	ands	r3, r2
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	4b10      	ldr	r3, [pc, #64]	; (800053c <MX_GPIO_Init+0x64>)
 80004fc:	695a      	ldr	r2, [r3, #20]
 80004fe:	4b0f      	ldr	r3, [pc, #60]	; (800053c <MX_GPIO_Init+0x64>)
 8000500:	2180      	movs	r1, #128	; 0x80
 8000502:	0289      	lsls	r1, r1, #10
 8000504:	430a      	orrs	r2, r1
 8000506:	615a      	str	r2, [r3, #20]
 8000508:	4b0c      	ldr	r3, [pc, #48]	; (800053c <MX_GPIO_Init+0x64>)
 800050a:	695a      	ldr	r2, [r3, #20]
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	029b      	lsls	r3, r3, #10
 8000510:	4013      	ands	r3, r2
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000516:	4b09      	ldr	r3, [pc, #36]	; (800053c <MX_GPIO_Init+0x64>)
 8000518:	695a      	ldr	r2, [r3, #20]
 800051a:	4b08      	ldr	r3, [pc, #32]	; (800053c <MX_GPIO_Init+0x64>)
 800051c:	2180      	movs	r1, #128	; 0x80
 800051e:	02c9      	lsls	r1, r1, #11
 8000520:	430a      	orrs	r2, r1
 8000522:	615a      	str	r2, [r3, #20]
 8000524:	4b05      	ldr	r3, [pc, #20]	; (800053c <MX_GPIO_Init+0x64>)
 8000526:	695a      	ldr	r2, [r3, #20]
 8000528:	2380      	movs	r3, #128	; 0x80
 800052a:	02db      	lsls	r3, r3, #11
 800052c:	4013      	ands	r3, r2
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]

}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	46bd      	mov	sp, r7
 8000536:	b004      	add	sp, #16
 8000538:	bd80      	pop	{r7, pc}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	40021000 	.word	0x40021000

08000540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000544:	46c0      	nop			; (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
	...

0800054c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000552:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_MspInit+0x50>)
 8000554:	699a      	ldr	r2, [r3, #24]
 8000556:	4b11      	ldr	r3, [pc, #68]	; (800059c <HAL_MspInit+0x50>)
 8000558:	2101      	movs	r1, #1
 800055a:	430a      	orrs	r2, r1
 800055c:	619a      	str	r2, [r3, #24]
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <HAL_MspInit+0x50>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	2201      	movs	r2, #1
 8000564:	4013      	ands	r3, r2
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <HAL_MspInit+0x50>)
 800056c:	69da      	ldr	r2, [r3, #28]
 800056e:	4b0b      	ldr	r3, [pc, #44]	; (800059c <HAL_MspInit+0x50>)
 8000570:	2180      	movs	r1, #128	; 0x80
 8000572:	0549      	lsls	r1, r1, #21
 8000574:	430a      	orrs	r2, r1
 8000576:	61da      	str	r2, [r3, #28]
 8000578:	4b08      	ldr	r3, [pc, #32]	; (800059c <HAL_MspInit+0x50>)
 800057a:	69da      	ldr	r2, [r3, #28]
 800057c:	2380      	movs	r3, #128	; 0x80
 800057e:	055b      	lsls	r3, r3, #21
 8000580:	4013      	ands	r3, r2
 8000582:	603b      	str	r3, [r7, #0]
 8000584:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <HAL_MspInit+0x54>)
 8000588:	681a      	ldr	r2, [r3, #0]
 800058a:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <HAL_MspInit+0x54>)
 800058c:	2110      	movs	r1, #16
 800058e:	430a      	orrs	r2, r1
 8000590:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	46bd      	mov	sp, r7
 8000596:	b002      	add	sp, #8
 8000598:	bd80      	pop	{r7, pc}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	40021000 	.word	0x40021000
 80005a0:	40010000 	.word	0x40010000

080005a4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	; 0x28
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	2314      	movs	r3, #20
 80005ae:	18fb      	adds	r3, r7, r3
 80005b0:	0018      	movs	r0, r3
 80005b2:	2314      	movs	r3, #20
 80005b4:	001a      	movs	r2, r3
 80005b6:	2100      	movs	r1, #0
 80005b8:	f002 fd74 	bl	80030a4 <memset>
  if(hcan->Instance==CAN)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a21      	ldr	r2, [pc, #132]	; (8000648 <HAL_CAN_MspInit+0xa4>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d13b      	bne.n	800063e <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005c6:	4b21      	ldr	r3, [pc, #132]	; (800064c <HAL_CAN_MspInit+0xa8>)
 80005c8:	69da      	ldr	r2, [r3, #28]
 80005ca:	4b20      	ldr	r3, [pc, #128]	; (800064c <HAL_CAN_MspInit+0xa8>)
 80005cc:	2180      	movs	r1, #128	; 0x80
 80005ce:	0489      	lsls	r1, r1, #18
 80005d0:	430a      	orrs	r2, r1
 80005d2:	61da      	str	r2, [r3, #28]
 80005d4:	4b1d      	ldr	r3, [pc, #116]	; (800064c <HAL_CAN_MspInit+0xa8>)
 80005d6:	69da      	ldr	r2, [r3, #28]
 80005d8:	2380      	movs	r3, #128	; 0x80
 80005da:	049b      	lsls	r3, r3, #18
 80005dc:	4013      	ands	r3, r2
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	4b1a      	ldr	r3, [pc, #104]	; (800064c <HAL_CAN_MspInit+0xa8>)
 80005e4:	695a      	ldr	r2, [r3, #20]
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <HAL_CAN_MspInit+0xa8>)
 80005e8:	2180      	movs	r1, #128	; 0x80
 80005ea:	0289      	lsls	r1, r1, #10
 80005ec:	430a      	orrs	r2, r1
 80005ee:	615a      	str	r2, [r3, #20]
 80005f0:	4b16      	ldr	r3, [pc, #88]	; (800064c <HAL_CAN_MspInit+0xa8>)
 80005f2:	695a      	ldr	r2, [r3, #20]
 80005f4:	2380      	movs	r3, #128	; 0x80
 80005f6:	029b      	lsls	r3, r3, #10
 80005f8:	4013      	ands	r3, r2
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80005fe:	2114      	movs	r1, #20
 8000600:	187b      	adds	r3, r7, r1
 8000602:	22c0      	movs	r2, #192	; 0xc0
 8000604:	0152      	lsls	r2, r2, #5
 8000606:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000608:	187b      	adds	r3, r7, r1
 800060a:	2202      	movs	r2, #2
 800060c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	187b      	adds	r3, r7, r1
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000614:	187b      	adds	r3, r7, r1
 8000616:	2203      	movs	r2, #3
 8000618:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 800061a:	187b      	adds	r3, r7, r1
 800061c:	2204      	movs	r2, #4
 800061e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000620:	187a      	adds	r2, r7, r1
 8000622:	2390      	movs	r3, #144	; 0x90
 8000624:	05db      	lsls	r3, r3, #23
 8000626:	0011      	movs	r1, r2
 8000628:	0018      	movs	r0, r3
 800062a:	f001 f9c3 	bl	80019b4 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	2100      	movs	r1, #0
 8000632:	201e      	movs	r0, #30
 8000634:	f001 f98c 	bl	8001950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8000638:	201e      	movs	r0, #30
 800063a:	f001 f99e 	bl	800197a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	46bd      	mov	sp, r7
 8000642:	b00a      	add	sp, #40	; 0x28
 8000644:	bd80      	pop	{r7, pc}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	40006400 	.word	0x40006400
 800064c:	40021000 	.word	0x40021000

08000650 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08a      	sub	sp, #40	; 0x28
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	2314      	movs	r3, #20
 800065a:	18fb      	adds	r3, r7, r3
 800065c:	0018      	movs	r0, r3
 800065e:	2314      	movs	r3, #20
 8000660:	001a      	movs	r2, r3
 8000662:	2100      	movs	r1, #0
 8000664:	f002 fd1e 	bl	80030a4 <memset>
  if(huart->Instance==USART1)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a1c      	ldr	r2, [pc, #112]	; (80006e0 <HAL_UART_MspInit+0x90>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d131      	bne.n	80006d6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <HAL_UART_MspInit+0x94>)
 8000674:	699a      	ldr	r2, [r3, #24]
 8000676:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <HAL_UART_MspInit+0x94>)
 8000678:	2180      	movs	r1, #128	; 0x80
 800067a:	01c9      	lsls	r1, r1, #7
 800067c:	430a      	orrs	r2, r1
 800067e:	619a      	str	r2, [r3, #24]
 8000680:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <HAL_UART_MspInit+0x94>)
 8000682:	699a      	ldr	r2, [r3, #24]
 8000684:	2380      	movs	r3, #128	; 0x80
 8000686:	01db      	lsls	r3, r3, #7
 8000688:	4013      	ands	r3, r2
 800068a:	613b      	str	r3, [r7, #16]
 800068c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800068e:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <HAL_UART_MspInit+0x94>)
 8000690:	695a      	ldr	r2, [r3, #20]
 8000692:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <HAL_UART_MspInit+0x94>)
 8000694:	2180      	movs	r1, #128	; 0x80
 8000696:	02c9      	lsls	r1, r1, #11
 8000698:	430a      	orrs	r2, r1
 800069a:	615a      	str	r2, [r3, #20]
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <HAL_UART_MspInit+0x94>)
 800069e:	695a      	ldr	r2, [r3, #20]
 80006a0:	2380      	movs	r3, #128	; 0x80
 80006a2:	02db      	lsls	r3, r3, #11
 80006a4:	4013      	ands	r3, r2
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006aa:	2114      	movs	r1, #20
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	22c0      	movs	r2, #192	; 0xc0
 80006b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2202      	movs	r2, #2
 80006b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2203      	movs	r2, #3
 80006c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	4a06      	ldr	r2, [pc, #24]	; (80006e8 <HAL_UART_MspInit+0x98>)
 80006ce:	0019      	movs	r1, r3
 80006d0:	0010      	movs	r0, r2
 80006d2:	f001 f96f 	bl	80019b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	b00a      	add	sp, #40	; 0x28
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	40013800 	.word	0x40013800
 80006e4:	40021000 	.word	0x40021000
 80006e8:	48000400 	.word	0x48000400

080006ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006f0:	46c0      	nop			; (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fa:	e7fe      	b.n	80006fa <HardFault_Handler+0x4>

080006fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000700:	46c0      	nop			; (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000714:	f000 f9be 	bl	8000a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000718:	46c0      	nop			; (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8000720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000722:	b097      	sub	sp, #92	; 0x5c
 8000724:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CEC_CAN_IRQn 0 */

	/* USER CODE END CEC_CAN_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan);
 8000726:	4b72      	ldr	r3, [pc, #456]	; (80008f0 <CEC_CAN_IRQHandler+0x1d0>)
 8000728:	0018      	movs	r0, r3
 800072a:	f000 fe4c 	bl	80013c6 <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN CEC_CAN_IRQn 1 */
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];
	uint8_t ID[8]={NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};
 800072e:	232c      	movs	r3, #44	; 0x2c
 8000730:	18fb      	adds	r3, r7, r3
 8000732:	0018      	movs	r0, r3
 8000734:	2308      	movs	r3, #8
 8000736:	001a      	movs	r2, r3
 8000738:	2100      	movs	r1, #0
 800073a:	f002 fcb3 	bl	80030a4 <memset>
	char B4[2];
	char B5[2];
	char B6[2];
	char B7[2];

	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);  // get the currently waiting frame
 800073e:	2434      	movs	r4, #52	; 0x34
 8000740:	193b      	adds	r3, r7, r4
 8000742:	253c      	movs	r5, #60	; 0x3c
 8000744:	197a      	adds	r2, r7, r5
 8000746:	486a      	ldr	r0, [pc, #424]	; (80008f0 <CEC_CAN_IRQHandler+0x1d0>)
 8000748:	2100      	movs	r1, #0
 800074a:	f000 fcf6 	bl	800113a <HAL_CAN_GetRxMessage>

	//	  		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_7);
	char buffer1 [8];
	sprintf(buffer1,"%0x",RxHeader.ExtId);
 800074e:	197b      	adds	r3, r7, r5
 8000750:	685a      	ldr	r2, [r3, #4]
 8000752:	4968      	ldr	r1, [pc, #416]	; (80008f4 <CEC_CAN_IRQHandler+0x1d4>)
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	0018      	movs	r0, r3
 8000758:	f002 fcac 	bl	80030b4 <siprintf>

	sprintf(B0,"%0x",RxData[0]);
 800075c:	193b      	adds	r3, r7, r4
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	001a      	movs	r2, r3
 8000762:	4964      	ldr	r1, [pc, #400]	; (80008f4 <CEC_CAN_IRQHandler+0x1d4>)
 8000764:	2528      	movs	r5, #40	; 0x28
 8000766:	197b      	adds	r3, r7, r5
 8000768:	0018      	movs	r0, r3
 800076a:	f002 fca3 	bl	80030b4 <siprintf>
	sprintf(B1,"%0x",RxData[1]);
 800076e:	193b      	adds	r3, r7, r4
 8000770:	785b      	ldrb	r3, [r3, #1]
 8000772:	001a      	movs	r2, r3
 8000774:	495f      	ldr	r1, [pc, #380]	; (80008f4 <CEC_CAN_IRQHandler+0x1d4>)
 8000776:	2624      	movs	r6, #36	; 0x24
 8000778:	19bb      	adds	r3, r7, r6
 800077a:	0018      	movs	r0, r3
 800077c:	f002 fc9a 	bl	80030b4 <siprintf>
	sprintf(B2,"%0x",RxData[2]);
 8000780:	193b      	adds	r3, r7, r4
 8000782:	789b      	ldrb	r3, [r3, #2]
 8000784:	001a      	movs	r2, r3
 8000786:	495b      	ldr	r1, [pc, #364]	; (80008f4 <CEC_CAN_IRQHandler+0x1d4>)
 8000788:	2320      	movs	r3, #32
 800078a:	18fb      	adds	r3, r7, r3
 800078c:	0018      	movs	r0, r3
 800078e:	f002 fc91 	bl	80030b4 <siprintf>
	sprintf(B3,"%0x",RxData[3]);
 8000792:	193b      	adds	r3, r7, r4
 8000794:	78db      	ldrb	r3, [r3, #3]
 8000796:	001a      	movs	r2, r3
 8000798:	4956      	ldr	r1, [pc, #344]	; (80008f4 <CEC_CAN_IRQHandler+0x1d4>)
 800079a:	201c      	movs	r0, #28
 800079c:	183b      	adds	r3, r7, r0
 800079e:	0018      	movs	r0, r3
 80007a0:	f002 fc88 	bl	80030b4 <siprintf>
	sprintf(B4,"%0x",RxData[4]);
 80007a4:	193b      	adds	r3, r7, r4
 80007a6:	791b      	ldrb	r3, [r3, #4]
 80007a8:	001a      	movs	r2, r3
 80007aa:	4952      	ldr	r1, [pc, #328]	; (80008f4 <CEC_CAN_IRQHandler+0x1d4>)
 80007ac:	2318      	movs	r3, #24
 80007ae:	18fb      	adds	r3, r7, r3
 80007b0:	0018      	movs	r0, r3
 80007b2:	f002 fc7f 	bl	80030b4 <siprintf>
	sprintf(B5,"%0x",RxData[5]);
 80007b6:	193b      	adds	r3, r7, r4
 80007b8:	795b      	ldrb	r3, [r3, #5]
 80007ba:	001a      	movs	r2, r3
 80007bc:	494d      	ldr	r1, [pc, #308]	; (80008f4 <CEC_CAN_IRQHandler+0x1d4>)
 80007be:	2014      	movs	r0, #20
 80007c0:	183b      	adds	r3, r7, r0
 80007c2:	0018      	movs	r0, r3
 80007c4:	f002 fc76 	bl	80030b4 <siprintf>
	sprintf(B6,"%0x",RxData[6]);
 80007c8:	193b      	adds	r3, r7, r4
 80007ca:	799b      	ldrb	r3, [r3, #6]
 80007cc:	001a      	movs	r2, r3
 80007ce:	4949      	ldr	r1, [pc, #292]	; (80008f4 <CEC_CAN_IRQHandler+0x1d4>)
 80007d0:	2310      	movs	r3, #16
 80007d2:	18fb      	adds	r3, r7, r3
 80007d4:	0018      	movs	r0, r3
 80007d6:	f002 fc6d 	bl	80030b4 <siprintf>
    sprintf(B7,"%0x",RxData[7]);
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	79db      	ldrb	r3, [r3, #7]
 80007de:	001a      	movs	r2, r3
 80007e0:	4944      	ldr	r1, [pc, #272]	; (80008f4 <CEC_CAN_IRQHandler+0x1d4>)
 80007e2:	240c      	movs	r4, #12
 80007e4:	193b      	adds	r3, r7, r4
 80007e6:	0018      	movs	r0, r3
 80007e8:	f002 fc64 	bl	80030b4 <siprintf>



	HAL_UART_Transmit(&huart1, (uint8_t *)buffer1, sizeof(buffer1), 20);
 80007ec:	1d39      	adds	r1, r7, #4
 80007ee:	4842      	ldr	r0, [pc, #264]	; (80008f8 <CEC_CAN_IRQHandler+0x1d8>)
 80007f0:	2314      	movs	r3, #20
 80007f2:	2208      	movs	r2, #8
 80007f4:	f002 f886 	bl	8002904 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, space, sizeof(space), 20);
 80007f8:	4940      	ldr	r1, [pc, #256]	; (80008fc <CEC_CAN_IRQHandler+0x1dc>)
 80007fa:	483f      	ldr	r0, [pc, #252]	; (80008f8 <CEC_CAN_IRQHandler+0x1d8>)
 80007fc:	2314      	movs	r3, #20
 80007fe:	2202      	movs	r2, #2
 8000800:	f002 f880 	bl	8002904 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *)B0, sizeof(B0), 20);
 8000804:	1979      	adds	r1, r7, r5
 8000806:	483c      	ldr	r0, [pc, #240]	; (80008f8 <CEC_CAN_IRQHandler+0x1d8>)
 8000808:	2314      	movs	r3, #20
 800080a:	2202      	movs	r2, #2
 800080c:	f002 f87a 	bl	8002904 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, space, sizeof(space), 20);
 8000810:	493a      	ldr	r1, [pc, #232]	; (80008fc <CEC_CAN_IRQHandler+0x1dc>)
 8000812:	4839      	ldr	r0, [pc, #228]	; (80008f8 <CEC_CAN_IRQHandler+0x1d8>)
 8000814:	2314      	movs	r3, #20
 8000816:	2202      	movs	r2, #2
 8000818:	f002 f874 	bl	8002904 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *)B1, sizeof(B0), 20);
 800081c:	19b9      	adds	r1, r7, r6
 800081e:	4836      	ldr	r0, [pc, #216]	; (80008f8 <CEC_CAN_IRQHandler+0x1d8>)
 8000820:	2314      	movs	r3, #20
 8000822:	2202      	movs	r2, #2
 8000824:	f002 f86e 	bl	8002904 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, space, sizeof(space), 20);
 8000828:	4934      	ldr	r1, [pc, #208]	; (80008fc <CEC_CAN_IRQHandler+0x1dc>)
 800082a:	4833      	ldr	r0, [pc, #204]	; (80008f8 <CEC_CAN_IRQHandler+0x1d8>)
 800082c:	2314      	movs	r3, #20
 800082e:	2202      	movs	r2, #2
 8000830:	f002 f868 	bl	8002904 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *)B2, sizeof(B0), 20);
 8000834:	2320      	movs	r3, #32
 8000836:	18f9      	adds	r1, r7, r3
 8000838:	482f      	ldr	r0, [pc, #188]	; (80008f8 <CEC_CAN_IRQHandler+0x1d8>)
 800083a:	2314      	movs	r3, #20
 800083c:	2202      	movs	r2, #2
 800083e:	f002 f861 	bl	8002904 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, space, sizeof(space), 20);
 8000842:	492e      	ldr	r1, [pc, #184]	; (80008fc <CEC_CAN_IRQHandler+0x1dc>)
 8000844:	482c      	ldr	r0, [pc, #176]	; (80008f8 <CEC_CAN_IRQHandler+0x1d8>)
 8000846:	2314      	movs	r3, #20
 8000848:	2202      	movs	r2, #2
 800084a:	f002 f85b 	bl	8002904 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *)B3, sizeof(B0), 20);
 800084e:	201c      	movs	r0, #28
 8000850:	1839      	adds	r1, r7, r0
 8000852:	4829      	ldr	r0, [pc, #164]	; (80008f8 <CEC_CAN_IRQHandler+0x1d8>)
 8000854:	2314      	movs	r3, #20
 8000856:	2202      	movs	r2, #2
 8000858:	f002 f854 	bl	8002904 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, space, sizeof(space), 20);
 800085c:	4927      	ldr	r1, [pc, #156]	; (80008fc <CEC_CAN_IRQHandler+0x1dc>)
 800085e:	4826      	ldr	r0, [pc, #152]	; (80008f8 <CEC_CAN_IRQHandler+0x1d8>)
 8000860:	2314      	movs	r3, #20
 8000862:	2202      	movs	r2, #2
 8000864:	f002 f84e 	bl	8002904 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *)B4, sizeof(B0), 20);
 8000868:	2318      	movs	r3, #24
 800086a:	18f9      	adds	r1, r7, r3
 800086c:	4822      	ldr	r0, [pc, #136]	; (80008f8 <CEC_CAN_IRQHandler+0x1d8>)
 800086e:	2314      	movs	r3, #20
 8000870:	2202      	movs	r2, #2
 8000872:	f002 f847 	bl	8002904 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, space, sizeof(space), 20);
 8000876:	4921      	ldr	r1, [pc, #132]	; (80008fc <CEC_CAN_IRQHandler+0x1dc>)
 8000878:	481f      	ldr	r0, [pc, #124]	; (80008f8 <CEC_CAN_IRQHandler+0x1d8>)
 800087a:	2314      	movs	r3, #20
 800087c:	2202      	movs	r2, #2
 800087e:	f002 f841 	bl	8002904 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *)B5, sizeof(B0), 20);
 8000882:	2014      	movs	r0, #20
 8000884:	1839      	adds	r1, r7, r0
 8000886:	481c      	ldr	r0, [pc, #112]	; (80008f8 <CEC_CAN_IRQHandler+0x1d8>)
 8000888:	2314      	movs	r3, #20
 800088a:	2202      	movs	r2, #2
 800088c:	f002 f83a 	bl	8002904 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, space, sizeof(space), 20);
 8000890:	491a      	ldr	r1, [pc, #104]	; (80008fc <CEC_CAN_IRQHandler+0x1dc>)
 8000892:	4819      	ldr	r0, [pc, #100]	; (80008f8 <CEC_CAN_IRQHandler+0x1d8>)
 8000894:	2314      	movs	r3, #20
 8000896:	2202      	movs	r2, #2
 8000898:	f002 f834 	bl	8002904 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *)B6, sizeof(B0), 20);
 800089c:	2310      	movs	r3, #16
 800089e:	18f9      	adds	r1, r7, r3
 80008a0:	4815      	ldr	r0, [pc, #84]	; (80008f8 <CEC_CAN_IRQHandler+0x1d8>)
 80008a2:	2314      	movs	r3, #20
 80008a4:	2202      	movs	r2, #2
 80008a6:	f002 f82d 	bl	8002904 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, space, sizeof(space), 20);
 80008aa:	4914      	ldr	r1, [pc, #80]	; (80008fc <CEC_CAN_IRQHandler+0x1dc>)
 80008ac:	4812      	ldr	r0, [pc, #72]	; (80008f8 <CEC_CAN_IRQHandler+0x1d8>)
 80008ae:	2314      	movs	r3, #20
 80008b0:	2202      	movs	r2, #2
 80008b2:	f002 f827 	bl	8002904 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *)B7, sizeof(B0), 20);
 80008b6:	1939      	adds	r1, r7, r4
 80008b8:	480f      	ldr	r0, [pc, #60]	; (80008f8 <CEC_CAN_IRQHandler+0x1d8>)
 80008ba:	2314      	movs	r3, #20
 80008bc:	2202      	movs	r2, #2
 80008be:	f002 f821 	bl	8002904 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, space, sizeof(space), 20);
 80008c2:	490e      	ldr	r1, [pc, #56]	; (80008fc <CEC_CAN_IRQHandler+0x1dc>)
 80008c4:	480c      	ldr	r0, [pc, #48]	; (80008f8 <CEC_CAN_IRQHandler+0x1d8>)
 80008c6:	2314      	movs	r3, #20
 80008c8:	2202      	movs	r2, #2
 80008ca:	f002 f81b 	bl	8002904 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, newline, sizeof(newline), 20);
 80008ce:	490c      	ldr	r1, [pc, #48]	; (8000900 <CEC_CAN_IRQHandler+0x1e0>)
 80008d0:	4809      	ldr	r0, [pc, #36]	; (80008f8 <CEC_CAN_IRQHandler+0x1d8>)
 80008d2:	2314      	movs	r3, #20
 80008d4:	2202      	movs	r2, #2
 80008d6:	f002 f815 	bl	8002904 <HAL_UART_Transmit>
	//  GPIOD->ODR=r<<12; //use output data register to turn on LEDs
	HAL_UART_Transmit(&huart1, txdata1, sizeof(txdata1), 100);
 80008da:	490a      	ldr	r1, [pc, #40]	; (8000904 <CEC_CAN_IRQHandler+0x1e4>)
 80008dc:	4806      	ldr	r0, [pc, #24]	; (80008f8 <CEC_CAN_IRQHandler+0x1d8>)
 80008de:	2364      	movs	r3, #100	; 0x64
 80008e0:	221e      	movs	r2, #30
 80008e2:	f002 f80f 	bl	8002904 <HAL_UART_Transmit>
	/* USER CODE END CEC_CAN_IRQn 1 */
}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	46bd      	mov	sp, r7
 80008ea:	b017      	add	sp, #92	; 0x5c
 80008ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	200000f8 	.word	0x200000f8
 80008f4:	080038e4 	.word	0x080038e4
 80008f8:	2000014c 	.word	0x2000014c
 80008fc:	20000004 	.word	0x20000004
 8000900:	20000000 	.word	0x20000000
 8000904:	20000008 	.word	0x20000008

08000908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000910:	4a14      	ldr	r2, [pc, #80]	; (8000964 <_sbrk+0x5c>)
 8000912:	4b15      	ldr	r3, [pc, #84]	; (8000968 <_sbrk+0x60>)
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800091c:	4b13      	ldr	r3, [pc, #76]	; (800096c <_sbrk+0x64>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d102      	bne.n	800092a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <_sbrk+0x64>)
 8000926:	4a12      	ldr	r2, [pc, #72]	; (8000970 <_sbrk+0x68>)
 8000928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <_sbrk+0x64>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	18d3      	adds	r3, r2, r3
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	429a      	cmp	r2, r3
 8000936:	d207      	bcs.n	8000948 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000938:	f002 fb8a 	bl	8003050 <__errno>
 800093c:	0003      	movs	r3, r0
 800093e:	220c      	movs	r2, #12
 8000940:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000942:	2301      	movs	r3, #1
 8000944:	425b      	negs	r3, r3
 8000946:	e009      	b.n	800095c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000948:	4b08      	ldr	r3, [pc, #32]	; (800096c <_sbrk+0x64>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800094e:	4b07      	ldr	r3, [pc, #28]	; (800096c <_sbrk+0x64>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	18d2      	adds	r2, r2, r3
 8000956:	4b05      	ldr	r3, [pc, #20]	; (800096c <_sbrk+0x64>)
 8000958:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800095a:	68fb      	ldr	r3, [r7, #12]
}
 800095c:	0018      	movs	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	b006      	add	sp, #24
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20001800 	.word	0x20001800
 8000968:	00000400 	.word	0x00000400
 800096c:	200000b4 	.word	0x200000b4
 8000970:	20000260 	.word	0x20000260

08000974 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000980:	4813      	ldr	r0, [pc, #76]	; (80009d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000982:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000984:	4813      	ldr	r0, [pc, #76]	; (80009d4 <LoopForever+0x6>)
    LDR R1, [R0]
 8000986:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000988:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800098a:	4a13      	ldr	r2, [pc, #76]	; (80009d8 <LoopForever+0xa>)
    CMP R1, R2
 800098c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800098e:	d105      	bne.n	800099c <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000990:	4812      	ldr	r0, [pc, #72]	; (80009dc <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000992:	4913      	ldr	r1, [pc, #76]	; (80009e0 <LoopForever+0x12>)
    STR R1, [R0]
 8000994:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000996:	4813      	ldr	r0, [pc, #76]	; (80009e4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000998:	4913      	ldr	r1, [pc, #76]	; (80009e8 <LoopForever+0x1a>)
    STR R1, [R0]
 800099a:	6001      	str	r1, [r0, #0]

0800099c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800099c:	4813      	ldr	r0, [pc, #76]	; (80009ec <LoopForever+0x1e>)
  ldr r1, =_edata
 800099e:	4914      	ldr	r1, [pc, #80]	; (80009f0 <LoopForever+0x22>)
  ldr r2, =_sidata
 80009a0:	4a14      	ldr	r2, [pc, #80]	; (80009f4 <LoopForever+0x26>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a4:	e002      	b.n	80009ac <LoopCopyDataInit>

080009a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009aa:	3304      	adds	r3, #4

080009ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b0:	d3f9      	bcc.n	80009a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b2:	4a11      	ldr	r2, [pc, #68]	; (80009f8 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80009b4:	4c11      	ldr	r4, [pc, #68]	; (80009fc <LoopForever+0x2e>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b8:	e001      	b.n	80009be <LoopFillZerobss>

080009ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009bc:	3204      	adds	r2, #4

080009be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c0:	d3fb      	bcc.n	80009ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009c2:	f7ff ffd7 	bl	8000974 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80009c6:	f002 fb49 	bl	800305c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ca:	f7ff fc29 	bl	8000220 <main>

080009ce <LoopForever>:

LoopForever:
    b LoopForever
 80009ce:	e7fe      	b.n	80009ce <LoopForever>
  ldr   r0, =_estack
 80009d0:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80009d4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80009d8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80009dc:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80009e0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80009e4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80009e8:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80009ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f0:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80009f4:	0800395c 	.word	0x0800395c
  ldr r2, =_sbss
 80009f8:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80009fc:	2000025c 	.word	0x2000025c

08000a00 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a00:	e7fe      	b.n	8000a00 <ADC1_IRQHandler>
	...

08000a04 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a08:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <HAL_Init+0x24>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_Init+0x24>)
 8000a0e:	2110      	movs	r1, #16
 8000a10:	430a      	orrs	r2, r1
 8000a12:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a14:	2000      	movs	r0, #0
 8000a16:	f000 f809 	bl	8000a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a1a:	f7ff fd97 	bl	800054c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a1e:	2300      	movs	r3, #0
}
 8000a20:	0018      	movs	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	40022000 	.word	0x40022000

08000a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a34:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <HAL_InitTick+0x5c>)
 8000a36:	681c      	ldr	r4, [r3, #0]
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <HAL_InitTick+0x60>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	0019      	movs	r1, r3
 8000a3e:	23fa      	movs	r3, #250	; 0xfa
 8000a40:	0098      	lsls	r0, r3, #2
 8000a42:	f7ff fb61 	bl	8000108 <__udivsi3>
 8000a46:	0003      	movs	r3, r0
 8000a48:	0019      	movs	r1, r3
 8000a4a:	0020      	movs	r0, r4
 8000a4c:	f7ff fb5c 	bl	8000108 <__udivsi3>
 8000a50:	0003      	movs	r3, r0
 8000a52:	0018      	movs	r0, r3
 8000a54:	f000 ffa1 	bl	800199a <HAL_SYSTICK_Config>
 8000a58:	1e03      	subs	r3, r0, #0
 8000a5a:	d001      	beq.n	8000a60 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	e00f      	b.n	8000a80 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2b03      	cmp	r3, #3
 8000a64:	d80b      	bhi.n	8000a7e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	2301      	movs	r3, #1
 8000a6a:	425b      	negs	r3, r3
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f000 ff6e 	bl	8001950 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_InitTick+0x64>)
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	e000      	b.n	8000a80 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
}
 8000a80:	0018      	movs	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	b003      	add	sp, #12
 8000a86:	bd90      	pop	{r4, r7, pc}
 8000a88:	20000028 	.word	0x20000028
 8000a8c:	20000030 	.word	0x20000030
 8000a90:	2000002c 	.word	0x2000002c

08000a94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <HAL_IncTick+0x1c>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	001a      	movs	r2, r3
 8000a9e:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <HAL_IncTick+0x20>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	18d2      	adds	r2, r2, r3
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <HAL_IncTick+0x20>)
 8000aa6:	601a      	str	r2, [r3, #0]
}
 8000aa8:	46c0      	nop			; (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	20000030 	.word	0x20000030
 8000ab4:	20000254 	.word	0x20000254

08000ab8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  return uwTick;
 8000abc:	4b02      	ldr	r3, [pc, #8]	; (8000ac8 <HAL_GetTick+0x10>)
 8000abe:	681b      	ldr	r3, [r3, #0]
}
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	20000254 	.word	0x20000254

08000acc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad4:	f7ff fff0 	bl	8000ab8 <HAL_GetTick>
 8000ad8:	0003      	movs	r3, r0
 8000ada:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	d005      	beq.n	8000af2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <HAL_Delay+0x40>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	001a      	movs	r2, r3
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	189b      	adds	r3, r3, r2
 8000af0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	f7ff ffe0 	bl	8000ab8 <HAL_GetTick>
 8000af8:	0002      	movs	r2, r0
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d8f7      	bhi.n	8000af4 <HAL_Delay+0x28>
  {
  }
}
 8000b04:	46c0      	nop			; (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	b004      	add	sp, #16
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000030 	.word	0x20000030

08000b10 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d101      	bne.n	8000b22 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e0f0      	b.n	8000d04 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2220      	movs	r2, #32
 8000b26:	5c9b      	ldrb	r3, [r3, r2]
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d103      	bne.n	8000b36 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	0018      	movs	r0, r3
 8000b32:	f7ff fd37 	bl	80005a4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2102      	movs	r1, #2
 8000b42:	438a      	bics	r2, r1
 8000b44:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b46:	f7ff ffb7 	bl	8000ab8 <HAL_GetTick>
 8000b4a:	0003      	movs	r3, r0
 8000b4c:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b4e:	e013      	b.n	8000b78 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b50:	f7ff ffb2 	bl	8000ab8 <HAL_GetTick>
 8000b54:	0002      	movs	r2, r0
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	2b0a      	cmp	r3, #10
 8000b5c:	d90c      	bls.n	8000b78 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b62:	2280      	movs	r2, #128	; 0x80
 8000b64:	0292      	lsls	r2, r2, #10
 8000b66:	431a      	orrs	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2220      	movs	r2, #32
 8000b70:	2105      	movs	r1, #5
 8000b72:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000b74:	2301      	movs	r3, #1
 8000b76:	e0c5      	b.n	8000d04 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	2202      	movs	r2, #2
 8000b80:	4013      	ands	r3, r2
 8000b82:	d1e5      	bne.n	8000b50 <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2101      	movs	r1, #1
 8000b90:	430a      	orrs	r2, r1
 8000b92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b94:	f7ff ff90 	bl	8000ab8 <HAL_GetTick>
 8000b98:	0003      	movs	r3, r0
 8000b9a:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b9c:	e013      	b.n	8000bc6 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b9e:	f7ff ff8b 	bl	8000ab8 <HAL_GetTick>
 8000ba2:	0002      	movs	r2, r0
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	1ad3      	subs	r3, r2, r3
 8000ba8:	2b0a      	cmp	r3, #10
 8000baa:	d90c      	bls.n	8000bc6 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb0:	2280      	movs	r2, #128	; 0x80
 8000bb2:	0292      	lsls	r2, r2, #10
 8000bb4:	431a      	orrs	r2, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2220      	movs	r2, #32
 8000bbe:	2105      	movs	r1, #5
 8000bc0:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e09e      	b.n	8000d04 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	2201      	movs	r2, #1
 8000bce:	4013      	ands	r3, r2
 8000bd0:	d0e5      	beq.n	8000b9e <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	7e1b      	ldrb	r3, [r3, #24]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d108      	bne.n	8000bec <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2180      	movs	r1, #128	; 0x80
 8000be6:	430a      	orrs	r2, r1
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	e007      	b.n	8000bfc <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2180      	movs	r1, #128	; 0x80
 8000bf8:	438a      	bics	r2, r1
 8000bfa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	7e5b      	ldrb	r3, [r3, #25]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d108      	bne.n	8000c16 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2140      	movs	r1, #64	; 0x40
 8000c10:	430a      	orrs	r2, r1
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	e007      	b.n	8000c26 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2140      	movs	r1, #64	; 0x40
 8000c22:	438a      	bics	r2, r1
 8000c24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	7e9b      	ldrb	r3, [r3, #26]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d108      	bne.n	8000c40 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2120      	movs	r1, #32
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	e007      	b.n	8000c50 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2120      	movs	r1, #32
 8000c4c:	438a      	bics	r2, r1
 8000c4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	7edb      	ldrb	r3, [r3, #27]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d108      	bne.n	8000c6a <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2110      	movs	r1, #16
 8000c64:	438a      	bics	r2, r1
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	e007      	b.n	8000c7a <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2110      	movs	r1, #16
 8000c76:	430a      	orrs	r2, r1
 8000c78:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	7f1b      	ldrb	r3, [r3, #28]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d108      	bne.n	8000c94 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2108      	movs	r1, #8
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	e007      	b.n	8000ca4 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2108      	movs	r1, #8
 8000ca0:	438a      	bics	r2, r1
 8000ca2:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	7f5b      	ldrb	r3, [r3, #29]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d108      	bne.n	8000cbe <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2104      	movs	r1, #4
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	e007      	b.n	8000cce <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2104      	movs	r1, #4
 8000cca:	438a      	bics	r2, r1
 8000ccc:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	689a      	ldr	r2, [r3, #8]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	431a      	orrs	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	691b      	ldr	r3, [r3, #16]
 8000cdc:	431a      	orrs	r2, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	695b      	ldr	r3, [r3, #20]
 8000ce2:	431a      	orrs	r2, r3
 8000ce4:	0011      	movs	r1, r2
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	1e5a      	subs	r2, r3, #1
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2220      	movs	r2, #32
 8000cfe:	2101      	movs	r1, #1
 8000d00:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000d02:	2300      	movs	r3, #0
}
 8000d04:	0018      	movs	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	b004      	add	sp, #16
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d1c:	2013      	movs	r0, #19
 8000d1e:	183b      	adds	r3, r7, r0
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	2120      	movs	r1, #32
 8000d24:	5c52      	ldrb	r2, [r2, r1]
 8000d26:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8000d28:	183b      	adds	r3, r7, r0
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d005      	beq.n	8000d3c <HAL_CAN_ConfigFilter+0x30>
 8000d30:	2313      	movs	r3, #19
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d000      	beq.n	8000d3c <HAL_CAN_ConfigFilter+0x30>
 8000d3a:	e0cd      	b.n	8000ed8 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d3c:	697a      	ldr	r2, [r7, #20]
 8000d3e:	2380      	movs	r3, #128	; 0x80
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	58d3      	ldr	r3, [r2, r3]
 8000d44:	2201      	movs	r2, #1
 8000d46:	431a      	orrs	r2, r3
 8000d48:	0011      	movs	r1, r2
 8000d4a:	697a      	ldr	r2, [r7, #20]
 8000d4c:	2380      	movs	r3, #128	; 0x80
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	695b      	ldr	r3, [r3, #20]
 8000d56:	221f      	movs	r2, #31
 8000d58:	4013      	ands	r3, r2
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	409a      	lsls	r2, r3
 8000d5e:	0013      	movs	r3, r2
 8000d60:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000d62:	697a      	ldr	r2, [r7, #20]
 8000d64:	2387      	movs	r3, #135	; 0x87
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	58d3      	ldr	r3, [r2, r3]
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	43d2      	mvns	r2, r2
 8000d6e:	401a      	ands	r2, r3
 8000d70:	0011      	movs	r1, r2
 8000d72:	697a      	ldr	r2, [r7, #20]
 8000d74:	2387      	movs	r3, #135	; 0x87
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	69db      	ldr	r3, [r3, #28]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d129      	bne.n	8000dd6 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000d82:	697a      	ldr	r2, [r7, #20]
 8000d84:	2383      	movs	r3, #131	; 0x83
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	58d3      	ldr	r3, [r2, r3]
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	43d2      	mvns	r2, r2
 8000d8e:	401a      	ands	r2, r3
 8000d90:	0011      	movs	r1, r2
 8000d92:	697a      	ldr	r2, [r7, #20]
 8000d94:	2383      	movs	r3, #131	; 0x83
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	041b      	lsls	r3, r3, #16
 8000da6:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000dac:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	3248      	adds	r2, #72	; 0x48
 8000db2:	00d2      	lsls	r2, r2, #3
 8000db4:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	041b      	lsls	r3, r3, #16
 8000dc2:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dc8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dca:	6979      	ldr	r1, [r7, #20]
 8000dcc:	3348      	adds	r3, #72	; 0x48
 8000dce:	00db      	lsls	r3, r3, #3
 8000dd0:	18cb      	adds	r3, r1, r3
 8000dd2:	3304      	adds	r3, #4
 8000dd4:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d128      	bne.n	8000e30 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000dde:	697a      	ldr	r2, [r7, #20]
 8000de0:	2383      	movs	r3, #131	; 0x83
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	58d2      	ldr	r2, [r2, r3]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	431a      	orrs	r2, r3
 8000dea:	0011      	movs	r1, r2
 8000dec:	697a      	ldr	r2, [r7, #20]
 8000dee:	2383      	movs	r3, #131	; 0x83
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	041b      	lsls	r3, r3, #16
 8000e00:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e06:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	3248      	adds	r2, #72	; 0x48
 8000e0c:	00d2      	lsls	r2, r2, #3
 8000e0e:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	041b      	lsls	r3, r3, #16
 8000e1c:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e22:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e24:	6979      	ldr	r1, [r7, #20]
 8000e26:	3348      	adds	r3, #72	; 0x48
 8000e28:	00db      	lsls	r3, r3, #3
 8000e2a:	18cb      	adds	r3, r1, r3
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d10c      	bne.n	8000e52 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000e38:	697a      	ldr	r2, [r7, #20]
 8000e3a:	2381      	movs	r3, #129	; 0x81
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	58d3      	ldr	r3, [r2, r3]
 8000e40:	68fa      	ldr	r2, [r7, #12]
 8000e42:	43d2      	mvns	r2, r2
 8000e44:	401a      	ands	r2, r3
 8000e46:	0011      	movs	r1, r2
 8000e48:	697a      	ldr	r2, [r7, #20]
 8000e4a:	2381      	movs	r3, #129	; 0x81
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	50d1      	str	r1, [r2, r3]
 8000e50:	e00a      	b.n	8000e68 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000e52:	697a      	ldr	r2, [r7, #20]
 8000e54:	2381      	movs	r3, #129	; 0x81
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	58d2      	ldr	r2, [r2, r3]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	0011      	movs	r1, r2
 8000e60:	697a      	ldr	r2, [r7, #20]
 8000e62:	2381      	movs	r3, #129	; 0x81
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	691b      	ldr	r3, [r3, #16]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d10c      	bne.n	8000e8a <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e70:	697a      	ldr	r2, [r7, #20]
 8000e72:	2385      	movs	r3, #133	; 0x85
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	58d3      	ldr	r3, [r2, r3]
 8000e78:	68fa      	ldr	r2, [r7, #12]
 8000e7a:	43d2      	mvns	r2, r2
 8000e7c:	401a      	ands	r2, r3
 8000e7e:	0011      	movs	r1, r2
 8000e80:	697a      	ldr	r2, [r7, #20]
 8000e82:	2385      	movs	r3, #133	; 0x85
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	50d1      	str	r1, [r2, r3]
 8000e88:	e00a      	b.n	8000ea0 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e8a:	697a      	ldr	r2, [r7, #20]
 8000e8c:	2385      	movs	r3, #133	; 0x85
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	58d2      	ldr	r2, [r2, r3]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	431a      	orrs	r2, r3
 8000e96:	0011      	movs	r1, r2
 8000e98:	697a      	ldr	r2, [r7, #20]
 8000e9a:	2385      	movs	r3, #133	; 0x85
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	6a1b      	ldr	r3, [r3, #32]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d10a      	bne.n	8000ebe <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	2387      	movs	r3, #135	; 0x87
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	58d2      	ldr	r2, [r2, r3]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	431a      	orrs	r2, r3
 8000eb4:	0011      	movs	r1, r2
 8000eb6:	697a      	ldr	r2, [r7, #20]
 8000eb8:	2387      	movs	r3, #135	; 0x87
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ebe:	697a      	ldr	r2, [r7, #20]
 8000ec0:	2380      	movs	r3, #128	; 0x80
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	58d3      	ldr	r3, [r2, r3]
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4393      	bics	r3, r2
 8000eca:	0019      	movs	r1, r3
 8000ecc:	697a      	ldr	r2, [r7, #20]
 8000ece:	2380      	movs	r3, #128	; 0x80
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	e007      	b.n	8000ee8 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000edc:	2280      	movs	r2, #128	; 0x80
 8000ede:	02d2      	lsls	r2, r2, #11
 8000ee0:	431a      	orrs	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
  }
}
 8000ee8:	0018      	movs	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b006      	add	sp, #24
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2220      	movs	r2, #32
 8000efc:	5c9b      	ldrb	r3, [r3, r2]
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d12f      	bne.n	8000f64 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2220      	movs	r2, #32
 8000f08:	2102      	movs	r1, #2
 8000f0a:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2101      	movs	r1, #1
 8000f18:	438a      	bics	r2, r1
 8000f1a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000f1c:	f7ff fdcc 	bl	8000ab8 <HAL_GetTick>
 8000f20:	0003      	movs	r3, r0
 8000f22:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f24:	e013      	b.n	8000f4e <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f26:	f7ff fdc7 	bl	8000ab8 <HAL_GetTick>
 8000f2a:	0002      	movs	r2, r0
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	2b0a      	cmp	r3, #10
 8000f32:	d90c      	bls.n	8000f4e <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f38:	2280      	movs	r2, #128	; 0x80
 8000f3a:	0292      	lsls	r2, r2, #10
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2220      	movs	r2, #32
 8000f46:	2105      	movs	r1, #5
 8000f48:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e012      	b.n	8000f74 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	2201      	movs	r2, #1
 8000f56:	4013      	ands	r3, r2
 8000f58:	d1e5      	bne.n	8000f26 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000f60:	2300      	movs	r3, #0
 8000f62:	e007      	b.n	8000f74 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f68:	2280      	movs	r2, #128	; 0x80
 8000f6a:	0312      	lsls	r2, r2, #12
 8000f6c:	431a      	orrs	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
  }
}
 8000f74:	0018      	movs	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	b004      	add	sp, #16
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b088      	sub	sp, #32
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
 8000f88:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f8a:	201f      	movs	r0, #31
 8000f8c:	183b      	adds	r3, r7, r0
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	2120      	movs	r1, #32
 8000f92:	5c52      	ldrb	r2, [r2, r1]
 8000f94:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f9e:	183b      	adds	r3, r7, r0
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d005      	beq.n	8000fb2 <HAL_CAN_AddTxMessage+0x36>
 8000fa6:	231f      	movs	r3, #31
 8000fa8:	18fb      	adds	r3, r7, r3
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d000      	beq.n	8000fb2 <HAL_CAN_AddTxMessage+0x36>
 8000fb0:	e0b7      	b.n	8001122 <HAL_CAN_AddTxMessage+0x1a6>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	2380      	movs	r3, #128	; 0x80
 8000fb6:	04db      	lsls	r3, r3, #19
 8000fb8:	4013      	ands	r3, r2
 8000fba:	d10a      	bne.n	8000fd2 <HAL_CAN_AddTxMessage+0x56>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	2380      	movs	r3, #128	; 0x80
 8000fc0:	051b      	lsls	r3, r3, #20
 8000fc2:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000fc4:	d105      	bne.n	8000fd2 <HAL_CAN_AddTxMessage+0x56>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	2380      	movs	r3, #128	; 0x80
 8000fca:	055b      	lsls	r3, r3, #21
 8000fcc:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000fce:	d100      	bne.n	8000fd2 <HAL_CAN_AddTxMessage+0x56>
 8000fd0:	e09e      	b.n	8001110 <HAL_CAN_AddTxMessage+0x194>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	0e1b      	lsrs	r3, r3, #24
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	4013      	ands	r3, r2
 8000fda:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d908      	bls.n	8000ff4 <HAL_CAN_AddTxMessage+0x78>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe6:	2280      	movs	r2, #128	; 0x80
 8000fe8:	0412      	lsls	r2, r2, #16
 8000fea:	431a      	orrs	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e09e      	b.n	8001132 <HAL_CAN_AddTxMessage+0x1b6>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	409a      	lsls	r2, r3
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d10c      	bne.n	8001020 <HAL_CAN_AddTxMessage+0xa4>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4311      	orrs	r1, r2
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	3218      	adds	r2, #24
 800101a:	0112      	lsls	r2, r2, #4
 800101c:	50d1      	str	r1, [r2, r3]
 800101e:	e00f      	b.n	8001040 <HAL_CAN_AddTxMessage+0xc4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800102a:	431a      	orrs	r2, r3
 800102c:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8001036:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	3218      	adds	r2, #24
 800103c:	0112      	lsls	r2, r2, #4
 800103e:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	6819      	ldr	r1, [r3, #0]
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	691a      	ldr	r2, [r3, #16]
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	3318      	adds	r3, #24
 800104c:	011b      	lsls	r3, r3, #4
 800104e:	18cb      	adds	r3, r1, r3
 8001050:	3304      	adds	r3, #4
 8001052:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	7d1b      	ldrb	r3, [r3, #20]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d112      	bne.n	8001082 <HAL_CAN_AddTxMessage+0x106>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	3318      	adds	r3, #24
 8001064:	011b      	lsls	r3, r3, #4
 8001066:	18d3      	adds	r3, r2, r3
 8001068:	3304      	adds	r3, #4
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	6819      	ldr	r1, [r3, #0]
 8001070:	2380      	movs	r3, #128	; 0x80
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	431a      	orrs	r2, r3
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	3318      	adds	r3, #24
 800107a:	011b      	lsls	r3, r3, #4
 800107c:	18cb      	adds	r3, r1, r3
 800107e:	3304      	adds	r3, #4
 8001080:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3307      	adds	r3, #7
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	061a      	lsls	r2, r3, #24
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3306      	adds	r3, #6
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	041b      	lsls	r3, r3, #16
 8001092:	431a      	orrs	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3305      	adds	r3, #5
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	021b      	lsls	r3, r3, #8
 800109c:	431a      	orrs	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	3304      	adds	r3, #4
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	0019      	movs	r1, r3
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	6818      	ldr	r0, [r3, #0]
 80010aa:	430a      	orrs	r2, r1
 80010ac:	6979      	ldr	r1, [r7, #20]
 80010ae:	23c6      	movs	r3, #198	; 0xc6
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	0109      	lsls	r1, r1, #4
 80010b4:	1841      	adds	r1, r0, r1
 80010b6:	18cb      	adds	r3, r1, r3
 80010b8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3303      	adds	r3, #3
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	061a      	lsls	r2, r3, #24
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3302      	adds	r3, #2
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	041b      	lsls	r3, r3, #16
 80010ca:	431a      	orrs	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3301      	adds	r3, #1
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	021b      	lsls	r3, r3, #8
 80010d4:	431a      	orrs	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	0019      	movs	r1, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	6818      	ldr	r0, [r3, #0]
 80010e0:	430a      	orrs	r2, r1
 80010e2:	6979      	ldr	r1, [r7, #20]
 80010e4:	23c4      	movs	r3, #196	; 0xc4
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	0109      	lsls	r1, r1, #4
 80010ea:	1841      	adds	r1, r0, r1
 80010ec:	18cb      	adds	r3, r1, r3
 80010ee:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	697a      	ldr	r2, [r7, #20]
 80010f6:	3218      	adds	r2, #24
 80010f8:	0112      	lsls	r2, r2, #4
 80010fa:	58d2      	ldr	r2, [r2, r3]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2101      	movs	r1, #1
 8001102:	4311      	orrs	r1, r2
 8001104:	697a      	ldr	r2, [r7, #20]
 8001106:	3218      	adds	r2, #24
 8001108:	0112      	lsls	r2, r2, #4
 800110a:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 800110c:	2300      	movs	r3, #0
 800110e:	e010      	b.n	8001132 <HAL_CAN_AddTxMessage+0x1b6>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001114:	2280      	movs	r2, #128	; 0x80
 8001116:	0392      	lsls	r2, r2, #14
 8001118:	431a      	orrs	r2, r3
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e007      	b.n	8001132 <HAL_CAN_AddTxMessage+0x1b6>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001126:	2280      	movs	r2, #128	; 0x80
 8001128:	02d2      	lsls	r2, r2, #11
 800112a:	431a      	orrs	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
  }
}
 8001132:	0018      	movs	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	b008      	add	sp, #32
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b086      	sub	sp, #24
 800113e:	af00      	add	r7, sp, #0
 8001140:	60f8      	str	r0, [r7, #12]
 8001142:	60b9      	str	r1, [r7, #8]
 8001144:	607a      	str	r2, [r7, #4]
 8001146:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001148:	2017      	movs	r0, #23
 800114a:	183b      	adds	r3, r7, r0
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	2120      	movs	r1, #32
 8001150:	5c52      	ldrb	r2, [r2, r1]
 8001152:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001154:	183b      	adds	r3, r7, r0
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d005      	beq.n	8001168 <HAL_CAN_GetRxMessage+0x2e>
 800115c:	2317      	movs	r3, #23
 800115e:	18fb      	adds	r3, r7, r3
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b02      	cmp	r3, #2
 8001164:	d000      	beq.n	8001168 <HAL_CAN_GetRxMessage+0x2e>
 8001166:	e0f8      	b.n	800135a <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d10e      	bne.n	800118c <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	2203      	movs	r2, #3
 8001176:	4013      	ands	r3, r2
 8001178:	d117      	bne.n	80011aa <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117e:	2280      	movs	r2, #128	; 0x80
 8001180:	0392      	lsls	r2, r2, #14
 8001182:	431a      	orrs	r2, r3
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e0ee      	b.n	800136a <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	691b      	ldr	r3, [r3, #16]
 8001192:	2203      	movs	r2, #3
 8001194:	4013      	ands	r3, r2
 8001196:	d108      	bne.n	80011aa <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119c:	2280      	movs	r2, #128	; 0x80
 800119e:	0392      	lsls	r2, r2, #14
 80011a0:	431a      	orrs	r2, r3
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e0df      	b.n	800136a <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	321b      	adds	r2, #27
 80011b2:	0112      	lsls	r2, r2, #4
 80011b4:	58d3      	ldr	r3, [r2, r3]
 80011b6:	2204      	movs	r2, #4
 80011b8:	401a      	ands	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10b      	bne.n	80011de <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	321b      	adds	r2, #27
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	58d3      	ldr	r3, [r2, r3]
 80011d2:	0d5b      	lsrs	r3, r3, #21
 80011d4:	055b      	lsls	r3, r3, #21
 80011d6:	0d5a      	lsrs	r2, r3, #21
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	e00a      	b.n	80011f4 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	321b      	adds	r2, #27
 80011e6:	0112      	lsls	r2, r2, #4
 80011e8:	58d3      	ldr	r3, [r2, r3]
 80011ea:	08db      	lsrs	r3, r3, #3
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	08da      	lsrs	r2, r3, #3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	68ba      	ldr	r2, [r7, #8]
 80011fa:	321b      	adds	r2, #27
 80011fc:	0112      	lsls	r2, r2, #4
 80011fe:	58d3      	ldr	r3, [r2, r3]
 8001200:	2202      	movs	r2, #2
 8001202:	401a      	ands	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	331b      	adds	r3, #27
 8001210:	011b      	lsls	r3, r3, #4
 8001212:	18d3      	adds	r3, r2, r3
 8001214:	3304      	adds	r3, #4
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	220f      	movs	r2, #15
 800121a:	401a      	ands	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	331b      	adds	r3, #27
 8001228:	011b      	lsls	r3, r3, #4
 800122a:	18d3      	adds	r3, r2, r3
 800122c:	3304      	adds	r3, #4
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	0a1b      	lsrs	r3, r3, #8
 8001232:	22ff      	movs	r2, #255	; 0xff
 8001234:	401a      	ands	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	331b      	adds	r3, #27
 8001242:	011b      	lsls	r3, r3, #4
 8001244:	18d3      	adds	r3, r2, r3
 8001246:	3304      	adds	r3, #4
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	0c1b      	lsrs	r3, r3, #16
 800124c:	041b      	lsls	r3, r3, #16
 800124e:	0c1a      	lsrs	r2, r3, #16
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	6819      	ldr	r1, [r3, #0]
 8001258:	68ba      	ldr	r2, [r7, #8]
 800125a:	23dc      	movs	r3, #220	; 0xdc
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	0112      	lsls	r2, r2, #4
 8001260:	188a      	adds	r2, r1, r2
 8001262:	18d3      	adds	r3, r2, r3
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6819      	ldr	r1, [r3, #0]
 8001270:	68ba      	ldr	r2, [r7, #8]
 8001272:	23dc      	movs	r3, #220	; 0xdc
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	0112      	lsls	r2, r2, #4
 8001278:	188a      	adds	r2, r1, r2
 800127a:	18d3      	adds	r3, r2, r3
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	0a1a      	lsrs	r2, r3, #8
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	3301      	adds	r3, #1
 8001284:	b2d2      	uxtb	r2, r2
 8001286:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6819      	ldr	r1, [r3, #0]
 800128c:	68ba      	ldr	r2, [r7, #8]
 800128e:	23dc      	movs	r3, #220	; 0xdc
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	0112      	lsls	r2, r2, #4
 8001294:	188a      	adds	r2, r1, r2
 8001296:	18d3      	adds	r3, r2, r3
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	0c1a      	lsrs	r2, r3, #16
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	3302      	adds	r3, #2
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	6819      	ldr	r1, [r3, #0]
 80012a8:	68ba      	ldr	r2, [r7, #8]
 80012aa:	23dc      	movs	r3, #220	; 0xdc
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	0112      	lsls	r2, r2, #4
 80012b0:	188a      	adds	r2, r1, r2
 80012b2:	18d3      	adds	r3, r2, r3
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	0e1a      	lsrs	r2, r3, #24
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	3303      	adds	r3, #3
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	6819      	ldr	r1, [r3, #0]
 80012c4:	68ba      	ldr	r2, [r7, #8]
 80012c6:	23de      	movs	r3, #222	; 0xde
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	0112      	lsls	r2, r2, #4
 80012cc:	188a      	adds	r2, r1, r2
 80012ce:	18d3      	adds	r3, r2, r3
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	3304      	adds	r3, #4
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	6819      	ldr	r1, [r3, #0]
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	23de      	movs	r3, #222	; 0xde
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	0112      	lsls	r2, r2, #4
 80012e6:	188a      	adds	r2, r1, r2
 80012e8:	18d3      	adds	r3, r2, r3
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	0a1a      	lsrs	r2, r3, #8
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	3305      	adds	r3, #5
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	6819      	ldr	r1, [r3, #0]
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	23de      	movs	r3, #222	; 0xde
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	0112      	lsls	r2, r2, #4
 8001302:	188a      	adds	r2, r1, r2
 8001304:	18d3      	adds	r3, r2, r3
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	0c1a      	lsrs	r2, r3, #16
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	3306      	adds	r3, #6
 800130e:	b2d2      	uxtb	r2, r2
 8001310:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6819      	ldr	r1, [r3, #0]
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	23de      	movs	r3, #222	; 0xde
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	0112      	lsls	r2, r2, #4
 800131e:	188a      	adds	r2, r1, r2
 8001320:	18d3      	adds	r3, r2, r3
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	0e1a      	lsrs	r2, r3, #24
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	3307      	adds	r3, #7
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d108      	bne.n	8001346 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	68da      	ldr	r2, [r3, #12]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2120      	movs	r1, #32
 8001340:	430a      	orrs	r2, r1
 8001342:	60da      	str	r2, [r3, #12]
 8001344:	e007      	b.n	8001356 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	691a      	ldr	r2, [r3, #16]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2120      	movs	r1, #32
 8001352:	430a      	orrs	r2, r1
 8001354:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	e007      	b.n	800136a <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135e:	2280      	movs	r2, #128	; 0x80
 8001360:	02d2      	lsls	r2, r2, #11
 8001362:	431a      	orrs	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
  }
}
 800136a:	0018      	movs	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	b006      	add	sp, #24
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b084      	sub	sp, #16
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
 800137a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800137c:	200f      	movs	r0, #15
 800137e:	183b      	adds	r3, r7, r0
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	2120      	movs	r1, #32
 8001384:	5c52      	ldrb	r2, [r2, r1]
 8001386:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001388:	183b      	adds	r3, r7, r0
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d004      	beq.n	800139a <HAL_CAN_ActivateNotification+0x28>
 8001390:	230f      	movs	r3, #15
 8001392:	18fb      	adds	r3, r7, r3
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b02      	cmp	r3, #2
 8001398:	d109      	bne.n	80013ae <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6959      	ldr	r1, [r3, #20]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	430a      	orrs	r2, r1
 80013a8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	e007      	b.n	80013be <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b2:	2280      	movs	r2, #128	; 0x80
 80013b4:	02d2      	lsls	r2, r2, #11
 80013b6:	431a      	orrs	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
  }
}
 80013be:	0018      	movs	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	b004      	add	sp, #16
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b08a      	sub	sp, #40	; 0x28
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	2201      	movs	r2, #1
 8001406:	4013      	ands	r3, r2
 8001408:	d100      	bne.n	800140c <HAL_CAN_IRQHandler+0x46>
 800140a:	e084      	b.n	8001516 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	2201      	movs	r2, #1
 8001410:	4013      	ands	r3, r2
 8001412:	d024      	beq.n	800145e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2201      	movs	r2, #1
 800141a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	2202      	movs	r2, #2
 8001420:	4013      	ands	r3, r2
 8001422:	d004      	beq.n	800142e <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	0018      	movs	r0, r3
 8001428:	f000 f97e 	bl	8001728 <HAL_CAN_TxMailbox0CompleteCallback>
 800142c:	e017      	b.n	800145e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	2204      	movs	r2, #4
 8001432:	4013      	ands	r3, r2
 8001434:	d005      	beq.n	8001442 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	2280      	movs	r2, #128	; 0x80
 800143a:	0112      	lsls	r2, r2, #4
 800143c:	4313      	orrs	r3, r2
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
 8001440:	e00d      	b.n	800145e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	2208      	movs	r2, #8
 8001446:	4013      	ands	r3, r2
 8001448:	d005      	beq.n	8001456 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144c:	2280      	movs	r2, #128	; 0x80
 800144e:	0152      	lsls	r2, r2, #5
 8001450:	4313      	orrs	r3, r2
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
 8001454:	e003      	b.n	800145e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	0018      	movs	r0, r3
 800145a:	f000 f97d 	bl	8001758 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	2380      	movs	r3, #128	; 0x80
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	4013      	ands	r3, r2
 8001466:	d028      	beq.n	80014ba <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2280      	movs	r2, #128	; 0x80
 800146e:	0052      	lsls	r2, r2, #1
 8001470:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4013      	ands	r3, r2
 800147a:	d004      	beq.n	8001486 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	0018      	movs	r0, r3
 8001480:	f000 f95a 	bl	8001738 <HAL_CAN_TxMailbox1CompleteCallback>
 8001484:	e019      	b.n	80014ba <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	2380      	movs	r3, #128	; 0x80
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	4013      	ands	r3, r2
 800148e:	d005      	beq.n	800149c <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001492:	2280      	movs	r2, #128	; 0x80
 8001494:	0192      	lsls	r2, r2, #6
 8001496:	4313      	orrs	r3, r2
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
 800149a:	e00e      	b.n	80014ba <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	011b      	lsls	r3, r3, #4
 80014a2:	4013      	ands	r3, r2
 80014a4:	d005      	beq.n	80014b2 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	2280      	movs	r2, #128	; 0x80
 80014aa:	01d2      	lsls	r2, r2, #7
 80014ac:	4313      	orrs	r3, r2
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
 80014b0:	e003      	b.n	80014ba <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	0018      	movs	r0, r3
 80014b6:	f000 f957 	bl	8001768 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	2380      	movs	r3, #128	; 0x80
 80014be:	025b      	lsls	r3, r3, #9
 80014c0:	4013      	ands	r3, r2
 80014c2:	d028      	beq.n	8001516 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2280      	movs	r2, #128	; 0x80
 80014ca:	0252      	lsls	r2, r2, #9
 80014cc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	2380      	movs	r3, #128	; 0x80
 80014d2:	029b      	lsls	r3, r3, #10
 80014d4:	4013      	ands	r3, r2
 80014d6:	d004      	beq.n	80014e2 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	0018      	movs	r0, r3
 80014dc:	f000 f934 	bl	8001748 <HAL_CAN_TxMailbox2CompleteCallback>
 80014e0:	e019      	b.n	8001516 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	02db      	lsls	r3, r3, #11
 80014e8:	4013      	ands	r3, r2
 80014ea:	d005      	beq.n	80014f8 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ee:	2280      	movs	r2, #128	; 0x80
 80014f0:	0212      	lsls	r2, r2, #8
 80014f2:	4313      	orrs	r3, r2
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
 80014f6:	e00e      	b.n	8001516 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	2380      	movs	r3, #128	; 0x80
 80014fc:	031b      	lsls	r3, r3, #12
 80014fe:	4013      	ands	r3, r2
 8001500:	d005      	beq.n	800150e <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001504:	2280      	movs	r2, #128	; 0x80
 8001506:	0252      	lsls	r2, r2, #9
 8001508:	4313      	orrs	r3, r2
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
 800150c:	e003      	b.n	8001516 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	0018      	movs	r0, r3
 8001512:	f000 f931 	bl	8001778 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001516:	6a3b      	ldr	r3, [r7, #32]
 8001518:	2208      	movs	r2, #8
 800151a:	4013      	ands	r3, r2
 800151c:	d00c      	beq.n	8001538 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	2210      	movs	r2, #16
 8001522:	4013      	ands	r3, r2
 8001524:	d008      	beq.n	8001538 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	2280      	movs	r2, #128	; 0x80
 800152a:	0092      	lsls	r2, r2, #2
 800152c:	4313      	orrs	r3, r2
 800152e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2210      	movs	r2, #16
 8001536:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001538:	6a3b      	ldr	r3, [r7, #32]
 800153a:	2204      	movs	r2, #4
 800153c:	4013      	ands	r3, r2
 800153e:	d00b      	beq.n	8001558 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	2208      	movs	r2, #8
 8001544:	4013      	ands	r3, r2
 8001546:	d007      	beq.n	8001558 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2208      	movs	r2, #8
 800154e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	0018      	movs	r0, r3
 8001554:	f000 f920 	bl	8001798 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001558:	6a3b      	ldr	r3, [r7, #32]
 800155a:	2202      	movs	r2, #2
 800155c:	4013      	ands	r3, r2
 800155e:	d009      	beq.n	8001574 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	2203      	movs	r2, #3
 8001568:	4013      	ands	r3, r2
 800156a:	d003      	beq.n	8001574 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	0018      	movs	r0, r3
 8001570:	f000 f90a 	bl	8001788 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001574:	6a3b      	ldr	r3, [r7, #32]
 8001576:	2240      	movs	r2, #64	; 0x40
 8001578:	4013      	ands	r3, r2
 800157a:	d00c      	beq.n	8001596 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	2210      	movs	r2, #16
 8001580:	4013      	ands	r3, r2
 8001582:	d008      	beq.n	8001596 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001586:	2280      	movs	r2, #128	; 0x80
 8001588:	00d2      	lsls	r2, r2, #3
 800158a:	4313      	orrs	r3, r2
 800158c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2210      	movs	r2, #16
 8001594:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001596:	6a3b      	ldr	r3, [r7, #32]
 8001598:	2220      	movs	r2, #32
 800159a:	4013      	ands	r3, r2
 800159c:	d00b      	beq.n	80015b6 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	2208      	movs	r2, #8
 80015a2:	4013      	ands	r3, r2
 80015a4:	d007      	beq.n	80015b6 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2208      	movs	r2, #8
 80015ac:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	0018      	movs	r0, r3
 80015b2:	f000 f901 	bl	80017b8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80015b6:	6a3b      	ldr	r3, [r7, #32]
 80015b8:	2210      	movs	r2, #16
 80015ba:	4013      	ands	r3, r2
 80015bc:	d009      	beq.n	80015d2 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	2203      	movs	r2, #3
 80015c6:	4013      	ands	r3, r2
 80015c8:	d003      	beq.n	80015d2 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	0018      	movs	r0, r3
 80015ce:	f000 f8eb 	bl	80017a8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80015d2:	6a3a      	ldr	r2, [r7, #32]
 80015d4:	2380      	movs	r3, #128	; 0x80
 80015d6:	029b      	lsls	r3, r3, #10
 80015d8:	4013      	ands	r3, r2
 80015da:	d00b      	beq.n	80015f4 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	2210      	movs	r2, #16
 80015e0:	4013      	ands	r3, r2
 80015e2:	d007      	beq.n	80015f4 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2210      	movs	r2, #16
 80015ea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	0018      	movs	r0, r3
 80015f0:	f000 f8ea 	bl	80017c8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80015f4:	6a3a      	ldr	r2, [r7, #32]
 80015f6:	2380      	movs	r3, #128	; 0x80
 80015f8:	025b      	lsls	r3, r3, #9
 80015fa:	4013      	ands	r3, r2
 80015fc:	d00b      	beq.n	8001616 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	2208      	movs	r2, #8
 8001602:	4013      	ands	r3, r2
 8001604:	d007      	beq.n	8001616 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2208      	movs	r2, #8
 800160c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	0018      	movs	r0, r3
 8001612:	f000 f8e1 	bl	80017d8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001616:	6a3a      	ldr	r2, [r7, #32]
 8001618:	2380      	movs	r3, #128	; 0x80
 800161a:	021b      	lsls	r3, r3, #8
 800161c:	4013      	ands	r3, r2
 800161e:	d100      	bne.n	8001622 <HAL_CAN_IRQHandler+0x25c>
 8001620:	e071      	b.n	8001706 <HAL_CAN_IRQHandler+0x340>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	2204      	movs	r2, #4
 8001626:	4013      	ands	r3, r2
 8001628:	d100      	bne.n	800162c <HAL_CAN_IRQHandler+0x266>
 800162a:	e068      	b.n	80016fe <HAL_CAN_IRQHandler+0x338>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800162c:	6a3a      	ldr	r2, [r7, #32]
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	4013      	ands	r3, r2
 8001634:	d007      	beq.n	8001646 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2201      	movs	r2, #1
 800163a:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800163c:	d003      	beq.n	8001646 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	2201      	movs	r2, #1
 8001642:	4313      	orrs	r3, r2
 8001644:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001646:	6a3a      	ldr	r2, [r7, #32]
 8001648:	2380      	movs	r3, #128	; 0x80
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4013      	ands	r3, r2
 800164e:	d007      	beq.n	8001660 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2202      	movs	r2, #2
 8001654:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001656:	d003      	beq.n	8001660 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	2202      	movs	r2, #2
 800165c:	4313      	orrs	r3, r2
 800165e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001660:	6a3a      	ldr	r2, [r7, #32]
 8001662:	2380      	movs	r3, #128	; 0x80
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	4013      	ands	r3, r2
 8001668:	d007      	beq.n	800167a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2204      	movs	r2, #4
 800166e:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001670:	d003      	beq.n	800167a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001674:	2204      	movs	r2, #4
 8001676:	4313      	orrs	r3, r2
 8001678:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800167a:	6a3a      	ldr	r2, [r7, #32]
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	011b      	lsls	r3, r3, #4
 8001680:	4013      	ands	r3, r2
 8001682:	d03c      	beq.n	80016fe <HAL_CAN_IRQHandler+0x338>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2270      	movs	r2, #112	; 0x70
 8001688:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800168a:	d038      	beq.n	80016fe <HAL_CAN_IRQHandler+0x338>
      {
        switch (esrflags & CAN_ESR_LEC)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2270      	movs	r2, #112	; 0x70
 8001690:	4013      	ands	r3, r2
 8001692:	2b30      	cmp	r3, #48	; 0x30
 8001694:	d016      	beq.n	80016c4 <HAL_CAN_IRQHandler+0x2fe>
 8001696:	d804      	bhi.n	80016a2 <HAL_CAN_IRQHandler+0x2dc>
 8001698:	2b10      	cmp	r3, #16
 800169a:	d009      	beq.n	80016b0 <HAL_CAN_IRQHandler+0x2ea>
 800169c:	2b20      	cmp	r3, #32
 800169e:	d00c      	beq.n	80016ba <HAL_CAN_IRQHandler+0x2f4>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80016a0:	e025      	b.n	80016ee <HAL_CAN_IRQHandler+0x328>
        switch (esrflags & CAN_ESR_LEC)
 80016a2:	2b50      	cmp	r3, #80	; 0x50
 80016a4:	d018      	beq.n	80016d8 <HAL_CAN_IRQHandler+0x312>
 80016a6:	2b60      	cmp	r3, #96	; 0x60
 80016a8:	d01b      	beq.n	80016e2 <HAL_CAN_IRQHandler+0x31c>
 80016aa:	2b40      	cmp	r3, #64	; 0x40
 80016ac:	d00f      	beq.n	80016ce <HAL_CAN_IRQHandler+0x308>
            break;
 80016ae:	e01e      	b.n	80016ee <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_STF;
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	2208      	movs	r2, #8
 80016b4:	4313      	orrs	r3, r2
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016b8:	e019      	b.n	80016ee <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_FOR;
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	2210      	movs	r2, #16
 80016be:	4313      	orrs	r3, r2
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016c2:	e014      	b.n	80016ee <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_ACK;
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	2220      	movs	r2, #32
 80016c8:	4313      	orrs	r3, r2
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016cc:	e00f      	b.n	80016ee <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BR;
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	2240      	movs	r2, #64	; 0x40
 80016d2:	4313      	orrs	r3, r2
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016d6:	e00a      	b.n	80016ee <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BD;
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	2280      	movs	r2, #128	; 0x80
 80016dc:	4313      	orrs	r3, r2
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016e0:	e005      	b.n	80016ee <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_CRC;
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	2280      	movs	r2, #128	; 0x80
 80016e6:	0052      	lsls	r2, r2, #1
 80016e8:	4313      	orrs	r3, r2
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016ec:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	699a      	ldr	r2, [r3, #24]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2170      	movs	r1, #112	; 0x70
 80016fa:	438a      	bics	r2, r1
 80016fc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2204      	movs	r2, #4
 8001704:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	2b00      	cmp	r3, #0
 800170a:	d009      	beq.n	8001720 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	0018      	movs	r0, r3
 800171c:	f000 f864 	bl	80017e8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001720:	46c0      	nop			; (mov r8, r8)
 8001722:	46bd      	mov	sp, r7
 8001724:	b00a      	add	sp, #40	; 0x28
 8001726:	bd80      	pop	{r7, pc}

08001728 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001730:	46c0      	nop			; (mov r8, r8)
 8001732:	46bd      	mov	sp, r7
 8001734:	b002      	add	sp, #8
 8001736:	bd80      	pop	{r7, pc}

08001738 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001740:	46c0      	nop			; (mov r8, r8)
 8001742:	46bd      	mov	sp, r7
 8001744:	b002      	add	sp, #8
 8001746:	bd80      	pop	{r7, pc}

08001748 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001750:	46c0      	nop			; (mov r8, r8)
 8001752:	46bd      	mov	sp, r7
 8001754:	b002      	add	sp, #8
 8001756:	bd80      	pop	{r7, pc}

08001758 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001760:	46c0      	nop			; (mov r8, r8)
 8001762:	46bd      	mov	sp, r7
 8001764:	b002      	add	sp, #8
 8001766:	bd80      	pop	{r7, pc}

08001768 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001770:	46c0      	nop			; (mov r8, r8)
 8001772:	46bd      	mov	sp, r7
 8001774:	b002      	add	sp, #8
 8001776:	bd80      	pop	{r7, pc}

08001778 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001780:	46c0      	nop			; (mov r8, r8)
 8001782:	46bd      	mov	sp, r7
 8001784:	b002      	add	sp, #8
 8001786:	bd80      	pop	{r7, pc}

08001788 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001790:	46c0      	nop			; (mov r8, r8)
 8001792:	46bd      	mov	sp, r7
 8001794:	b002      	add	sp, #8
 8001796:	bd80      	pop	{r7, pc}

08001798 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80017a0:	46c0      	nop			; (mov r8, r8)
 80017a2:	46bd      	mov	sp, r7
 80017a4:	b002      	add	sp, #8
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80017b0:	46c0      	nop			; (mov r8, r8)
 80017b2:	46bd      	mov	sp, r7
 80017b4:	b002      	add	sp, #8
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80017c0:	46c0      	nop			; (mov r8, r8)
 80017c2:	46bd      	mov	sp, r7
 80017c4:	b002      	add	sp, #8
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80017d0:	46c0      	nop			; (mov r8, r8)
 80017d2:	46bd      	mov	sp, r7
 80017d4:	b002      	add	sp, #8
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80017e0:	46c0      	nop			; (mov r8, r8)
 80017e2:	46bd      	mov	sp, r7
 80017e4:	b002      	add	sp, #8
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80017f0:	46c0      	nop			; (mov r8, r8)
 80017f2:	46bd      	mov	sp, r7
 80017f4:	b002      	add	sp, #8
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	0002      	movs	r2, r0
 8001800:	1dfb      	adds	r3, r7, #7
 8001802:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001804:	1dfb      	adds	r3, r7, #7
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b7f      	cmp	r3, #127	; 0x7f
 800180a:	d809      	bhi.n	8001820 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800180c:	1dfb      	adds	r3, r7, #7
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	001a      	movs	r2, r3
 8001812:	231f      	movs	r3, #31
 8001814:	401a      	ands	r2, r3
 8001816:	4b04      	ldr	r3, [pc, #16]	; (8001828 <__NVIC_EnableIRQ+0x30>)
 8001818:	2101      	movs	r1, #1
 800181a:	4091      	lsls	r1, r2
 800181c:	000a      	movs	r2, r1
 800181e:	601a      	str	r2, [r3, #0]
  }
}
 8001820:	46c0      	nop			; (mov r8, r8)
 8001822:	46bd      	mov	sp, r7
 8001824:	b002      	add	sp, #8
 8001826:	bd80      	pop	{r7, pc}
 8001828:	e000e100 	.word	0xe000e100

0800182c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800182c:	b590      	push	{r4, r7, lr}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	0002      	movs	r2, r0
 8001834:	6039      	str	r1, [r7, #0]
 8001836:	1dfb      	adds	r3, r7, #7
 8001838:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800183a:	1dfb      	adds	r3, r7, #7
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b7f      	cmp	r3, #127	; 0x7f
 8001840:	d828      	bhi.n	8001894 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001842:	4a2f      	ldr	r2, [pc, #188]	; (8001900 <__NVIC_SetPriority+0xd4>)
 8001844:	1dfb      	adds	r3, r7, #7
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	b25b      	sxtb	r3, r3
 800184a:	089b      	lsrs	r3, r3, #2
 800184c:	33c0      	adds	r3, #192	; 0xc0
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	589b      	ldr	r3, [r3, r2]
 8001852:	1dfa      	adds	r2, r7, #7
 8001854:	7812      	ldrb	r2, [r2, #0]
 8001856:	0011      	movs	r1, r2
 8001858:	2203      	movs	r2, #3
 800185a:	400a      	ands	r2, r1
 800185c:	00d2      	lsls	r2, r2, #3
 800185e:	21ff      	movs	r1, #255	; 0xff
 8001860:	4091      	lsls	r1, r2
 8001862:	000a      	movs	r2, r1
 8001864:	43d2      	mvns	r2, r2
 8001866:	401a      	ands	r2, r3
 8001868:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	019b      	lsls	r3, r3, #6
 800186e:	22ff      	movs	r2, #255	; 0xff
 8001870:	401a      	ands	r2, r3
 8001872:	1dfb      	adds	r3, r7, #7
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	0018      	movs	r0, r3
 8001878:	2303      	movs	r3, #3
 800187a:	4003      	ands	r3, r0
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001880:	481f      	ldr	r0, [pc, #124]	; (8001900 <__NVIC_SetPriority+0xd4>)
 8001882:	1dfb      	adds	r3, r7, #7
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	b25b      	sxtb	r3, r3
 8001888:	089b      	lsrs	r3, r3, #2
 800188a:	430a      	orrs	r2, r1
 800188c:	33c0      	adds	r3, #192	; 0xc0
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001892:	e031      	b.n	80018f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001894:	4a1b      	ldr	r2, [pc, #108]	; (8001904 <__NVIC_SetPriority+0xd8>)
 8001896:	1dfb      	adds	r3, r7, #7
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	0019      	movs	r1, r3
 800189c:	230f      	movs	r3, #15
 800189e:	400b      	ands	r3, r1
 80018a0:	3b08      	subs	r3, #8
 80018a2:	089b      	lsrs	r3, r3, #2
 80018a4:	3306      	adds	r3, #6
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	18d3      	adds	r3, r2, r3
 80018aa:	3304      	adds	r3, #4
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	1dfa      	adds	r2, r7, #7
 80018b0:	7812      	ldrb	r2, [r2, #0]
 80018b2:	0011      	movs	r1, r2
 80018b4:	2203      	movs	r2, #3
 80018b6:	400a      	ands	r2, r1
 80018b8:	00d2      	lsls	r2, r2, #3
 80018ba:	21ff      	movs	r1, #255	; 0xff
 80018bc:	4091      	lsls	r1, r2
 80018be:	000a      	movs	r2, r1
 80018c0:	43d2      	mvns	r2, r2
 80018c2:	401a      	ands	r2, r3
 80018c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	019b      	lsls	r3, r3, #6
 80018ca:	22ff      	movs	r2, #255	; 0xff
 80018cc:	401a      	ands	r2, r3
 80018ce:	1dfb      	adds	r3, r7, #7
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	0018      	movs	r0, r3
 80018d4:	2303      	movs	r3, #3
 80018d6:	4003      	ands	r3, r0
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018dc:	4809      	ldr	r0, [pc, #36]	; (8001904 <__NVIC_SetPriority+0xd8>)
 80018de:	1dfb      	adds	r3, r7, #7
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	001c      	movs	r4, r3
 80018e4:	230f      	movs	r3, #15
 80018e6:	4023      	ands	r3, r4
 80018e8:	3b08      	subs	r3, #8
 80018ea:	089b      	lsrs	r3, r3, #2
 80018ec:	430a      	orrs	r2, r1
 80018ee:	3306      	adds	r3, #6
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	18c3      	adds	r3, r0, r3
 80018f4:	3304      	adds	r3, #4
 80018f6:	601a      	str	r2, [r3, #0]
}
 80018f8:	46c0      	nop			; (mov r8, r8)
 80018fa:	46bd      	mov	sp, r7
 80018fc:	b003      	add	sp, #12
 80018fe:	bd90      	pop	{r4, r7, pc}
 8001900:	e000e100 	.word	0xe000e100
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	4a0c      	ldr	r2, [pc, #48]	; (8001948 <SysTick_Config+0x40>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d901      	bls.n	800191e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800191a:	2301      	movs	r3, #1
 800191c:	e010      	b.n	8001940 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800191e:	4b0b      	ldr	r3, [pc, #44]	; (800194c <SysTick_Config+0x44>)
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	3a01      	subs	r2, #1
 8001924:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001926:	2301      	movs	r3, #1
 8001928:	425b      	negs	r3, r3
 800192a:	2103      	movs	r1, #3
 800192c:	0018      	movs	r0, r3
 800192e:	f7ff ff7d 	bl	800182c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <SysTick_Config+0x44>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001938:	4b04      	ldr	r3, [pc, #16]	; (800194c <SysTick_Config+0x44>)
 800193a:	2207      	movs	r2, #7
 800193c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800193e:	2300      	movs	r3, #0
}
 8001940:	0018      	movs	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	b002      	add	sp, #8
 8001946:	bd80      	pop	{r7, pc}
 8001948:	00ffffff 	.word	0x00ffffff
 800194c:	e000e010 	.word	0xe000e010

08001950 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	60b9      	str	r1, [r7, #8]
 8001958:	607a      	str	r2, [r7, #4]
 800195a:	210f      	movs	r1, #15
 800195c:	187b      	adds	r3, r7, r1
 800195e:	1c02      	adds	r2, r0, #0
 8001960:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	187b      	adds	r3, r7, r1
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	b25b      	sxtb	r3, r3
 800196a:	0011      	movs	r1, r2
 800196c:	0018      	movs	r0, r3
 800196e:	f7ff ff5d 	bl	800182c <__NVIC_SetPriority>
}
 8001972:	46c0      	nop			; (mov r8, r8)
 8001974:	46bd      	mov	sp, r7
 8001976:	b004      	add	sp, #16
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	0002      	movs	r2, r0
 8001982:	1dfb      	adds	r3, r7, #7
 8001984:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001986:	1dfb      	adds	r3, r7, #7
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	b25b      	sxtb	r3, r3
 800198c:	0018      	movs	r0, r3
 800198e:	f7ff ff33 	bl	80017f8 <__NVIC_EnableIRQ>
}
 8001992:	46c0      	nop			; (mov r8, r8)
 8001994:	46bd      	mov	sp, r7
 8001996:	b002      	add	sp, #8
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	0018      	movs	r0, r3
 80019a6:	f7ff ffaf 	bl	8001908 <SysTick_Config>
 80019aa:	0003      	movs	r3, r0
}
 80019ac:	0018      	movs	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	b002      	add	sp, #8
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c2:	e149      	b.n	8001c58 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2101      	movs	r1, #1
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	4091      	lsls	r1, r2
 80019ce:	000a      	movs	r2, r1
 80019d0:	4013      	ands	r3, r2
 80019d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d100      	bne.n	80019dc <HAL_GPIO_Init+0x28>
 80019da:	e13a      	b.n	8001c52 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d00b      	beq.n	80019fc <HAL_GPIO_Init+0x48>
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d007      	beq.n	80019fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019f0:	2b11      	cmp	r3, #17
 80019f2:	d003      	beq.n	80019fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b12      	cmp	r3, #18
 80019fa:	d130      	bne.n	8001a5e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	2203      	movs	r2, #3
 8001a08:	409a      	lsls	r2, r3
 8001a0a:	0013      	movs	r3, r2
 8001a0c:	43da      	mvns	r2, r3
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	4013      	ands	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	68da      	ldr	r2, [r3, #12]
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	409a      	lsls	r2, r3
 8001a1e:	0013      	movs	r3, r2
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a32:	2201      	movs	r2, #1
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	409a      	lsls	r2, r3
 8001a38:	0013      	movs	r3, r2
 8001a3a:	43da      	mvns	r2, r3
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	091b      	lsrs	r3, r3, #4
 8001a48:	2201      	movs	r2, #1
 8001a4a:	401a      	ands	r2, r3
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	409a      	lsls	r2, r3
 8001a50:	0013      	movs	r3, r2
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	2203      	movs	r2, #3
 8001a6a:	409a      	lsls	r2, r3
 8001a6c:	0013      	movs	r3, r2
 8001a6e:	43da      	mvns	r2, r3
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	4013      	ands	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	689a      	ldr	r2, [r3, #8]
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	0013      	movs	r3, r2
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d003      	beq.n	8001a9e <HAL_GPIO_Init+0xea>
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b12      	cmp	r3, #18
 8001a9c:	d123      	bne.n	8001ae6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	08da      	lsrs	r2, r3, #3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3208      	adds	r2, #8
 8001aa6:	0092      	lsls	r2, r2, #2
 8001aa8:	58d3      	ldr	r3, [r2, r3]
 8001aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	2207      	movs	r2, #7
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	220f      	movs	r2, #15
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	0013      	movs	r3, r2
 8001aba:	43da      	mvns	r2, r3
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	691a      	ldr	r2, [r3, #16]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	2107      	movs	r1, #7
 8001aca:	400b      	ands	r3, r1
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	409a      	lsls	r2, r3
 8001ad0:	0013      	movs	r3, r2
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	08da      	lsrs	r2, r3, #3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3208      	adds	r2, #8
 8001ae0:	0092      	lsls	r2, r2, #2
 8001ae2:	6939      	ldr	r1, [r7, #16]
 8001ae4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	2203      	movs	r2, #3
 8001af2:	409a      	lsls	r2, r3
 8001af4:	0013      	movs	r3, r2
 8001af6:	43da      	mvns	r2, r3
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	4013      	ands	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2203      	movs	r2, #3
 8001b04:	401a      	ands	r2, r3
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	409a      	lsls	r2, r3
 8001b0c:	0013      	movs	r3, r2
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	2380      	movs	r3, #128	; 0x80
 8001b20:	055b      	lsls	r3, r3, #21
 8001b22:	4013      	ands	r3, r2
 8001b24:	d100      	bne.n	8001b28 <HAL_GPIO_Init+0x174>
 8001b26:	e094      	b.n	8001c52 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b28:	4b51      	ldr	r3, [pc, #324]	; (8001c70 <HAL_GPIO_Init+0x2bc>)
 8001b2a:	699a      	ldr	r2, [r3, #24]
 8001b2c:	4b50      	ldr	r3, [pc, #320]	; (8001c70 <HAL_GPIO_Init+0x2bc>)
 8001b2e:	2101      	movs	r1, #1
 8001b30:	430a      	orrs	r2, r1
 8001b32:	619a      	str	r2, [r3, #24]
 8001b34:	4b4e      	ldr	r3, [pc, #312]	; (8001c70 <HAL_GPIO_Init+0x2bc>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b40:	4a4c      	ldr	r2, [pc, #304]	; (8001c74 <HAL_GPIO_Init+0x2c0>)
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	089b      	lsrs	r3, r3, #2
 8001b46:	3302      	adds	r3, #2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	589b      	ldr	r3, [r3, r2]
 8001b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	2203      	movs	r2, #3
 8001b52:	4013      	ands	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	220f      	movs	r2, #15
 8001b58:	409a      	lsls	r2, r3
 8001b5a:	0013      	movs	r3, r2
 8001b5c:	43da      	mvns	r2, r3
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	2390      	movs	r3, #144	; 0x90
 8001b68:	05db      	lsls	r3, r3, #23
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d00d      	beq.n	8001b8a <HAL_GPIO_Init+0x1d6>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a41      	ldr	r2, [pc, #260]	; (8001c78 <HAL_GPIO_Init+0x2c4>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d007      	beq.n	8001b86 <HAL_GPIO_Init+0x1d2>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a40      	ldr	r2, [pc, #256]	; (8001c7c <HAL_GPIO_Init+0x2c8>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d101      	bne.n	8001b82 <HAL_GPIO_Init+0x1ce>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e004      	b.n	8001b8c <HAL_GPIO_Init+0x1d8>
 8001b82:	2305      	movs	r3, #5
 8001b84:	e002      	b.n	8001b8c <HAL_GPIO_Init+0x1d8>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <HAL_GPIO_Init+0x1d8>
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	2103      	movs	r1, #3
 8001b90:	400a      	ands	r2, r1
 8001b92:	0092      	lsls	r2, r2, #2
 8001b94:	4093      	lsls	r3, r2
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b9c:	4935      	ldr	r1, [pc, #212]	; (8001c74 <HAL_GPIO_Init+0x2c0>)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	089b      	lsrs	r3, r3, #2
 8001ba2:	3302      	adds	r3, #2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001baa:	4b35      	ldr	r3, [pc, #212]	; (8001c80 <HAL_GPIO_Init+0x2cc>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	43da      	mvns	r2, r3
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	025b      	lsls	r3, r3, #9
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001bce:	4b2c      	ldr	r3, [pc, #176]	; (8001c80 <HAL_GPIO_Init+0x2cc>)
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001bd4:	4b2a      	ldr	r3, [pc, #168]	; (8001c80 <HAL_GPIO_Init+0x2cc>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	43da      	mvns	r2, r3
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	4013      	ands	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	029b      	lsls	r3, r3, #10
 8001bec:	4013      	ands	r3, r2
 8001bee:	d003      	beq.n	8001bf8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bf8:	4b21      	ldr	r3, [pc, #132]	; (8001c80 <HAL_GPIO_Init+0x2cc>)
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bfe:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <HAL_GPIO_Init+0x2cc>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	43da      	mvns	r2, r3
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	2380      	movs	r3, #128	; 0x80
 8001c14:	035b      	lsls	r3, r3, #13
 8001c16:	4013      	ands	r3, r2
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c22:	4b17      	ldr	r3, [pc, #92]	; (8001c80 <HAL_GPIO_Init+0x2cc>)
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001c28:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <HAL_GPIO_Init+0x2cc>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	43da      	mvns	r2, r3
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	4013      	ands	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	039b      	lsls	r3, r3, #14
 8001c40:	4013      	ands	r3, r2
 8001c42:	d003      	beq.n	8001c4c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <HAL_GPIO_Init+0x2cc>)
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	3301      	adds	r3, #1
 8001c56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	40da      	lsrs	r2, r3
 8001c60:	1e13      	subs	r3, r2, #0
 8001c62:	d000      	beq.n	8001c66 <HAL_GPIO_Init+0x2b2>
 8001c64:	e6ae      	b.n	80019c4 <HAL_GPIO_Init+0x10>
  } 
}
 8001c66:	46c0      	nop			; (mov r8, r8)
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	b006      	add	sp, #24
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40010000 	.word	0x40010000
 8001c78:	48000400 	.word	0x48000400
 8001c7c:	48000800 	.word	0x48000800
 8001c80:	40010400 	.word	0x40010400

08001c84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b088      	sub	sp, #32
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d102      	bne.n	8001c98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	f000 fb76 	bl	8002384 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d100      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x20>
 8001ca2:	e08e      	b.n	8001dc2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ca4:	4bc5      	ldr	r3, [pc, #788]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	220c      	movs	r2, #12
 8001caa:	4013      	ands	r3, r2
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	d00e      	beq.n	8001cce <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cb0:	4bc2      	ldr	r3, [pc, #776]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	220c      	movs	r2, #12
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	d117      	bne.n	8001cec <HAL_RCC_OscConfig+0x68>
 8001cbc:	4bbf      	ldr	r3, [pc, #764]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	23c0      	movs	r3, #192	; 0xc0
 8001cc2:	025b      	lsls	r3, r3, #9
 8001cc4:	401a      	ands	r2, r3
 8001cc6:	2380      	movs	r3, #128	; 0x80
 8001cc8:	025b      	lsls	r3, r3, #9
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d10e      	bne.n	8001cec <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cce:	4bbb      	ldr	r3, [pc, #748]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	2380      	movs	r3, #128	; 0x80
 8001cd4:	029b      	lsls	r3, r3, #10
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	d100      	bne.n	8001cdc <HAL_RCC_OscConfig+0x58>
 8001cda:	e071      	b.n	8001dc0 <HAL_RCC_OscConfig+0x13c>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d000      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x62>
 8001ce4:	e06c      	b.n	8001dc0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	f000 fb4c 	bl	8002384 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d107      	bne.n	8001d04 <HAL_RCC_OscConfig+0x80>
 8001cf4:	4bb1      	ldr	r3, [pc, #708]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	4bb0      	ldr	r3, [pc, #704]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001cfa:	2180      	movs	r1, #128	; 0x80
 8001cfc:	0249      	lsls	r1, r1, #9
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	e02f      	b.n	8001d64 <HAL_RCC_OscConfig+0xe0>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d10c      	bne.n	8001d26 <HAL_RCC_OscConfig+0xa2>
 8001d0c:	4bab      	ldr	r3, [pc, #684]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4baa      	ldr	r3, [pc, #680]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001d12:	49ab      	ldr	r1, [pc, #684]	; (8001fc0 <HAL_RCC_OscConfig+0x33c>)
 8001d14:	400a      	ands	r2, r1
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	4ba8      	ldr	r3, [pc, #672]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	4ba7      	ldr	r3, [pc, #668]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001d1e:	49a9      	ldr	r1, [pc, #676]	; (8001fc4 <HAL_RCC_OscConfig+0x340>)
 8001d20:	400a      	ands	r2, r1
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	e01e      	b.n	8001d64 <HAL_RCC_OscConfig+0xe0>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b05      	cmp	r3, #5
 8001d2c:	d10e      	bne.n	8001d4c <HAL_RCC_OscConfig+0xc8>
 8001d2e:	4ba3      	ldr	r3, [pc, #652]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	4ba2      	ldr	r3, [pc, #648]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001d34:	2180      	movs	r1, #128	; 0x80
 8001d36:	02c9      	lsls	r1, r1, #11
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	4b9f      	ldr	r3, [pc, #636]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b9e      	ldr	r3, [pc, #632]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001d42:	2180      	movs	r1, #128	; 0x80
 8001d44:	0249      	lsls	r1, r1, #9
 8001d46:	430a      	orrs	r2, r1
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	e00b      	b.n	8001d64 <HAL_RCC_OscConfig+0xe0>
 8001d4c:	4b9b      	ldr	r3, [pc, #620]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4b9a      	ldr	r3, [pc, #616]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001d52:	499b      	ldr	r1, [pc, #620]	; (8001fc0 <HAL_RCC_OscConfig+0x33c>)
 8001d54:	400a      	ands	r2, r1
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	4b98      	ldr	r3, [pc, #608]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b97      	ldr	r3, [pc, #604]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001d5e:	4999      	ldr	r1, [pc, #612]	; (8001fc4 <HAL_RCC_OscConfig+0x340>)
 8001d60:	400a      	ands	r2, r1
 8001d62:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d014      	beq.n	8001d96 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6c:	f7fe fea4 	bl	8000ab8 <HAL_GetTick>
 8001d70:	0003      	movs	r3, r0
 8001d72:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d76:	f7fe fe9f 	bl	8000ab8 <HAL_GetTick>
 8001d7a:	0002      	movs	r2, r0
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b64      	cmp	r3, #100	; 0x64
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e2fd      	b.n	8002384 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d88:	4b8c      	ldr	r3, [pc, #560]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	2380      	movs	r3, #128	; 0x80
 8001d8e:	029b      	lsls	r3, r3, #10
 8001d90:	4013      	ands	r3, r2
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0xf2>
 8001d94:	e015      	b.n	8001dc2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d96:	f7fe fe8f 	bl	8000ab8 <HAL_GetTick>
 8001d9a:	0003      	movs	r3, r0
 8001d9c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001da0:	f7fe fe8a 	bl	8000ab8 <HAL_GetTick>
 8001da4:	0002      	movs	r2, r0
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b64      	cmp	r3, #100	; 0x64
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e2e8      	b.n	8002384 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001db2:	4b82      	ldr	r3, [pc, #520]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	2380      	movs	r3, #128	; 0x80
 8001db8:	029b      	lsls	r3, r3, #10
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0x11c>
 8001dbe:	e000      	b.n	8001dc2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d100      	bne.n	8001dce <HAL_RCC_OscConfig+0x14a>
 8001dcc:	e06c      	b.n	8001ea8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001dce:	4b7b      	ldr	r3, [pc, #492]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	220c      	movs	r2, #12
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d00e      	beq.n	8001df6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001dd8:	4b78      	ldr	r3, [pc, #480]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	220c      	movs	r2, #12
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d11f      	bne.n	8001e24 <HAL_RCC_OscConfig+0x1a0>
 8001de4:	4b75      	ldr	r3, [pc, #468]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	23c0      	movs	r3, #192	; 0xc0
 8001dea:	025b      	lsls	r3, r3, #9
 8001dec:	401a      	ands	r2, r3
 8001dee:	2380      	movs	r3, #128	; 0x80
 8001df0:	021b      	lsls	r3, r3, #8
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d116      	bne.n	8001e24 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001df6:	4b71      	ldr	r3, [pc, #452]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d005      	beq.n	8001e0c <HAL_RCC_OscConfig+0x188>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d001      	beq.n	8001e0c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e2bb      	b.n	8002384 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0c:	4b6b      	ldr	r3, [pc, #428]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	22f8      	movs	r2, #248	; 0xf8
 8001e12:	4393      	bics	r3, r2
 8001e14:	0019      	movs	r1, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	00da      	lsls	r2, r3, #3
 8001e1c:	4b67      	ldr	r3, [pc, #412]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e22:	e041      	b.n	8001ea8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d024      	beq.n	8001e76 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e2c:	4b63      	ldr	r3, [pc, #396]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4b62      	ldr	r3, [pc, #392]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001e32:	2101      	movs	r1, #1
 8001e34:	430a      	orrs	r2, r1
 8001e36:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e38:	f7fe fe3e 	bl	8000ab8 <HAL_GetTick>
 8001e3c:	0003      	movs	r3, r0
 8001e3e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e42:	f7fe fe39 	bl	8000ab8 <HAL_GetTick>
 8001e46:	0002      	movs	r2, r0
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e297      	b.n	8002384 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e54:	4b59      	ldr	r3, [pc, #356]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2202      	movs	r2, #2
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d0f1      	beq.n	8001e42 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e5e:	4b57      	ldr	r3, [pc, #348]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	22f8      	movs	r2, #248	; 0xf8
 8001e64:	4393      	bics	r3, r2
 8001e66:	0019      	movs	r1, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	00da      	lsls	r2, r3, #3
 8001e6e:	4b53      	ldr	r3, [pc, #332]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001e70:	430a      	orrs	r2, r1
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	e018      	b.n	8001ea8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e76:	4b51      	ldr	r3, [pc, #324]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	4b50      	ldr	r3, [pc, #320]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	438a      	bics	r2, r1
 8001e80:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e82:	f7fe fe19 	bl	8000ab8 <HAL_GetTick>
 8001e86:	0003      	movs	r3, r0
 8001e88:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e8c:	f7fe fe14 	bl	8000ab8 <HAL_GetTick>
 8001e90:	0002      	movs	r2, r0
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e272      	b.n	8002384 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e9e:	4b47      	ldr	r3, [pc, #284]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d1f1      	bne.n	8001e8c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2208      	movs	r2, #8
 8001eae:	4013      	ands	r3, r2
 8001eb0:	d036      	beq.n	8001f20 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d019      	beq.n	8001eee <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eba:	4b40      	ldr	r3, [pc, #256]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001ebc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ebe:	4b3f      	ldr	r3, [pc, #252]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec6:	f7fe fdf7 	bl	8000ab8 <HAL_GetTick>
 8001eca:	0003      	movs	r3, r0
 8001ecc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ed0:	f7fe fdf2 	bl	8000ab8 <HAL_GetTick>
 8001ed4:	0002      	movs	r2, r0
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e250      	b.n	8002384 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee2:	4b36      	ldr	r3, [pc, #216]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d0f1      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x24c>
 8001eec:	e018      	b.n	8001f20 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eee:	4b33      	ldr	r3, [pc, #204]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001ef0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ef2:	4b32      	ldr	r3, [pc, #200]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	438a      	bics	r2, r1
 8001ef8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efa:	f7fe fddd 	bl	8000ab8 <HAL_GetTick>
 8001efe:	0003      	movs	r3, r0
 8001f00:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f04:	f7fe fdd8 	bl	8000ab8 <HAL_GetTick>
 8001f08:	0002      	movs	r2, r0
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e236      	b.n	8002384 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f16:	4b29      	ldr	r3, [pc, #164]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d1f1      	bne.n	8001f04 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2204      	movs	r2, #4
 8001f26:	4013      	ands	r3, r2
 8001f28:	d100      	bne.n	8001f2c <HAL_RCC_OscConfig+0x2a8>
 8001f2a:	e0b5      	b.n	8002098 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f2c:	231f      	movs	r3, #31
 8001f2e:	18fb      	adds	r3, r7, r3
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f34:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001f36:	69da      	ldr	r2, [r3, #28]
 8001f38:	2380      	movs	r3, #128	; 0x80
 8001f3a:	055b      	lsls	r3, r3, #21
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d111      	bne.n	8001f64 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f40:	4b1e      	ldr	r3, [pc, #120]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001f42:	69da      	ldr	r2, [r3, #28]
 8001f44:	4b1d      	ldr	r3, [pc, #116]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001f46:	2180      	movs	r1, #128	; 0x80
 8001f48:	0549      	lsls	r1, r1, #21
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	61da      	str	r2, [r3, #28]
 8001f4e:	4b1b      	ldr	r3, [pc, #108]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001f50:	69da      	ldr	r2, [r3, #28]
 8001f52:	2380      	movs	r3, #128	; 0x80
 8001f54:	055b      	lsls	r3, r3, #21
 8001f56:	4013      	ands	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f5c:	231f      	movs	r3, #31
 8001f5e:	18fb      	adds	r3, r7, r3
 8001f60:	2201      	movs	r2, #1
 8001f62:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f64:	4b18      	ldr	r3, [pc, #96]	; (8001fc8 <HAL_RCC_OscConfig+0x344>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	2380      	movs	r3, #128	; 0x80
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d11a      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f70:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <HAL_RCC_OscConfig+0x344>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <HAL_RCC_OscConfig+0x344>)
 8001f76:	2180      	movs	r1, #128	; 0x80
 8001f78:	0049      	lsls	r1, r1, #1
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f7e:	f7fe fd9b 	bl	8000ab8 <HAL_GetTick>
 8001f82:	0003      	movs	r3, r0
 8001f84:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f88:	f7fe fd96 	bl	8000ab8 <HAL_GetTick>
 8001f8c:	0002      	movs	r2, r0
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b64      	cmp	r3, #100	; 0x64
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e1f4      	b.n	8002384 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9a:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <HAL_RCC_OscConfig+0x344>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	2380      	movs	r3, #128	; 0x80
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d0f0      	beq.n	8001f88 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d10e      	bne.n	8001fcc <HAL_RCC_OscConfig+0x348>
 8001fae:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001fb0:	6a1a      	ldr	r2, [r3, #32]
 8001fb2:	4b02      	ldr	r3, [pc, #8]	; (8001fbc <HAL_RCC_OscConfig+0x338>)
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	621a      	str	r2, [r3, #32]
 8001fba:	e035      	b.n	8002028 <HAL_RCC_OscConfig+0x3a4>
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	fffeffff 	.word	0xfffeffff
 8001fc4:	fffbffff 	.word	0xfffbffff
 8001fc8:	40007000 	.word	0x40007000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10c      	bne.n	8001fee <HAL_RCC_OscConfig+0x36a>
 8001fd4:	4bca      	ldr	r3, [pc, #808]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 8001fd6:	6a1a      	ldr	r2, [r3, #32]
 8001fd8:	4bc9      	ldr	r3, [pc, #804]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 8001fda:	2101      	movs	r1, #1
 8001fdc:	438a      	bics	r2, r1
 8001fde:	621a      	str	r2, [r3, #32]
 8001fe0:	4bc7      	ldr	r3, [pc, #796]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 8001fe2:	6a1a      	ldr	r2, [r3, #32]
 8001fe4:	4bc6      	ldr	r3, [pc, #792]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 8001fe6:	2104      	movs	r1, #4
 8001fe8:	438a      	bics	r2, r1
 8001fea:	621a      	str	r2, [r3, #32]
 8001fec:	e01c      	b.n	8002028 <HAL_RCC_OscConfig+0x3a4>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2b05      	cmp	r3, #5
 8001ff4:	d10c      	bne.n	8002010 <HAL_RCC_OscConfig+0x38c>
 8001ff6:	4bc2      	ldr	r3, [pc, #776]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 8001ff8:	6a1a      	ldr	r2, [r3, #32]
 8001ffa:	4bc1      	ldr	r3, [pc, #772]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 8001ffc:	2104      	movs	r1, #4
 8001ffe:	430a      	orrs	r2, r1
 8002000:	621a      	str	r2, [r3, #32]
 8002002:	4bbf      	ldr	r3, [pc, #764]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 8002004:	6a1a      	ldr	r2, [r3, #32]
 8002006:	4bbe      	ldr	r3, [pc, #760]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 8002008:	2101      	movs	r1, #1
 800200a:	430a      	orrs	r2, r1
 800200c:	621a      	str	r2, [r3, #32]
 800200e:	e00b      	b.n	8002028 <HAL_RCC_OscConfig+0x3a4>
 8002010:	4bbb      	ldr	r3, [pc, #748]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 8002012:	6a1a      	ldr	r2, [r3, #32]
 8002014:	4bba      	ldr	r3, [pc, #744]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 8002016:	2101      	movs	r1, #1
 8002018:	438a      	bics	r2, r1
 800201a:	621a      	str	r2, [r3, #32]
 800201c:	4bb8      	ldr	r3, [pc, #736]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 800201e:	6a1a      	ldr	r2, [r3, #32]
 8002020:	4bb7      	ldr	r3, [pc, #732]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 8002022:	2104      	movs	r1, #4
 8002024:	438a      	bics	r2, r1
 8002026:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d014      	beq.n	800205a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002030:	f7fe fd42 	bl	8000ab8 <HAL_GetTick>
 8002034:	0003      	movs	r3, r0
 8002036:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002038:	e009      	b.n	800204e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800203a:	f7fe fd3d 	bl	8000ab8 <HAL_GetTick>
 800203e:	0002      	movs	r2, r0
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	4aaf      	ldr	r2, [pc, #700]	; (8002304 <HAL_RCC_OscConfig+0x680>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e19a      	b.n	8002384 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800204e:	4bac      	ldr	r3, [pc, #688]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	2202      	movs	r2, #2
 8002054:	4013      	ands	r3, r2
 8002056:	d0f0      	beq.n	800203a <HAL_RCC_OscConfig+0x3b6>
 8002058:	e013      	b.n	8002082 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800205a:	f7fe fd2d 	bl	8000ab8 <HAL_GetTick>
 800205e:	0003      	movs	r3, r0
 8002060:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002062:	e009      	b.n	8002078 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002064:	f7fe fd28 	bl	8000ab8 <HAL_GetTick>
 8002068:	0002      	movs	r2, r0
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	4aa5      	ldr	r2, [pc, #660]	; (8002304 <HAL_RCC_OscConfig+0x680>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e185      	b.n	8002384 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002078:	4ba1      	ldr	r3, [pc, #644]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	2202      	movs	r2, #2
 800207e:	4013      	ands	r3, r2
 8002080:	d1f0      	bne.n	8002064 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002082:	231f      	movs	r3, #31
 8002084:	18fb      	adds	r3, r7, r3
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d105      	bne.n	8002098 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800208c:	4b9c      	ldr	r3, [pc, #624]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 800208e:	69da      	ldr	r2, [r3, #28]
 8002090:	4b9b      	ldr	r3, [pc, #620]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 8002092:	499d      	ldr	r1, [pc, #628]	; (8002308 <HAL_RCC_OscConfig+0x684>)
 8002094:	400a      	ands	r2, r1
 8002096:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2210      	movs	r2, #16
 800209e:	4013      	ands	r3, r2
 80020a0:	d063      	beq.n	800216a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d12a      	bne.n	8002100 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80020aa:	4b95      	ldr	r3, [pc, #596]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 80020ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020ae:	4b94      	ldr	r3, [pc, #592]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 80020b0:	2104      	movs	r1, #4
 80020b2:	430a      	orrs	r2, r1
 80020b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80020b6:	4b92      	ldr	r3, [pc, #584]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 80020b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020ba:	4b91      	ldr	r3, [pc, #580]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 80020bc:	2101      	movs	r1, #1
 80020be:	430a      	orrs	r2, r1
 80020c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c2:	f7fe fcf9 	bl	8000ab8 <HAL_GetTick>
 80020c6:	0003      	movs	r3, r0
 80020c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80020cc:	f7fe fcf4 	bl	8000ab8 <HAL_GetTick>
 80020d0:	0002      	movs	r2, r0
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e152      	b.n	8002384 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80020de:	4b88      	ldr	r3, [pc, #544]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 80020e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e2:	2202      	movs	r2, #2
 80020e4:	4013      	ands	r3, r2
 80020e6:	d0f1      	beq.n	80020cc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020e8:	4b85      	ldr	r3, [pc, #532]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 80020ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ec:	22f8      	movs	r2, #248	; 0xf8
 80020ee:	4393      	bics	r3, r2
 80020f0:	0019      	movs	r1, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	00da      	lsls	r2, r3, #3
 80020f8:	4b81      	ldr	r3, [pc, #516]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 80020fa:	430a      	orrs	r2, r1
 80020fc:	635a      	str	r2, [r3, #52]	; 0x34
 80020fe:	e034      	b.n	800216a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	3305      	adds	r3, #5
 8002106:	d111      	bne.n	800212c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002108:	4b7d      	ldr	r3, [pc, #500]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 800210a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800210c:	4b7c      	ldr	r3, [pc, #496]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 800210e:	2104      	movs	r1, #4
 8002110:	438a      	bics	r2, r1
 8002112:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002114:	4b7a      	ldr	r3, [pc, #488]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 8002116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002118:	22f8      	movs	r2, #248	; 0xf8
 800211a:	4393      	bics	r3, r2
 800211c:	0019      	movs	r1, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	00da      	lsls	r2, r3, #3
 8002124:	4b76      	ldr	r3, [pc, #472]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 8002126:	430a      	orrs	r2, r1
 8002128:	635a      	str	r2, [r3, #52]	; 0x34
 800212a:	e01e      	b.n	800216a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800212c:	4b74      	ldr	r3, [pc, #464]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 800212e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002130:	4b73      	ldr	r3, [pc, #460]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 8002132:	2104      	movs	r1, #4
 8002134:	430a      	orrs	r2, r1
 8002136:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002138:	4b71      	ldr	r3, [pc, #452]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 800213a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800213c:	4b70      	ldr	r3, [pc, #448]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 800213e:	2101      	movs	r1, #1
 8002140:	438a      	bics	r2, r1
 8002142:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002144:	f7fe fcb8 	bl	8000ab8 <HAL_GetTick>
 8002148:	0003      	movs	r3, r0
 800214a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800214e:	f7fe fcb3 	bl	8000ab8 <HAL_GetTick>
 8002152:	0002      	movs	r2, r0
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e111      	b.n	8002384 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002160:	4b67      	ldr	r3, [pc, #412]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 8002162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002164:	2202      	movs	r2, #2
 8002166:	4013      	ands	r3, r2
 8002168:	d1f1      	bne.n	800214e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2220      	movs	r2, #32
 8002170:	4013      	ands	r3, r2
 8002172:	d05c      	beq.n	800222e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002174:	4b62      	ldr	r3, [pc, #392]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	220c      	movs	r2, #12
 800217a:	4013      	ands	r3, r2
 800217c:	2b0c      	cmp	r3, #12
 800217e:	d00e      	beq.n	800219e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002180:	4b5f      	ldr	r3, [pc, #380]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	220c      	movs	r2, #12
 8002186:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002188:	2b08      	cmp	r3, #8
 800218a:	d114      	bne.n	80021b6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800218c:	4b5c      	ldr	r3, [pc, #368]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	23c0      	movs	r3, #192	; 0xc0
 8002192:	025b      	lsls	r3, r3, #9
 8002194:	401a      	ands	r2, r3
 8002196:	23c0      	movs	r3, #192	; 0xc0
 8002198:	025b      	lsls	r3, r3, #9
 800219a:	429a      	cmp	r2, r3
 800219c:	d10b      	bne.n	80021b6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800219e:	4b58      	ldr	r3, [pc, #352]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 80021a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021a2:	2380      	movs	r3, #128	; 0x80
 80021a4:	025b      	lsls	r3, r3, #9
 80021a6:	4013      	ands	r3, r2
 80021a8:	d040      	beq.n	800222c <HAL_RCC_OscConfig+0x5a8>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d03c      	beq.n	800222c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e0e6      	b.n	8002384 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d01b      	beq.n	80021f6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80021be:	4b50      	ldr	r3, [pc, #320]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 80021c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021c2:	4b4f      	ldr	r3, [pc, #316]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 80021c4:	2180      	movs	r1, #128	; 0x80
 80021c6:	0249      	lsls	r1, r1, #9
 80021c8:	430a      	orrs	r2, r1
 80021ca:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021cc:	f7fe fc74 	bl	8000ab8 <HAL_GetTick>
 80021d0:	0003      	movs	r3, r0
 80021d2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021d6:	f7fe fc6f 	bl	8000ab8 <HAL_GetTick>
 80021da:	0002      	movs	r2, r0
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e0cd      	b.n	8002384 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80021e8:	4b45      	ldr	r3, [pc, #276]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 80021ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021ec:	2380      	movs	r3, #128	; 0x80
 80021ee:	025b      	lsls	r3, r3, #9
 80021f0:	4013      	ands	r3, r2
 80021f2:	d0f0      	beq.n	80021d6 <HAL_RCC_OscConfig+0x552>
 80021f4:	e01b      	b.n	800222e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80021f6:	4b42      	ldr	r3, [pc, #264]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 80021f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021fa:	4b41      	ldr	r3, [pc, #260]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 80021fc:	4943      	ldr	r1, [pc, #268]	; (800230c <HAL_RCC_OscConfig+0x688>)
 80021fe:	400a      	ands	r2, r1
 8002200:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002202:	f7fe fc59 	bl	8000ab8 <HAL_GetTick>
 8002206:	0003      	movs	r3, r0
 8002208:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800220c:	f7fe fc54 	bl	8000ab8 <HAL_GetTick>
 8002210:	0002      	movs	r2, r0
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e0b2      	b.n	8002384 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800221e:	4b38      	ldr	r3, [pc, #224]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 8002220:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002222:	2380      	movs	r3, #128	; 0x80
 8002224:	025b      	lsls	r3, r3, #9
 8002226:	4013      	ands	r3, r2
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0x588>
 800222a:	e000      	b.n	800222e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800222c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	2b00      	cmp	r3, #0
 8002234:	d100      	bne.n	8002238 <HAL_RCC_OscConfig+0x5b4>
 8002236:	e0a4      	b.n	8002382 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002238:	4b31      	ldr	r3, [pc, #196]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	220c      	movs	r2, #12
 800223e:	4013      	ands	r3, r2
 8002240:	2b08      	cmp	r3, #8
 8002242:	d100      	bne.n	8002246 <HAL_RCC_OscConfig+0x5c2>
 8002244:	e078      	b.n	8002338 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	2b02      	cmp	r3, #2
 800224c:	d14c      	bne.n	80022e8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224e:	4b2c      	ldr	r3, [pc, #176]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	4b2b      	ldr	r3, [pc, #172]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 8002254:	492e      	ldr	r1, [pc, #184]	; (8002310 <HAL_RCC_OscConfig+0x68c>)
 8002256:	400a      	ands	r2, r1
 8002258:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225a:	f7fe fc2d 	bl	8000ab8 <HAL_GetTick>
 800225e:	0003      	movs	r3, r0
 8002260:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002264:	f7fe fc28 	bl	8000ab8 <HAL_GetTick>
 8002268:	0002      	movs	r2, r0
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e086      	b.n	8002384 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002276:	4b22      	ldr	r3, [pc, #136]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	2380      	movs	r3, #128	; 0x80
 800227c:	049b      	lsls	r3, r3, #18
 800227e:	4013      	ands	r3, r2
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002282:	4b1f      	ldr	r3, [pc, #124]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 8002284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002286:	220f      	movs	r2, #15
 8002288:	4393      	bics	r3, r2
 800228a:	0019      	movs	r1, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002290:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 8002292:	430a      	orrs	r2, r1
 8002294:	62da      	str	r2, [r3, #44]	; 0x2c
 8002296:	4b1a      	ldr	r3, [pc, #104]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	4a1e      	ldr	r2, [pc, #120]	; (8002314 <HAL_RCC_OscConfig+0x690>)
 800229c:	4013      	ands	r3, r2
 800229e:	0019      	movs	r1, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a8:	431a      	orrs	r2, r3
 80022aa:	4b15      	ldr	r3, [pc, #84]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 80022ac:	430a      	orrs	r2, r1
 80022ae:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b0:	4b13      	ldr	r3, [pc, #76]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4b12      	ldr	r3, [pc, #72]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 80022b6:	2180      	movs	r1, #128	; 0x80
 80022b8:	0449      	lsls	r1, r1, #17
 80022ba:	430a      	orrs	r2, r1
 80022bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022be:	f7fe fbfb 	bl	8000ab8 <HAL_GetTick>
 80022c2:	0003      	movs	r3, r0
 80022c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c8:	f7fe fbf6 	bl	8000ab8 <HAL_GetTick>
 80022cc:	0002      	movs	r2, r0
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e054      	b.n	8002384 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022da:	4b09      	ldr	r3, [pc, #36]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	2380      	movs	r3, #128	; 0x80
 80022e0:	049b      	lsls	r3, r3, #18
 80022e2:	4013      	ands	r3, r2
 80022e4:	d0f0      	beq.n	80022c8 <HAL_RCC_OscConfig+0x644>
 80022e6:	e04c      	b.n	8002382 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e8:	4b05      	ldr	r3, [pc, #20]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4b04      	ldr	r3, [pc, #16]	; (8002300 <HAL_RCC_OscConfig+0x67c>)
 80022ee:	4908      	ldr	r1, [pc, #32]	; (8002310 <HAL_RCC_OscConfig+0x68c>)
 80022f0:	400a      	ands	r2, r1
 80022f2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f4:	f7fe fbe0 	bl	8000ab8 <HAL_GetTick>
 80022f8:	0003      	movs	r3, r0
 80022fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022fc:	e015      	b.n	800232a <HAL_RCC_OscConfig+0x6a6>
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	40021000 	.word	0x40021000
 8002304:	00001388 	.word	0x00001388
 8002308:	efffffff 	.word	0xefffffff
 800230c:	fffeffff 	.word	0xfffeffff
 8002310:	feffffff 	.word	0xfeffffff
 8002314:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002318:	f7fe fbce 	bl	8000ab8 <HAL_GetTick>
 800231c:	0002      	movs	r2, r0
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e02c      	b.n	8002384 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800232a:	4b18      	ldr	r3, [pc, #96]	; (800238c <HAL_RCC_OscConfig+0x708>)
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	2380      	movs	r3, #128	; 0x80
 8002330:	049b      	lsls	r3, r3, #18
 8002332:	4013      	ands	r3, r2
 8002334:	d1f0      	bne.n	8002318 <HAL_RCC_OscConfig+0x694>
 8002336:	e024      	b.n	8002382 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	2b01      	cmp	r3, #1
 800233e:	d101      	bne.n	8002344 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e01f      	b.n	8002384 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002344:	4b11      	ldr	r3, [pc, #68]	; (800238c <HAL_RCC_OscConfig+0x708>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800234a:	4b10      	ldr	r3, [pc, #64]	; (800238c <HAL_RCC_OscConfig+0x708>)
 800234c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	23c0      	movs	r3, #192	; 0xc0
 8002354:	025b      	lsls	r3, r3, #9
 8002356:	401a      	ands	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235c:	429a      	cmp	r2, r3
 800235e:	d10e      	bne.n	800237e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	220f      	movs	r2, #15
 8002364:	401a      	ands	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800236a:	429a      	cmp	r2, r3
 800236c:	d107      	bne.n	800237e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	23f0      	movs	r3, #240	; 0xf0
 8002372:	039b      	lsls	r3, r3, #14
 8002374:	401a      	ands	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800237a:	429a      	cmp	r2, r3
 800237c:	d001      	beq.n	8002382 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	0018      	movs	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	b008      	add	sp, #32
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40021000 	.word	0x40021000

08002390 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0bf      	b.n	8002524 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023a4:	4b61      	ldr	r3, [pc, #388]	; (800252c <HAL_RCC_ClockConfig+0x19c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2201      	movs	r2, #1
 80023aa:	4013      	ands	r3, r2
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d911      	bls.n	80023d6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b2:	4b5e      	ldr	r3, [pc, #376]	; (800252c <HAL_RCC_ClockConfig+0x19c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2201      	movs	r2, #1
 80023b8:	4393      	bics	r3, r2
 80023ba:	0019      	movs	r1, r3
 80023bc:	4b5b      	ldr	r3, [pc, #364]	; (800252c <HAL_RCC_ClockConfig+0x19c>)
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c4:	4b59      	ldr	r3, [pc, #356]	; (800252c <HAL_RCC_ClockConfig+0x19c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2201      	movs	r2, #1
 80023ca:	4013      	ands	r3, r2
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d001      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e0a6      	b.n	8002524 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2202      	movs	r2, #2
 80023dc:	4013      	ands	r3, r2
 80023de:	d015      	beq.n	800240c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2204      	movs	r2, #4
 80023e6:	4013      	ands	r3, r2
 80023e8:	d006      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80023ea:	4b51      	ldr	r3, [pc, #324]	; (8002530 <HAL_RCC_ClockConfig+0x1a0>)
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	4b50      	ldr	r3, [pc, #320]	; (8002530 <HAL_RCC_ClockConfig+0x1a0>)
 80023f0:	21e0      	movs	r1, #224	; 0xe0
 80023f2:	00c9      	lsls	r1, r1, #3
 80023f4:	430a      	orrs	r2, r1
 80023f6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f8:	4b4d      	ldr	r3, [pc, #308]	; (8002530 <HAL_RCC_ClockConfig+0x1a0>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	22f0      	movs	r2, #240	; 0xf0
 80023fe:	4393      	bics	r3, r2
 8002400:	0019      	movs	r1, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	4b4a      	ldr	r3, [pc, #296]	; (8002530 <HAL_RCC_ClockConfig+0x1a0>)
 8002408:	430a      	orrs	r2, r1
 800240a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2201      	movs	r2, #1
 8002412:	4013      	ands	r3, r2
 8002414:	d04c      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d107      	bne.n	800242e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241e:	4b44      	ldr	r3, [pc, #272]	; (8002530 <HAL_RCC_ClockConfig+0x1a0>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	2380      	movs	r3, #128	; 0x80
 8002424:	029b      	lsls	r3, r3, #10
 8002426:	4013      	ands	r3, r2
 8002428:	d120      	bne.n	800246c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e07a      	b.n	8002524 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d107      	bne.n	8002446 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002436:	4b3e      	ldr	r3, [pc, #248]	; (8002530 <HAL_RCC_ClockConfig+0x1a0>)
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	2380      	movs	r3, #128	; 0x80
 800243c:	049b      	lsls	r3, r3, #18
 800243e:	4013      	ands	r3, r2
 8002440:	d114      	bne.n	800246c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e06e      	b.n	8002524 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b03      	cmp	r3, #3
 800244c:	d107      	bne.n	800245e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800244e:	4b38      	ldr	r3, [pc, #224]	; (8002530 <HAL_RCC_ClockConfig+0x1a0>)
 8002450:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002452:	2380      	movs	r3, #128	; 0x80
 8002454:	025b      	lsls	r3, r3, #9
 8002456:	4013      	ands	r3, r2
 8002458:	d108      	bne.n	800246c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e062      	b.n	8002524 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245e:	4b34      	ldr	r3, [pc, #208]	; (8002530 <HAL_RCC_ClockConfig+0x1a0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2202      	movs	r2, #2
 8002464:	4013      	ands	r3, r2
 8002466:	d101      	bne.n	800246c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e05b      	b.n	8002524 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800246c:	4b30      	ldr	r3, [pc, #192]	; (8002530 <HAL_RCC_ClockConfig+0x1a0>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2203      	movs	r2, #3
 8002472:	4393      	bics	r3, r2
 8002474:	0019      	movs	r1, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	4b2d      	ldr	r3, [pc, #180]	; (8002530 <HAL_RCC_ClockConfig+0x1a0>)
 800247c:	430a      	orrs	r2, r1
 800247e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002480:	f7fe fb1a 	bl	8000ab8 <HAL_GetTick>
 8002484:	0003      	movs	r3, r0
 8002486:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002488:	e009      	b.n	800249e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800248a:	f7fe fb15 	bl	8000ab8 <HAL_GetTick>
 800248e:	0002      	movs	r2, r0
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	4a27      	ldr	r2, [pc, #156]	; (8002534 <HAL_RCC_ClockConfig+0x1a4>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d901      	bls.n	800249e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e042      	b.n	8002524 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249e:	4b24      	ldr	r3, [pc, #144]	; (8002530 <HAL_RCC_ClockConfig+0x1a0>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	220c      	movs	r2, #12
 80024a4:	401a      	ands	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d1ec      	bne.n	800248a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024b0:	4b1e      	ldr	r3, [pc, #120]	; (800252c <HAL_RCC_ClockConfig+0x19c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2201      	movs	r2, #1
 80024b6:	4013      	ands	r3, r2
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d211      	bcs.n	80024e2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024be:	4b1b      	ldr	r3, [pc, #108]	; (800252c <HAL_RCC_ClockConfig+0x19c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2201      	movs	r2, #1
 80024c4:	4393      	bics	r3, r2
 80024c6:	0019      	movs	r1, r3
 80024c8:	4b18      	ldr	r3, [pc, #96]	; (800252c <HAL_RCC_ClockConfig+0x19c>)
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d0:	4b16      	ldr	r3, [pc, #88]	; (800252c <HAL_RCC_ClockConfig+0x19c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2201      	movs	r2, #1
 80024d6:	4013      	ands	r3, r2
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d001      	beq.n	80024e2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e020      	b.n	8002524 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2204      	movs	r2, #4
 80024e8:	4013      	ands	r3, r2
 80024ea:	d009      	beq.n	8002500 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80024ec:	4b10      	ldr	r3, [pc, #64]	; (8002530 <HAL_RCC_ClockConfig+0x1a0>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	4a11      	ldr	r2, [pc, #68]	; (8002538 <HAL_RCC_ClockConfig+0x1a8>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	0019      	movs	r1, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	4b0d      	ldr	r3, [pc, #52]	; (8002530 <HAL_RCC_ClockConfig+0x1a0>)
 80024fc:	430a      	orrs	r2, r1
 80024fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002500:	f000 f820 	bl	8002544 <HAL_RCC_GetSysClockFreq>
 8002504:	0001      	movs	r1, r0
 8002506:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <HAL_RCC_ClockConfig+0x1a0>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	091b      	lsrs	r3, r3, #4
 800250c:	220f      	movs	r2, #15
 800250e:	4013      	ands	r3, r2
 8002510:	4a0a      	ldr	r2, [pc, #40]	; (800253c <HAL_RCC_ClockConfig+0x1ac>)
 8002512:	5cd3      	ldrb	r3, [r2, r3]
 8002514:	000a      	movs	r2, r1
 8002516:	40da      	lsrs	r2, r3
 8002518:	4b09      	ldr	r3, [pc, #36]	; (8002540 <HAL_RCC_ClockConfig+0x1b0>)
 800251a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800251c:	2000      	movs	r0, #0
 800251e:	f7fe fa85 	bl	8000a2c <HAL_InitTick>
  
  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	0018      	movs	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	b004      	add	sp, #16
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40022000 	.word	0x40022000
 8002530:	40021000 	.word	0x40021000
 8002534:	00001388 	.word	0x00001388
 8002538:	fffff8ff 	.word	0xfffff8ff
 800253c:	08003908 	.word	0x08003908
 8002540:	20000028 	.word	0x20000028

08002544 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002544:	b590      	push	{r4, r7, lr}
 8002546:	b08f      	sub	sp, #60	; 0x3c
 8002548:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800254a:	2314      	movs	r3, #20
 800254c:	18fb      	adds	r3, r7, r3
 800254e:	4a37      	ldr	r2, [pc, #220]	; (800262c <HAL_RCC_GetSysClockFreq+0xe8>)
 8002550:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002552:	c313      	stmia	r3!, {r0, r1, r4}
 8002554:	6812      	ldr	r2, [r2, #0]
 8002556:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002558:	1d3b      	adds	r3, r7, #4
 800255a:	4a35      	ldr	r2, [pc, #212]	; (8002630 <HAL_RCC_GetSysClockFreq+0xec>)
 800255c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800255e:	c313      	stmia	r3!, {r0, r1, r4}
 8002560:	6812      	ldr	r2, [r2, #0]
 8002562:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002568:	2300      	movs	r3, #0
 800256a:	62bb      	str	r3, [r7, #40]	; 0x28
 800256c:	2300      	movs	r3, #0
 800256e:	637b      	str	r3, [r7, #52]	; 0x34
 8002570:	2300      	movs	r3, #0
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002578:	4b2e      	ldr	r3, [pc, #184]	; (8002634 <HAL_RCC_GetSysClockFreq+0xf0>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800257e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002580:	220c      	movs	r2, #12
 8002582:	4013      	ands	r3, r2
 8002584:	2b08      	cmp	r3, #8
 8002586:	d006      	beq.n	8002596 <HAL_RCC_GetSysClockFreq+0x52>
 8002588:	2b0c      	cmp	r3, #12
 800258a:	d043      	beq.n	8002614 <HAL_RCC_GetSysClockFreq+0xd0>
 800258c:	2b04      	cmp	r3, #4
 800258e:	d144      	bne.n	800261a <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002590:	4b29      	ldr	r3, [pc, #164]	; (8002638 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002592:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002594:	e044      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002598:	0c9b      	lsrs	r3, r3, #18
 800259a:	220f      	movs	r2, #15
 800259c:	4013      	ands	r3, r2
 800259e:	2214      	movs	r2, #20
 80025a0:	18ba      	adds	r2, r7, r2
 80025a2:	5cd3      	ldrb	r3, [r2, r3]
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80025a6:	4b23      	ldr	r3, [pc, #140]	; (8002634 <HAL_RCC_GetSysClockFreq+0xf0>)
 80025a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025aa:	220f      	movs	r2, #15
 80025ac:	4013      	ands	r3, r2
 80025ae:	1d3a      	adds	r2, r7, #4
 80025b0:	5cd3      	ldrb	r3, [r2, r3]
 80025b2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80025b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025b6:	23c0      	movs	r3, #192	; 0xc0
 80025b8:	025b      	lsls	r3, r3, #9
 80025ba:	401a      	ands	r2, r3
 80025bc:	2380      	movs	r3, #128	; 0x80
 80025be:	025b      	lsls	r3, r3, #9
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d109      	bne.n	80025d8 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025c6:	481c      	ldr	r0, [pc, #112]	; (8002638 <HAL_RCC_GetSysClockFreq+0xf4>)
 80025c8:	f7fd fd9e 	bl	8000108 <__udivsi3>
 80025cc:	0003      	movs	r3, r0
 80025ce:	001a      	movs	r2, r3
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	4353      	muls	r3, r2
 80025d4:	637b      	str	r3, [r7, #52]	; 0x34
 80025d6:	e01a      	b.n	800260e <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80025d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025da:	23c0      	movs	r3, #192	; 0xc0
 80025dc:	025b      	lsls	r3, r3, #9
 80025de:	401a      	ands	r2, r3
 80025e0:	23c0      	movs	r3, #192	; 0xc0
 80025e2:	025b      	lsls	r3, r3, #9
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d109      	bne.n	80025fc <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025ea:	4814      	ldr	r0, [pc, #80]	; (800263c <HAL_RCC_GetSysClockFreq+0xf8>)
 80025ec:	f7fd fd8c 	bl	8000108 <__udivsi3>
 80025f0:	0003      	movs	r3, r0
 80025f2:	001a      	movs	r2, r3
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	4353      	muls	r3, r2
 80025f8:	637b      	str	r3, [r7, #52]	; 0x34
 80025fa:	e008      	b.n	800260e <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025fe:	480e      	ldr	r0, [pc, #56]	; (8002638 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002600:	f7fd fd82 	bl	8000108 <__udivsi3>
 8002604:	0003      	movs	r3, r0
 8002606:	001a      	movs	r2, r3
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	4353      	muls	r3, r2
 800260c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800260e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002610:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002612:	e005      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002614:	4b09      	ldr	r3, [pc, #36]	; (800263c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002616:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002618:	e002      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800261a:	4b07      	ldr	r3, [pc, #28]	; (8002638 <HAL_RCC_GetSysClockFreq+0xf4>)
 800261c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800261e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002622:	0018      	movs	r0, r3
 8002624:	46bd      	mov	sp, r7
 8002626:	b00f      	add	sp, #60	; 0x3c
 8002628:	bd90      	pop	{r4, r7, pc}
 800262a:	46c0      	nop			; (mov r8, r8)
 800262c:	080038e8 	.word	0x080038e8
 8002630:	080038f8 	.word	0x080038f8
 8002634:	40021000 	.word	0x40021000
 8002638:	007a1200 	.word	0x007a1200
 800263c:	02dc6c00 	.word	0x02dc6c00

08002640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002644:	4b02      	ldr	r3, [pc, #8]	; (8002650 <HAL_RCC_GetHCLKFreq+0x10>)
 8002646:	681b      	ldr	r3, [r3, #0]
}
 8002648:	0018      	movs	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	46c0      	nop			; (mov r8, r8)
 8002650:	20000028 	.word	0x20000028

08002654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002658:	f7ff fff2 	bl	8002640 <HAL_RCC_GetHCLKFreq>
 800265c:	0001      	movs	r1, r0
 800265e:	4b06      	ldr	r3, [pc, #24]	; (8002678 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	0a1b      	lsrs	r3, r3, #8
 8002664:	2207      	movs	r2, #7
 8002666:	4013      	ands	r3, r2
 8002668:	4a04      	ldr	r2, [pc, #16]	; (800267c <HAL_RCC_GetPCLK1Freq+0x28>)
 800266a:	5cd3      	ldrb	r3, [r2, r3]
 800266c:	40d9      	lsrs	r1, r3
 800266e:	000b      	movs	r3, r1
}    
 8002670:	0018      	movs	r0, r3
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	46c0      	nop			; (mov r8, r8)
 8002678:	40021000 	.word	0x40021000
 800267c:	08003918 	.word	0x08003918

08002680 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002688:	2300      	movs	r3, #0
 800268a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800268c:	2300      	movs	r3, #0
 800268e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	2380      	movs	r3, #128	; 0x80
 8002696:	025b      	lsls	r3, r3, #9
 8002698:	4013      	ands	r3, r2
 800269a:	d100      	bne.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800269c:	e08f      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800269e:	2317      	movs	r3, #23
 80026a0:	18fb      	adds	r3, r7, r3
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026a6:	4b67      	ldr	r3, [pc, #412]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80026a8:	69da      	ldr	r2, [r3, #28]
 80026aa:	2380      	movs	r3, #128	; 0x80
 80026ac:	055b      	lsls	r3, r3, #21
 80026ae:	4013      	ands	r3, r2
 80026b0:	d111      	bne.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026b2:	4b64      	ldr	r3, [pc, #400]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80026b4:	69da      	ldr	r2, [r3, #28]
 80026b6:	4b63      	ldr	r3, [pc, #396]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80026b8:	2180      	movs	r1, #128	; 0x80
 80026ba:	0549      	lsls	r1, r1, #21
 80026bc:	430a      	orrs	r2, r1
 80026be:	61da      	str	r2, [r3, #28]
 80026c0:	4b60      	ldr	r3, [pc, #384]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80026c2:	69da      	ldr	r2, [r3, #28]
 80026c4:	2380      	movs	r3, #128	; 0x80
 80026c6:	055b      	lsls	r3, r3, #21
 80026c8:	4013      	ands	r3, r2
 80026ca:	60bb      	str	r3, [r7, #8]
 80026cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ce:	2317      	movs	r3, #23
 80026d0:	18fb      	adds	r3, r7, r3
 80026d2:	2201      	movs	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d6:	4b5c      	ldr	r3, [pc, #368]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	2380      	movs	r3, #128	; 0x80
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	4013      	ands	r3, r2
 80026e0:	d11a      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026e2:	4b59      	ldr	r3, [pc, #356]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	4b58      	ldr	r3, [pc, #352]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80026e8:	2180      	movs	r1, #128	; 0x80
 80026ea:	0049      	lsls	r1, r1, #1
 80026ec:	430a      	orrs	r2, r1
 80026ee:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026f0:	f7fe f9e2 	bl	8000ab8 <HAL_GetTick>
 80026f4:	0003      	movs	r3, r0
 80026f6:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f8:	e008      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026fa:	f7fe f9dd 	bl	8000ab8 <HAL_GetTick>
 80026fe:	0002      	movs	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b64      	cmp	r3, #100	; 0x64
 8002706:	d901      	bls.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e097      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800270c:	4b4e      	ldr	r3, [pc, #312]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	2380      	movs	r3, #128	; 0x80
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	4013      	ands	r3, r2
 8002716:	d0f0      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002718:	4b4a      	ldr	r3, [pc, #296]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800271a:	6a1a      	ldr	r2, [r3, #32]
 800271c:	23c0      	movs	r3, #192	; 0xc0
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4013      	ands	r3, r2
 8002722:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d034      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	23c0      	movs	r3, #192	; 0xc0
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4013      	ands	r3, r2
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	429a      	cmp	r2, r3
 8002738:	d02c      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800273a:	4b42      	ldr	r3, [pc, #264]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	4a43      	ldr	r2, [pc, #268]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002740:	4013      	ands	r3, r2
 8002742:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002744:	4b3f      	ldr	r3, [pc, #252]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002746:	6a1a      	ldr	r2, [r3, #32]
 8002748:	4b3e      	ldr	r3, [pc, #248]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800274a:	2180      	movs	r1, #128	; 0x80
 800274c:	0249      	lsls	r1, r1, #9
 800274e:	430a      	orrs	r2, r1
 8002750:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002752:	4b3c      	ldr	r3, [pc, #240]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002754:	6a1a      	ldr	r2, [r3, #32]
 8002756:	4b3b      	ldr	r3, [pc, #236]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002758:	493d      	ldr	r1, [pc, #244]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800275a:	400a      	ands	r2, r1
 800275c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800275e:	4b39      	ldr	r3, [pc, #228]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2201      	movs	r2, #1
 8002768:	4013      	ands	r3, r2
 800276a:	d013      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276c:	f7fe f9a4 	bl	8000ab8 <HAL_GetTick>
 8002770:	0003      	movs	r3, r0
 8002772:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002774:	e009      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002776:	f7fe f99f 	bl	8000ab8 <HAL_GetTick>
 800277a:	0002      	movs	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	4a34      	ldr	r2, [pc, #208]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d901      	bls.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e058      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278a:	4b2e      	ldr	r3, [pc, #184]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	2202      	movs	r2, #2
 8002790:	4013      	ands	r3, r2
 8002792:	d0f0      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002794:	4b2b      	ldr	r3, [pc, #172]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	4a2c      	ldr	r2, [pc, #176]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800279a:	4013      	ands	r3, r2
 800279c:	0019      	movs	r1, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	4b28      	ldr	r3, [pc, #160]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80027a4:	430a      	orrs	r2, r1
 80027a6:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027a8:	2317      	movs	r3, #23
 80027aa:	18fb      	adds	r3, r7, r3
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d105      	bne.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b2:	4b24      	ldr	r3, [pc, #144]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80027b4:	69da      	ldr	r2, [r3, #28]
 80027b6:	4b23      	ldr	r3, [pc, #140]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80027b8:	4927      	ldr	r1, [pc, #156]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80027ba:	400a      	ands	r2, r1
 80027bc:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2201      	movs	r2, #1
 80027c4:	4013      	ands	r3, r2
 80027c6:	d009      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027c8:	4b1e      	ldr	r3, [pc, #120]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80027ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027cc:	2203      	movs	r2, #3
 80027ce:	4393      	bics	r3, r2
 80027d0:	0019      	movs	r1, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	4b1b      	ldr	r3, [pc, #108]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80027d8:	430a      	orrs	r2, r1
 80027da:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2220      	movs	r2, #32
 80027e2:	4013      	ands	r3, r2
 80027e4:	d009      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027e6:	4b17      	ldr	r3, [pc, #92]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	2210      	movs	r2, #16
 80027ec:	4393      	bics	r3, r2
 80027ee:	0019      	movs	r1, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68da      	ldr	r2, [r3, #12]
 80027f4:	4b13      	ldr	r3, [pc, #76]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80027f6:	430a      	orrs	r2, r1
 80027f8:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	2380      	movs	r3, #128	; 0x80
 8002800:	029b      	lsls	r3, r3, #10
 8002802:	4013      	ands	r3, r2
 8002804:	d009      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002806:	4b0f      	ldr	r3, [pc, #60]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	2280      	movs	r2, #128	; 0x80
 800280c:	4393      	bics	r3, r2
 800280e:	0019      	movs	r1, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	695a      	ldr	r2, [r3, #20]
 8002814:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002816:	430a      	orrs	r2, r1
 8002818:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	2380      	movs	r3, #128	; 0x80
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4013      	ands	r3, r2
 8002824:	d009      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002826:	4b07      	ldr	r3, [pc, #28]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	2240      	movs	r2, #64	; 0x40
 800282c:	4393      	bics	r3, r2
 800282e:	0019      	movs	r1, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691a      	ldr	r2, [r3, #16]
 8002834:	4b03      	ldr	r3, [pc, #12]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002836:	430a      	orrs	r2, r1
 8002838:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	0018      	movs	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	b006      	add	sp, #24
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40021000 	.word	0x40021000
 8002848:	40007000 	.word	0x40007000
 800284c:	fffffcff 	.word	0xfffffcff
 8002850:	fffeffff 	.word	0xfffeffff
 8002854:	00001388 	.word	0x00001388
 8002858:	efffffff 	.word	0xefffffff

0800285c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e044      	b.n	80028f8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002872:	2b00      	cmp	r3, #0
 8002874:	d107      	bne.n	8002886 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2270      	movs	r2, #112	; 0x70
 800287a:	2100      	movs	r1, #0
 800287c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	0018      	movs	r0, r3
 8002882:	f7fd fee5 	bl	8000650 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2224      	movs	r2, #36	; 0x24
 800288a:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2101      	movs	r1, #1
 8002898:	438a      	bics	r2, r1
 800289a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	0018      	movs	r0, r3
 80028a0:	f000 f8d8 	bl	8002a54 <UART_SetConfig>
 80028a4:	0003      	movs	r3, r0
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d101      	bne.n	80028ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e024      	b.n	80028f8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	0018      	movs	r0, r3
 80028ba:	f000 fa51 	bl	8002d60 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	490d      	ldr	r1, [pc, #52]	; (8002900 <HAL_UART_Init+0xa4>)
 80028ca:	400a      	ands	r2, r1
 80028cc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	212a      	movs	r1, #42	; 0x2a
 80028da:	438a      	bics	r2, r1
 80028dc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2101      	movs	r1, #1
 80028ea:	430a      	orrs	r2, r1
 80028ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	0018      	movs	r0, r3
 80028f2:	f000 fae9 	bl	8002ec8 <UART_CheckIdleState>
 80028f6:	0003      	movs	r3, r0
}
 80028f8:	0018      	movs	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	b002      	add	sp, #8
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	ffffb7ff 	.word	0xffffb7ff

08002904 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08a      	sub	sp, #40	; 0x28
 8002908:	af02      	add	r7, sp, #8
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	603b      	str	r3, [r7, #0]
 8002910:	1dbb      	adds	r3, r7, #6
 8002912:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002918:	2b20      	cmp	r3, #32
 800291a:	d000      	beq.n	800291e <HAL_UART_Transmit+0x1a>
 800291c:	e095      	b.n	8002a4a <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <HAL_UART_Transmit+0x28>
 8002924:	1dbb      	adds	r3, r7, #6
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e08d      	b.n	8002a4c <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	2380      	movs	r3, #128	; 0x80
 8002936:	015b      	lsls	r3, r3, #5
 8002938:	429a      	cmp	r2, r3
 800293a:	d109      	bne.n	8002950 <HAL_UART_Transmit+0x4c>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d105      	bne.n	8002950 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2201      	movs	r2, #1
 8002948:	4013      	ands	r3, r2
 800294a:	d001      	beq.n	8002950 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e07d      	b.n	8002a4c <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2270      	movs	r2, #112	; 0x70
 8002954:	5c9b      	ldrb	r3, [r3, r2]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d101      	bne.n	800295e <HAL_UART_Transmit+0x5a>
 800295a:	2302      	movs	r3, #2
 800295c:	e076      	b.n	8002a4c <HAL_UART_Transmit+0x148>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2270      	movs	r2, #112	; 0x70
 8002962:	2101      	movs	r1, #1
 8002964:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2221      	movs	r2, #33	; 0x21
 8002970:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002972:	f7fe f8a1 	bl	8000ab8 <HAL_GetTick>
 8002976:	0003      	movs	r3, r0
 8002978:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	1dba      	adds	r2, r7, #6
 800297e:	2150      	movs	r1, #80	; 0x50
 8002980:	8812      	ldrh	r2, [r2, #0]
 8002982:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	1dba      	adds	r2, r7, #6
 8002988:	2152      	movs	r1, #82	; 0x52
 800298a:	8812      	ldrh	r2, [r2, #0]
 800298c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	2380      	movs	r3, #128	; 0x80
 8002994:	015b      	lsls	r3, r3, #5
 8002996:	429a      	cmp	r2, r3
 8002998:	d108      	bne.n	80029ac <HAL_UART_Transmit+0xa8>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d104      	bne.n	80029ac <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 80029a2:	2300      	movs	r3, #0
 80029a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	61bb      	str	r3, [r7, #24]
 80029aa:	e003      	b.n	80029b4 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029b4:	e02d      	b.n	8002a12 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	0013      	movs	r3, r2
 80029c0:	2200      	movs	r2, #0
 80029c2:	2180      	movs	r1, #128	; 0x80
 80029c4:	f000 fac6 	bl	8002f54 <UART_WaitOnFlagUntilTimeout>
 80029c8:	1e03      	subs	r3, r0, #0
 80029ca:	d001      	beq.n	80029d0 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e03d      	b.n	8002a4c <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10b      	bne.n	80029ee <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	881a      	ldrh	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	05d2      	lsls	r2, r2, #23
 80029e0:	0dd2      	lsrs	r2, r2, #23
 80029e2:	b292      	uxth	r2, r2
 80029e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	3302      	adds	r3, #2
 80029ea:	61bb      	str	r3, [r7, #24]
 80029ec:	e008      	b.n	8002a00 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	781a      	ldrb	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	b292      	uxth	r2, r2
 80029f8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	3301      	adds	r3, #1
 80029fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2252      	movs	r2, #82	; 0x52
 8002a04:	5a9b      	ldrh	r3, [r3, r2]
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b299      	uxth	r1, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2252      	movs	r2, #82	; 0x52
 8002a10:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2252      	movs	r2, #82	; 0x52
 8002a16:	5a9b      	ldrh	r3, [r3, r2]
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1cb      	bne.n	80029b6 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	0013      	movs	r3, r2
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2140      	movs	r1, #64	; 0x40
 8002a2c:	f000 fa92 	bl	8002f54 <UART_WaitOnFlagUntilTimeout>
 8002a30:	1e03      	subs	r3, r0, #0
 8002a32:	d001      	beq.n	8002a38 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e009      	b.n	8002a4c <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2270      	movs	r2, #112	; 0x70
 8002a42:	2100      	movs	r1, #0
 8002a44:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002a46:	2300      	movs	r3, #0
 8002a48:	e000      	b.n	8002a4c <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002a4a:	2302      	movs	r3, #2
  }
}
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b008      	add	sp, #32
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b088      	sub	sp, #32
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a60:	2317      	movs	r3, #23
 8002a62:	18fb      	adds	r3, r7, r3
 8002a64:	2200      	movs	r2, #0
 8002a66:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	431a      	orrs	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4aad      	ldr	r2, [pc, #692]	; (8002d3c <UART_SetConfig+0x2e8>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	0019      	movs	r1, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	4aa8      	ldr	r2, [pc, #672]	; (8002d40 <UART_SetConfig+0x2ec>)
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	0019      	movs	r1, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68da      	ldr	r2, [r3, #12]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	4a9f      	ldr	r2, [pc, #636]	; (8002d44 <UART_SetConfig+0x2f0>)
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	0019      	movs	r1, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a9b      	ldr	r2, [pc, #620]	; (8002d48 <UART_SetConfig+0x2f4>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d125      	bne.n	8002b2a <UART_SetConfig+0xd6>
 8002ade:	4b9b      	ldr	r3, [pc, #620]	; (8002d4c <UART_SetConfig+0x2f8>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d00f      	beq.n	8002b0a <UART_SetConfig+0xb6>
 8002aea:	d304      	bcc.n	8002af6 <UART_SetConfig+0xa2>
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d011      	beq.n	8002b14 <UART_SetConfig+0xc0>
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d005      	beq.n	8002b00 <UART_SetConfig+0xac>
 8002af4:	e013      	b.n	8002b1e <UART_SetConfig+0xca>
 8002af6:	231f      	movs	r3, #31
 8002af8:	18fb      	adds	r3, r7, r3
 8002afa:	2200      	movs	r2, #0
 8002afc:	701a      	strb	r2, [r3, #0]
 8002afe:	e022      	b.n	8002b46 <UART_SetConfig+0xf2>
 8002b00:	231f      	movs	r3, #31
 8002b02:	18fb      	adds	r3, r7, r3
 8002b04:	2202      	movs	r2, #2
 8002b06:	701a      	strb	r2, [r3, #0]
 8002b08:	e01d      	b.n	8002b46 <UART_SetConfig+0xf2>
 8002b0a:	231f      	movs	r3, #31
 8002b0c:	18fb      	adds	r3, r7, r3
 8002b0e:	2204      	movs	r2, #4
 8002b10:	701a      	strb	r2, [r3, #0]
 8002b12:	e018      	b.n	8002b46 <UART_SetConfig+0xf2>
 8002b14:	231f      	movs	r3, #31
 8002b16:	18fb      	adds	r3, r7, r3
 8002b18:	2208      	movs	r2, #8
 8002b1a:	701a      	strb	r2, [r3, #0]
 8002b1c:	e013      	b.n	8002b46 <UART_SetConfig+0xf2>
 8002b1e:	231f      	movs	r3, #31
 8002b20:	18fb      	adds	r3, r7, r3
 8002b22:	2210      	movs	r2, #16
 8002b24:	701a      	strb	r2, [r3, #0]
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	e00d      	b.n	8002b46 <UART_SetConfig+0xf2>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a88      	ldr	r2, [pc, #544]	; (8002d50 <UART_SetConfig+0x2fc>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d104      	bne.n	8002b3e <UART_SetConfig+0xea>
 8002b34:	231f      	movs	r3, #31
 8002b36:	18fb      	adds	r3, r7, r3
 8002b38:	2200      	movs	r2, #0
 8002b3a:	701a      	strb	r2, [r3, #0]
 8002b3c:	e003      	b.n	8002b46 <UART_SetConfig+0xf2>
 8002b3e:	231f      	movs	r3, #31
 8002b40:	18fb      	adds	r3, r7, r3
 8002b42:	2210      	movs	r2, #16
 8002b44:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69da      	ldr	r2, [r3, #28]
 8002b4a:	2380      	movs	r3, #128	; 0x80
 8002b4c:	021b      	lsls	r3, r3, #8
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d000      	beq.n	8002b54 <UART_SetConfig+0x100>
 8002b52:	e07d      	b.n	8002c50 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8002b54:	231f      	movs	r3, #31
 8002b56:	18fb      	adds	r3, r7, r3
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d01c      	beq.n	8002b98 <UART_SetConfig+0x144>
 8002b5e:	dc02      	bgt.n	8002b66 <UART_SetConfig+0x112>
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d005      	beq.n	8002b70 <UART_SetConfig+0x11c>
 8002b64:	e04b      	b.n	8002bfe <UART_SetConfig+0x1aa>
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d025      	beq.n	8002bb6 <UART_SetConfig+0x162>
 8002b6a:	2b08      	cmp	r3, #8
 8002b6c:	d037      	beq.n	8002bde <UART_SetConfig+0x18a>
 8002b6e:	e046      	b.n	8002bfe <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b70:	f7ff fd70 	bl	8002654 <HAL_RCC_GetPCLK1Freq>
 8002b74:	0003      	movs	r3, r0
 8002b76:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	005a      	lsls	r2, r3, #1
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	085b      	lsrs	r3, r3, #1
 8002b82:	18d2      	adds	r2, r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	0019      	movs	r1, r3
 8002b8a:	0010      	movs	r0, r2
 8002b8c:	f7fd fabc 	bl	8000108 <__udivsi3>
 8002b90:	0003      	movs	r3, r0
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	61bb      	str	r3, [r7, #24]
        break;
 8002b96:	e037      	b.n	8002c08 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	085b      	lsrs	r3, r3, #1
 8002b9e:	4a6d      	ldr	r2, [pc, #436]	; (8002d54 <UART_SetConfig+0x300>)
 8002ba0:	189a      	adds	r2, r3, r2
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	0019      	movs	r1, r3
 8002ba8:	0010      	movs	r0, r2
 8002baa:	f7fd faad 	bl	8000108 <__udivsi3>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	61bb      	str	r3, [r7, #24]
        break;
 8002bb4:	e028      	b.n	8002c08 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bb6:	f7ff fcc5 	bl	8002544 <HAL_RCC_GetSysClockFreq>
 8002bba:	0003      	movs	r3, r0
 8002bbc:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	005a      	lsls	r2, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	085b      	lsrs	r3, r3, #1
 8002bc8:	18d2      	adds	r2, r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	0019      	movs	r1, r3
 8002bd0:	0010      	movs	r0, r2
 8002bd2:	f7fd fa99 	bl	8000108 <__udivsi3>
 8002bd6:	0003      	movs	r3, r0
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	61bb      	str	r3, [r7, #24]
        break;
 8002bdc:	e014      	b.n	8002c08 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	085b      	lsrs	r3, r3, #1
 8002be4:	2280      	movs	r2, #128	; 0x80
 8002be6:	0252      	lsls	r2, r2, #9
 8002be8:	189a      	adds	r2, r3, r2
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	0019      	movs	r1, r3
 8002bf0:	0010      	movs	r0, r2
 8002bf2:	f7fd fa89 	bl	8000108 <__udivsi3>
 8002bf6:	0003      	movs	r3, r0
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	61bb      	str	r3, [r7, #24]
        break;
 8002bfc:	e004      	b.n	8002c08 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 8002bfe:	2317      	movs	r3, #23
 8002c00:	18fb      	adds	r3, r7, r3
 8002c02:	2201      	movs	r2, #1
 8002c04:	701a      	strb	r2, [r3, #0]
        break;
 8002c06:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	2b0f      	cmp	r3, #15
 8002c0c:	d91b      	bls.n	8002c46 <UART_SetConfig+0x1f2>
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	4a51      	ldr	r2, [pc, #324]	; (8002d58 <UART_SetConfig+0x304>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d817      	bhi.n	8002c46 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	200a      	movs	r0, #10
 8002c1c:	183b      	adds	r3, r7, r0
 8002c1e:	210f      	movs	r1, #15
 8002c20:	438a      	bics	r2, r1
 8002c22:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	085b      	lsrs	r3, r3, #1
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	2207      	movs	r2, #7
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	b299      	uxth	r1, r3
 8002c30:	183b      	adds	r3, r7, r0
 8002c32:	183a      	adds	r2, r7, r0
 8002c34:	8812      	ldrh	r2, [r2, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	183a      	adds	r2, r7, r0
 8002c40:	8812      	ldrh	r2, [r2, #0]
 8002c42:	60da      	str	r2, [r3, #12]
 8002c44:	e06c      	b.n	8002d20 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8002c46:	2317      	movs	r3, #23
 8002c48:	18fb      	adds	r3, r7, r3
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	701a      	strb	r2, [r3, #0]
 8002c4e:	e067      	b.n	8002d20 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8002c50:	231f      	movs	r3, #31
 8002c52:	18fb      	adds	r3, r7, r3
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d01b      	beq.n	8002c92 <UART_SetConfig+0x23e>
 8002c5a:	dc02      	bgt.n	8002c62 <UART_SetConfig+0x20e>
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d005      	beq.n	8002c6c <UART_SetConfig+0x218>
 8002c60:	e049      	b.n	8002cf6 <UART_SetConfig+0x2a2>
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d024      	beq.n	8002cb0 <UART_SetConfig+0x25c>
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d035      	beq.n	8002cd6 <UART_SetConfig+0x282>
 8002c6a:	e044      	b.n	8002cf6 <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c6c:	f7ff fcf2 	bl	8002654 <HAL_RCC_GetPCLK1Freq>
 8002c70:	0003      	movs	r3, r0
 8002c72:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	085a      	lsrs	r2, r3, #1
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	18d2      	adds	r2, r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	0019      	movs	r1, r3
 8002c84:	0010      	movs	r0, r2
 8002c86:	f7fd fa3f 	bl	8000108 <__udivsi3>
 8002c8a:	0003      	movs	r3, r0
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	61bb      	str	r3, [r7, #24]
        break;
 8002c90:	e036      	b.n	8002d00 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	085b      	lsrs	r3, r3, #1
 8002c98:	4a30      	ldr	r2, [pc, #192]	; (8002d5c <UART_SetConfig+0x308>)
 8002c9a:	189a      	adds	r2, r3, r2
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	0019      	movs	r1, r3
 8002ca2:	0010      	movs	r0, r2
 8002ca4:	f7fd fa30 	bl	8000108 <__udivsi3>
 8002ca8:	0003      	movs	r3, r0
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	61bb      	str	r3, [r7, #24]
        break;
 8002cae:	e027      	b.n	8002d00 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cb0:	f7ff fc48 	bl	8002544 <HAL_RCC_GetSysClockFreq>
 8002cb4:	0003      	movs	r3, r0
 8002cb6:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	085a      	lsrs	r2, r3, #1
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	18d2      	adds	r2, r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	0019      	movs	r1, r3
 8002cc8:	0010      	movs	r0, r2
 8002cca:	f7fd fa1d 	bl	8000108 <__udivsi3>
 8002cce:	0003      	movs	r3, r0
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	61bb      	str	r3, [r7, #24]
        break;
 8002cd4:	e014      	b.n	8002d00 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	085b      	lsrs	r3, r3, #1
 8002cdc:	2280      	movs	r2, #128	; 0x80
 8002cde:	0212      	lsls	r2, r2, #8
 8002ce0:	189a      	adds	r2, r3, r2
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	0019      	movs	r1, r3
 8002ce8:	0010      	movs	r0, r2
 8002cea:	f7fd fa0d 	bl	8000108 <__udivsi3>
 8002cee:	0003      	movs	r3, r0
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	61bb      	str	r3, [r7, #24]
        break;
 8002cf4:	e004      	b.n	8002d00 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 8002cf6:	2317      	movs	r3, #23
 8002cf8:	18fb      	adds	r3, r7, r3
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	701a      	strb	r2, [r3, #0]
        break;
 8002cfe:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	2b0f      	cmp	r3, #15
 8002d04:	d908      	bls.n	8002d18 <UART_SetConfig+0x2c4>
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	4a13      	ldr	r2, [pc, #76]	; (8002d58 <UART_SetConfig+0x304>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d804      	bhi.n	8002d18 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	60da      	str	r2, [r3, #12]
 8002d16:	e003      	b.n	8002d20 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8002d18:	2317      	movs	r3, #23
 8002d1a:	18fb      	adds	r3, r7, r3
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002d2c:	2317      	movs	r3, #23
 8002d2e:	18fb      	adds	r3, r7, r3
 8002d30:	781b      	ldrb	r3, [r3, #0]
}
 8002d32:	0018      	movs	r0, r3
 8002d34:	46bd      	mov	sp, r7
 8002d36:	b008      	add	sp, #32
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	efff69f3 	.word	0xefff69f3
 8002d40:	ffffcfff 	.word	0xffffcfff
 8002d44:	fffff4ff 	.word	0xfffff4ff
 8002d48:	40013800 	.word	0x40013800
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40004400 	.word	0x40004400
 8002d54:	00f42400 	.word	0x00f42400
 8002d58:	0000ffff 	.word	0x0000ffff
 8002d5c:	007a1200 	.word	0x007a1200

08002d60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	4013      	ands	r3, r2
 8002d70:	d00b      	beq.n	8002d8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	4a4a      	ldr	r2, [pc, #296]	; (8002ea4 <UART_AdvFeatureConfig+0x144>)
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	0019      	movs	r1, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8e:	2202      	movs	r2, #2
 8002d90:	4013      	ands	r3, r2
 8002d92:	d00b      	beq.n	8002dac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	4a43      	ldr	r2, [pc, #268]	; (8002ea8 <UART_AdvFeatureConfig+0x148>)
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	0019      	movs	r1, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	2204      	movs	r2, #4
 8002db2:	4013      	ands	r3, r2
 8002db4:	d00b      	beq.n	8002dce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	4a3b      	ldr	r2, [pc, #236]	; (8002eac <UART_AdvFeatureConfig+0x14c>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	0019      	movs	r1, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	2208      	movs	r2, #8
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d00b      	beq.n	8002df0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	4a34      	ldr	r2, [pc, #208]	; (8002eb0 <UART_AdvFeatureConfig+0x150>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	0019      	movs	r1, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	2210      	movs	r2, #16
 8002df6:	4013      	ands	r3, r2
 8002df8:	d00b      	beq.n	8002e12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	4a2c      	ldr	r2, [pc, #176]	; (8002eb4 <UART_AdvFeatureConfig+0x154>)
 8002e02:	4013      	ands	r3, r2
 8002e04:	0019      	movs	r1, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	2220      	movs	r2, #32
 8002e18:	4013      	ands	r3, r2
 8002e1a:	d00b      	beq.n	8002e34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	4a25      	ldr	r2, [pc, #148]	; (8002eb8 <UART_AdvFeatureConfig+0x158>)
 8002e24:	4013      	ands	r3, r2
 8002e26:	0019      	movs	r1, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	2240      	movs	r2, #64	; 0x40
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	d01d      	beq.n	8002e7a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	4a1d      	ldr	r2, [pc, #116]	; (8002ebc <UART_AdvFeatureConfig+0x15c>)
 8002e46:	4013      	ands	r3, r2
 8002e48:	0019      	movs	r1, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e5a:	2380      	movs	r3, #128	; 0x80
 8002e5c:	035b      	lsls	r3, r3, #13
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d10b      	bne.n	8002e7a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	4a15      	ldr	r2, [pc, #84]	; (8002ec0 <UART_AdvFeatureConfig+0x160>)
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	0019      	movs	r1, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	2280      	movs	r2, #128	; 0x80
 8002e80:	4013      	ands	r3, r2
 8002e82:	d00b      	beq.n	8002e9c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	4a0e      	ldr	r2, [pc, #56]	; (8002ec4 <UART_AdvFeatureConfig+0x164>)
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	0019      	movs	r1, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	605a      	str	r2, [r3, #4]
  }
}
 8002e9c:	46c0      	nop			; (mov r8, r8)
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	b002      	add	sp, #8
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	fffdffff 	.word	0xfffdffff
 8002ea8:	fffeffff 	.word	0xfffeffff
 8002eac:	fffbffff 	.word	0xfffbffff
 8002eb0:	ffff7fff 	.word	0xffff7fff
 8002eb4:	ffffefff 	.word	0xffffefff
 8002eb8:	ffffdfff 	.word	0xffffdfff
 8002ebc:	ffefffff 	.word	0xffefffff
 8002ec0:	ff9fffff 	.word	0xff9fffff
 8002ec4:	fff7ffff 	.word	0xfff7ffff

08002ec8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af02      	add	r7, sp, #8
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002ed6:	f7fd fdef 	bl	8000ab8 <HAL_GetTick>
 8002eda:	0003      	movs	r3, r0
 8002edc:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2208      	movs	r2, #8
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	d10d      	bne.n	8002f08 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	2380      	movs	r3, #128	; 0x80
 8002ef0:	0399      	lsls	r1, r3, #14
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	4b16      	ldr	r3, [pc, #88]	; (8002f50 <UART_CheckIdleState+0x88>)
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	0013      	movs	r3, r2
 8002efa:	2200      	movs	r2, #0
 8002efc:	f000 f82a 	bl	8002f54 <UART_WaitOnFlagUntilTimeout>
 8002f00:	1e03      	subs	r3, r0, #0
 8002f02:	d001      	beq.n	8002f08 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e01f      	b.n	8002f48 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2204      	movs	r2, #4
 8002f10:	4013      	ands	r3, r2
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d10d      	bne.n	8002f32 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	2380      	movs	r3, #128	; 0x80
 8002f1a:	03d9      	lsls	r1, r3, #15
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	4b0c      	ldr	r3, [pc, #48]	; (8002f50 <UART_CheckIdleState+0x88>)
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	0013      	movs	r3, r2
 8002f24:	2200      	movs	r2, #0
 8002f26:	f000 f815 	bl	8002f54 <UART_WaitOnFlagUntilTimeout>
 8002f2a:	1e03      	subs	r3, r0, #0
 8002f2c:	d001      	beq.n	8002f32 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e00a      	b.n	8002f48 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2220      	movs	r2, #32
 8002f36:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2270      	movs	r2, #112	; 0x70
 8002f42:	2100      	movs	r1, #0
 8002f44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	0018      	movs	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b004      	add	sp, #16
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	01ffffff 	.word	0x01ffffff

08002f54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	603b      	str	r3, [r7, #0]
 8002f60:	1dfb      	adds	r3, r7, #7
 8002f62:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f64:	e05d      	b.n	8003022 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	d05a      	beq.n	8003022 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f6c:	f7fd fda4 	bl	8000ab8 <HAL_GetTick>
 8002f70:	0002      	movs	r2, r0
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d302      	bcc.n	8002f82 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d11b      	bne.n	8002fba <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	492f      	ldr	r1, [pc, #188]	; (800304c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002f8e:	400a      	ands	r2, r1
 8002f90:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	438a      	bics	r2, r1
 8002fa0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2220      	movs	r2, #32
 8002fac:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2270      	movs	r2, #112	; 0x70
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e043      	b.n	8003042 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2204      	movs	r2, #4
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d02d      	beq.n	8003022 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	69da      	ldr	r2, [r3, #28]
 8002fcc:	2380      	movs	r3, #128	; 0x80
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	401a      	ands	r2, r3
 8002fd2:	2380      	movs	r3, #128	; 0x80
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d123      	bne.n	8003022 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2280      	movs	r2, #128	; 0x80
 8002fe0:	0112      	lsls	r2, r2, #4
 8002fe2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4917      	ldr	r1, [pc, #92]	; (800304c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002ff0:	400a      	ands	r2, r1
 8002ff2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2101      	movs	r1, #1
 8003000:	438a      	bics	r2, r1
 8003002:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2220      	movs	r2, #32
 8003008:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2220      	movs	r2, #32
 800300e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2220      	movs	r2, #32
 8003014:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2270      	movs	r2, #112	; 0x70
 800301a:	2100      	movs	r1, #0
 800301c:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e00f      	b.n	8003042 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	4013      	ands	r3, r2
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	425a      	negs	r2, r3
 8003032:	4153      	adcs	r3, r2
 8003034:	b2db      	uxtb	r3, r3
 8003036:	001a      	movs	r2, r3
 8003038:	1dfb      	adds	r3, r7, #7
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d092      	beq.n	8002f66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	0018      	movs	r0, r3
 8003044:	46bd      	mov	sp, r7
 8003046:	b004      	add	sp, #16
 8003048:	bd80      	pop	{r7, pc}
 800304a:	46c0      	nop			; (mov r8, r8)
 800304c:	fffffe5f 	.word	0xfffffe5f

08003050 <__errno>:
 8003050:	4b01      	ldr	r3, [pc, #4]	; (8003058 <__errno+0x8>)
 8003052:	6818      	ldr	r0, [r3, #0]
 8003054:	4770      	bx	lr
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	20000034 	.word	0x20000034

0800305c <__libc_init_array>:
 800305c:	b570      	push	{r4, r5, r6, lr}
 800305e:	2600      	movs	r6, #0
 8003060:	4d0c      	ldr	r5, [pc, #48]	; (8003094 <__libc_init_array+0x38>)
 8003062:	4c0d      	ldr	r4, [pc, #52]	; (8003098 <__libc_init_array+0x3c>)
 8003064:	1b64      	subs	r4, r4, r5
 8003066:	10a4      	asrs	r4, r4, #2
 8003068:	42a6      	cmp	r6, r4
 800306a:	d109      	bne.n	8003080 <__libc_init_array+0x24>
 800306c:	2600      	movs	r6, #0
 800306e:	f000 fc29 	bl	80038c4 <_init>
 8003072:	4d0a      	ldr	r5, [pc, #40]	; (800309c <__libc_init_array+0x40>)
 8003074:	4c0a      	ldr	r4, [pc, #40]	; (80030a0 <__libc_init_array+0x44>)
 8003076:	1b64      	subs	r4, r4, r5
 8003078:	10a4      	asrs	r4, r4, #2
 800307a:	42a6      	cmp	r6, r4
 800307c:	d105      	bne.n	800308a <__libc_init_array+0x2e>
 800307e:	bd70      	pop	{r4, r5, r6, pc}
 8003080:	00b3      	lsls	r3, r6, #2
 8003082:	58eb      	ldr	r3, [r5, r3]
 8003084:	4798      	blx	r3
 8003086:	3601      	adds	r6, #1
 8003088:	e7ee      	b.n	8003068 <__libc_init_array+0xc>
 800308a:	00b3      	lsls	r3, r6, #2
 800308c:	58eb      	ldr	r3, [r5, r3]
 800308e:	4798      	blx	r3
 8003090:	3601      	adds	r6, #1
 8003092:	e7f2      	b.n	800307a <__libc_init_array+0x1e>
 8003094:	08003954 	.word	0x08003954
 8003098:	08003954 	.word	0x08003954
 800309c:	08003954 	.word	0x08003954
 80030a0:	08003958 	.word	0x08003958

080030a4 <memset>:
 80030a4:	0003      	movs	r3, r0
 80030a6:	1812      	adds	r2, r2, r0
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d100      	bne.n	80030ae <memset+0xa>
 80030ac:	4770      	bx	lr
 80030ae:	7019      	strb	r1, [r3, #0]
 80030b0:	3301      	adds	r3, #1
 80030b2:	e7f9      	b.n	80030a8 <memset+0x4>

080030b4 <siprintf>:
 80030b4:	b40e      	push	{r1, r2, r3}
 80030b6:	b500      	push	{lr}
 80030b8:	490b      	ldr	r1, [pc, #44]	; (80030e8 <siprintf+0x34>)
 80030ba:	b09c      	sub	sp, #112	; 0x70
 80030bc:	ab1d      	add	r3, sp, #116	; 0x74
 80030be:	9002      	str	r0, [sp, #8]
 80030c0:	9006      	str	r0, [sp, #24]
 80030c2:	9107      	str	r1, [sp, #28]
 80030c4:	9104      	str	r1, [sp, #16]
 80030c6:	4809      	ldr	r0, [pc, #36]	; (80030ec <siprintf+0x38>)
 80030c8:	4909      	ldr	r1, [pc, #36]	; (80030f0 <siprintf+0x3c>)
 80030ca:	cb04      	ldmia	r3!, {r2}
 80030cc:	9105      	str	r1, [sp, #20]
 80030ce:	6800      	ldr	r0, [r0, #0]
 80030d0:	a902      	add	r1, sp, #8
 80030d2:	9301      	str	r3, [sp, #4]
 80030d4:	f000 f870 	bl	80031b8 <_svfiprintf_r>
 80030d8:	2300      	movs	r3, #0
 80030da:	9a02      	ldr	r2, [sp, #8]
 80030dc:	7013      	strb	r3, [r2, #0]
 80030de:	b01c      	add	sp, #112	; 0x70
 80030e0:	bc08      	pop	{r3}
 80030e2:	b003      	add	sp, #12
 80030e4:	4718      	bx	r3
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	7fffffff 	.word	0x7fffffff
 80030ec:	20000034 	.word	0x20000034
 80030f0:	ffff0208 	.word	0xffff0208

080030f4 <__ssputs_r>:
 80030f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030f6:	688e      	ldr	r6, [r1, #8]
 80030f8:	b085      	sub	sp, #20
 80030fa:	0007      	movs	r7, r0
 80030fc:	000c      	movs	r4, r1
 80030fe:	9203      	str	r2, [sp, #12]
 8003100:	9301      	str	r3, [sp, #4]
 8003102:	429e      	cmp	r6, r3
 8003104:	d83c      	bhi.n	8003180 <__ssputs_r+0x8c>
 8003106:	2390      	movs	r3, #144	; 0x90
 8003108:	898a      	ldrh	r2, [r1, #12]
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	421a      	tst	r2, r3
 800310e:	d034      	beq.n	800317a <__ssputs_r+0x86>
 8003110:	2503      	movs	r5, #3
 8003112:	6909      	ldr	r1, [r1, #16]
 8003114:	6823      	ldr	r3, [r4, #0]
 8003116:	1a5b      	subs	r3, r3, r1
 8003118:	9302      	str	r3, [sp, #8]
 800311a:	6963      	ldr	r3, [r4, #20]
 800311c:	9802      	ldr	r0, [sp, #8]
 800311e:	435d      	muls	r5, r3
 8003120:	0feb      	lsrs	r3, r5, #31
 8003122:	195d      	adds	r5, r3, r5
 8003124:	9b01      	ldr	r3, [sp, #4]
 8003126:	106d      	asrs	r5, r5, #1
 8003128:	3301      	adds	r3, #1
 800312a:	181b      	adds	r3, r3, r0
 800312c:	42ab      	cmp	r3, r5
 800312e:	d900      	bls.n	8003132 <__ssputs_r+0x3e>
 8003130:	001d      	movs	r5, r3
 8003132:	0553      	lsls	r3, r2, #21
 8003134:	d532      	bpl.n	800319c <__ssputs_r+0xa8>
 8003136:	0029      	movs	r1, r5
 8003138:	0038      	movs	r0, r7
 800313a:	f000 fb23 	bl	8003784 <_malloc_r>
 800313e:	1e06      	subs	r6, r0, #0
 8003140:	d109      	bne.n	8003156 <__ssputs_r+0x62>
 8003142:	230c      	movs	r3, #12
 8003144:	603b      	str	r3, [r7, #0]
 8003146:	2340      	movs	r3, #64	; 0x40
 8003148:	2001      	movs	r0, #1
 800314a:	89a2      	ldrh	r2, [r4, #12]
 800314c:	4240      	negs	r0, r0
 800314e:	4313      	orrs	r3, r2
 8003150:	81a3      	strh	r3, [r4, #12]
 8003152:	b005      	add	sp, #20
 8003154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003156:	9a02      	ldr	r2, [sp, #8]
 8003158:	6921      	ldr	r1, [r4, #16]
 800315a:	f000 faac 	bl	80036b6 <memcpy>
 800315e:	89a3      	ldrh	r3, [r4, #12]
 8003160:	4a14      	ldr	r2, [pc, #80]	; (80031b4 <__ssputs_r+0xc0>)
 8003162:	401a      	ands	r2, r3
 8003164:	2380      	movs	r3, #128	; 0x80
 8003166:	4313      	orrs	r3, r2
 8003168:	81a3      	strh	r3, [r4, #12]
 800316a:	9b02      	ldr	r3, [sp, #8]
 800316c:	6126      	str	r6, [r4, #16]
 800316e:	18f6      	adds	r6, r6, r3
 8003170:	6026      	str	r6, [r4, #0]
 8003172:	6165      	str	r5, [r4, #20]
 8003174:	9e01      	ldr	r6, [sp, #4]
 8003176:	1aed      	subs	r5, r5, r3
 8003178:	60a5      	str	r5, [r4, #8]
 800317a:	9b01      	ldr	r3, [sp, #4]
 800317c:	429e      	cmp	r6, r3
 800317e:	d900      	bls.n	8003182 <__ssputs_r+0x8e>
 8003180:	9e01      	ldr	r6, [sp, #4]
 8003182:	0032      	movs	r2, r6
 8003184:	9903      	ldr	r1, [sp, #12]
 8003186:	6820      	ldr	r0, [r4, #0]
 8003188:	f000 fa9e 	bl	80036c8 <memmove>
 800318c:	68a3      	ldr	r3, [r4, #8]
 800318e:	2000      	movs	r0, #0
 8003190:	1b9b      	subs	r3, r3, r6
 8003192:	60a3      	str	r3, [r4, #8]
 8003194:	6823      	ldr	r3, [r4, #0]
 8003196:	199e      	adds	r6, r3, r6
 8003198:	6026      	str	r6, [r4, #0]
 800319a:	e7da      	b.n	8003152 <__ssputs_r+0x5e>
 800319c:	002a      	movs	r2, r5
 800319e:	0038      	movs	r0, r7
 80031a0:	f000 fb4e 	bl	8003840 <_realloc_r>
 80031a4:	1e06      	subs	r6, r0, #0
 80031a6:	d1e0      	bne.n	800316a <__ssputs_r+0x76>
 80031a8:	6921      	ldr	r1, [r4, #16]
 80031aa:	0038      	movs	r0, r7
 80031ac:	f000 faa0 	bl	80036f0 <_free_r>
 80031b0:	e7c7      	b.n	8003142 <__ssputs_r+0x4e>
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	fffffb7f 	.word	0xfffffb7f

080031b8 <_svfiprintf_r>:
 80031b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ba:	b0a1      	sub	sp, #132	; 0x84
 80031bc:	9003      	str	r0, [sp, #12]
 80031be:	001d      	movs	r5, r3
 80031c0:	898b      	ldrh	r3, [r1, #12]
 80031c2:	000f      	movs	r7, r1
 80031c4:	0016      	movs	r6, r2
 80031c6:	061b      	lsls	r3, r3, #24
 80031c8:	d511      	bpl.n	80031ee <_svfiprintf_r+0x36>
 80031ca:	690b      	ldr	r3, [r1, #16]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10e      	bne.n	80031ee <_svfiprintf_r+0x36>
 80031d0:	2140      	movs	r1, #64	; 0x40
 80031d2:	f000 fad7 	bl	8003784 <_malloc_r>
 80031d6:	6038      	str	r0, [r7, #0]
 80031d8:	6138      	str	r0, [r7, #16]
 80031da:	2800      	cmp	r0, #0
 80031dc:	d105      	bne.n	80031ea <_svfiprintf_r+0x32>
 80031de:	230c      	movs	r3, #12
 80031e0:	9a03      	ldr	r2, [sp, #12]
 80031e2:	3801      	subs	r0, #1
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	b021      	add	sp, #132	; 0x84
 80031e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031ea:	2340      	movs	r3, #64	; 0x40
 80031ec:	617b      	str	r3, [r7, #20]
 80031ee:	2300      	movs	r3, #0
 80031f0:	ac08      	add	r4, sp, #32
 80031f2:	6163      	str	r3, [r4, #20]
 80031f4:	3320      	adds	r3, #32
 80031f6:	7663      	strb	r3, [r4, #25]
 80031f8:	3310      	adds	r3, #16
 80031fa:	76a3      	strb	r3, [r4, #26]
 80031fc:	9507      	str	r5, [sp, #28]
 80031fe:	0035      	movs	r5, r6
 8003200:	782b      	ldrb	r3, [r5, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <_svfiprintf_r+0x52>
 8003206:	2b25      	cmp	r3, #37	; 0x25
 8003208:	d146      	bne.n	8003298 <_svfiprintf_r+0xe0>
 800320a:	1bab      	subs	r3, r5, r6
 800320c:	9305      	str	r3, [sp, #20]
 800320e:	d00c      	beq.n	800322a <_svfiprintf_r+0x72>
 8003210:	0032      	movs	r2, r6
 8003212:	0039      	movs	r1, r7
 8003214:	9803      	ldr	r0, [sp, #12]
 8003216:	f7ff ff6d 	bl	80030f4 <__ssputs_r>
 800321a:	1c43      	adds	r3, r0, #1
 800321c:	d100      	bne.n	8003220 <_svfiprintf_r+0x68>
 800321e:	e0ae      	b.n	800337e <_svfiprintf_r+0x1c6>
 8003220:	6962      	ldr	r2, [r4, #20]
 8003222:	9b05      	ldr	r3, [sp, #20]
 8003224:	4694      	mov	ip, r2
 8003226:	4463      	add	r3, ip
 8003228:	6163      	str	r3, [r4, #20]
 800322a:	782b      	ldrb	r3, [r5, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d100      	bne.n	8003232 <_svfiprintf_r+0x7a>
 8003230:	e0a5      	b.n	800337e <_svfiprintf_r+0x1c6>
 8003232:	2201      	movs	r2, #1
 8003234:	2300      	movs	r3, #0
 8003236:	4252      	negs	r2, r2
 8003238:	6062      	str	r2, [r4, #4]
 800323a:	a904      	add	r1, sp, #16
 800323c:	3254      	adds	r2, #84	; 0x54
 800323e:	1852      	adds	r2, r2, r1
 8003240:	1c6e      	adds	r6, r5, #1
 8003242:	6023      	str	r3, [r4, #0]
 8003244:	60e3      	str	r3, [r4, #12]
 8003246:	60a3      	str	r3, [r4, #8]
 8003248:	7013      	strb	r3, [r2, #0]
 800324a:	65a3      	str	r3, [r4, #88]	; 0x58
 800324c:	7831      	ldrb	r1, [r6, #0]
 800324e:	2205      	movs	r2, #5
 8003250:	4853      	ldr	r0, [pc, #332]	; (80033a0 <_svfiprintf_r+0x1e8>)
 8003252:	f000 fa25 	bl	80036a0 <memchr>
 8003256:	1c75      	adds	r5, r6, #1
 8003258:	2800      	cmp	r0, #0
 800325a:	d11f      	bne.n	800329c <_svfiprintf_r+0xe4>
 800325c:	6822      	ldr	r2, [r4, #0]
 800325e:	06d3      	lsls	r3, r2, #27
 8003260:	d504      	bpl.n	800326c <_svfiprintf_r+0xb4>
 8003262:	2353      	movs	r3, #83	; 0x53
 8003264:	a904      	add	r1, sp, #16
 8003266:	185b      	adds	r3, r3, r1
 8003268:	2120      	movs	r1, #32
 800326a:	7019      	strb	r1, [r3, #0]
 800326c:	0713      	lsls	r3, r2, #28
 800326e:	d504      	bpl.n	800327a <_svfiprintf_r+0xc2>
 8003270:	2353      	movs	r3, #83	; 0x53
 8003272:	a904      	add	r1, sp, #16
 8003274:	185b      	adds	r3, r3, r1
 8003276:	212b      	movs	r1, #43	; 0x2b
 8003278:	7019      	strb	r1, [r3, #0]
 800327a:	7833      	ldrb	r3, [r6, #0]
 800327c:	2b2a      	cmp	r3, #42	; 0x2a
 800327e:	d016      	beq.n	80032ae <_svfiprintf_r+0xf6>
 8003280:	0035      	movs	r5, r6
 8003282:	2100      	movs	r1, #0
 8003284:	200a      	movs	r0, #10
 8003286:	68e3      	ldr	r3, [r4, #12]
 8003288:	782a      	ldrb	r2, [r5, #0]
 800328a:	1c6e      	adds	r6, r5, #1
 800328c:	3a30      	subs	r2, #48	; 0x30
 800328e:	2a09      	cmp	r2, #9
 8003290:	d94e      	bls.n	8003330 <_svfiprintf_r+0x178>
 8003292:	2900      	cmp	r1, #0
 8003294:	d018      	beq.n	80032c8 <_svfiprintf_r+0x110>
 8003296:	e010      	b.n	80032ba <_svfiprintf_r+0x102>
 8003298:	3501      	adds	r5, #1
 800329a:	e7b1      	b.n	8003200 <_svfiprintf_r+0x48>
 800329c:	4b40      	ldr	r3, [pc, #256]	; (80033a0 <_svfiprintf_r+0x1e8>)
 800329e:	6822      	ldr	r2, [r4, #0]
 80032a0:	1ac0      	subs	r0, r0, r3
 80032a2:	2301      	movs	r3, #1
 80032a4:	4083      	lsls	r3, r0
 80032a6:	4313      	orrs	r3, r2
 80032a8:	6023      	str	r3, [r4, #0]
 80032aa:	002e      	movs	r6, r5
 80032ac:	e7ce      	b.n	800324c <_svfiprintf_r+0x94>
 80032ae:	9b07      	ldr	r3, [sp, #28]
 80032b0:	1d19      	adds	r1, r3, #4
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	9107      	str	r1, [sp, #28]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	db01      	blt.n	80032be <_svfiprintf_r+0x106>
 80032ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80032bc:	e004      	b.n	80032c8 <_svfiprintf_r+0x110>
 80032be:	425b      	negs	r3, r3
 80032c0:	60e3      	str	r3, [r4, #12]
 80032c2:	2302      	movs	r3, #2
 80032c4:	4313      	orrs	r3, r2
 80032c6:	6023      	str	r3, [r4, #0]
 80032c8:	782b      	ldrb	r3, [r5, #0]
 80032ca:	2b2e      	cmp	r3, #46	; 0x2e
 80032cc:	d10a      	bne.n	80032e4 <_svfiprintf_r+0x12c>
 80032ce:	786b      	ldrb	r3, [r5, #1]
 80032d0:	2b2a      	cmp	r3, #42	; 0x2a
 80032d2:	d135      	bne.n	8003340 <_svfiprintf_r+0x188>
 80032d4:	9b07      	ldr	r3, [sp, #28]
 80032d6:	3502      	adds	r5, #2
 80032d8:	1d1a      	adds	r2, r3, #4
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	9207      	str	r2, [sp, #28]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	db2b      	blt.n	800333a <_svfiprintf_r+0x182>
 80032e2:	9309      	str	r3, [sp, #36]	; 0x24
 80032e4:	4e2f      	ldr	r6, [pc, #188]	; (80033a4 <_svfiprintf_r+0x1ec>)
 80032e6:	7829      	ldrb	r1, [r5, #0]
 80032e8:	2203      	movs	r2, #3
 80032ea:	0030      	movs	r0, r6
 80032ec:	f000 f9d8 	bl	80036a0 <memchr>
 80032f0:	2800      	cmp	r0, #0
 80032f2:	d006      	beq.n	8003302 <_svfiprintf_r+0x14a>
 80032f4:	2340      	movs	r3, #64	; 0x40
 80032f6:	1b80      	subs	r0, r0, r6
 80032f8:	4083      	lsls	r3, r0
 80032fa:	6822      	ldr	r2, [r4, #0]
 80032fc:	3501      	adds	r5, #1
 80032fe:	4313      	orrs	r3, r2
 8003300:	6023      	str	r3, [r4, #0]
 8003302:	7829      	ldrb	r1, [r5, #0]
 8003304:	2206      	movs	r2, #6
 8003306:	4828      	ldr	r0, [pc, #160]	; (80033a8 <_svfiprintf_r+0x1f0>)
 8003308:	1c6e      	adds	r6, r5, #1
 800330a:	7621      	strb	r1, [r4, #24]
 800330c:	f000 f9c8 	bl	80036a0 <memchr>
 8003310:	2800      	cmp	r0, #0
 8003312:	d03c      	beq.n	800338e <_svfiprintf_r+0x1d6>
 8003314:	4b25      	ldr	r3, [pc, #148]	; (80033ac <_svfiprintf_r+0x1f4>)
 8003316:	2b00      	cmp	r3, #0
 8003318:	d125      	bne.n	8003366 <_svfiprintf_r+0x1ae>
 800331a:	2207      	movs	r2, #7
 800331c:	9b07      	ldr	r3, [sp, #28]
 800331e:	3307      	adds	r3, #7
 8003320:	4393      	bics	r3, r2
 8003322:	3308      	adds	r3, #8
 8003324:	9307      	str	r3, [sp, #28]
 8003326:	6963      	ldr	r3, [r4, #20]
 8003328:	9a04      	ldr	r2, [sp, #16]
 800332a:	189b      	adds	r3, r3, r2
 800332c:	6163      	str	r3, [r4, #20]
 800332e:	e766      	b.n	80031fe <_svfiprintf_r+0x46>
 8003330:	4343      	muls	r3, r0
 8003332:	2101      	movs	r1, #1
 8003334:	189b      	adds	r3, r3, r2
 8003336:	0035      	movs	r5, r6
 8003338:	e7a6      	b.n	8003288 <_svfiprintf_r+0xd0>
 800333a:	2301      	movs	r3, #1
 800333c:	425b      	negs	r3, r3
 800333e:	e7d0      	b.n	80032e2 <_svfiprintf_r+0x12a>
 8003340:	2300      	movs	r3, #0
 8003342:	200a      	movs	r0, #10
 8003344:	001a      	movs	r2, r3
 8003346:	3501      	adds	r5, #1
 8003348:	6063      	str	r3, [r4, #4]
 800334a:	7829      	ldrb	r1, [r5, #0]
 800334c:	1c6e      	adds	r6, r5, #1
 800334e:	3930      	subs	r1, #48	; 0x30
 8003350:	2909      	cmp	r1, #9
 8003352:	d903      	bls.n	800335c <_svfiprintf_r+0x1a4>
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0c5      	beq.n	80032e4 <_svfiprintf_r+0x12c>
 8003358:	9209      	str	r2, [sp, #36]	; 0x24
 800335a:	e7c3      	b.n	80032e4 <_svfiprintf_r+0x12c>
 800335c:	4342      	muls	r2, r0
 800335e:	2301      	movs	r3, #1
 8003360:	1852      	adds	r2, r2, r1
 8003362:	0035      	movs	r5, r6
 8003364:	e7f1      	b.n	800334a <_svfiprintf_r+0x192>
 8003366:	ab07      	add	r3, sp, #28
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	003a      	movs	r2, r7
 800336c:	4b10      	ldr	r3, [pc, #64]	; (80033b0 <_svfiprintf_r+0x1f8>)
 800336e:	0021      	movs	r1, r4
 8003370:	9803      	ldr	r0, [sp, #12]
 8003372:	e000      	b.n	8003376 <_svfiprintf_r+0x1be>
 8003374:	bf00      	nop
 8003376:	9004      	str	r0, [sp, #16]
 8003378:	9b04      	ldr	r3, [sp, #16]
 800337a:	3301      	adds	r3, #1
 800337c:	d1d3      	bne.n	8003326 <_svfiprintf_r+0x16e>
 800337e:	89bb      	ldrh	r3, [r7, #12]
 8003380:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003382:	065b      	lsls	r3, r3, #25
 8003384:	d400      	bmi.n	8003388 <_svfiprintf_r+0x1d0>
 8003386:	e72e      	b.n	80031e6 <_svfiprintf_r+0x2e>
 8003388:	2001      	movs	r0, #1
 800338a:	4240      	negs	r0, r0
 800338c:	e72b      	b.n	80031e6 <_svfiprintf_r+0x2e>
 800338e:	ab07      	add	r3, sp, #28
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	003a      	movs	r2, r7
 8003394:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <_svfiprintf_r+0x1f8>)
 8003396:	0021      	movs	r1, r4
 8003398:	9803      	ldr	r0, [sp, #12]
 800339a:	f000 f879 	bl	8003490 <_printf_i>
 800339e:	e7ea      	b.n	8003376 <_svfiprintf_r+0x1be>
 80033a0:	08003920 	.word	0x08003920
 80033a4:	08003926 	.word	0x08003926
 80033a8:	0800392a 	.word	0x0800392a
 80033ac:	00000000 	.word	0x00000000
 80033b0:	080030f5 	.word	0x080030f5

080033b4 <_printf_common>:
 80033b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033b6:	0015      	movs	r5, r2
 80033b8:	9301      	str	r3, [sp, #4]
 80033ba:	688a      	ldr	r2, [r1, #8]
 80033bc:	690b      	ldr	r3, [r1, #16]
 80033be:	9000      	str	r0, [sp, #0]
 80033c0:	000c      	movs	r4, r1
 80033c2:	4293      	cmp	r3, r2
 80033c4:	da00      	bge.n	80033c8 <_printf_common+0x14>
 80033c6:	0013      	movs	r3, r2
 80033c8:	0022      	movs	r2, r4
 80033ca:	602b      	str	r3, [r5, #0]
 80033cc:	3243      	adds	r2, #67	; 0x43
 80033ce:	7812      	ldrb	r2, [r2, #0]
 80033d0:	2a00      	cmp	r2, #0
 80033d2:	d001      	beq.n	80033d8 <_printf_common+0x24>
 80033d4:	3301      	adds	r3, #1
 80033d6:	602b      	str	r3, [r5, #0]
 80033d8:	6823      	ldr	r3, [r4, #0]
 80033da:	069b      	lsls	r3, r3, #26
 80033dc:	d502      	bpl.n	80033e4 <_printf_common+0x30>
 80033de:	682b      	ldr	r3, [r5, #0]
 80033e0:	3302      	adds	r3, #2
 80033e2:	602b      	str	r3, [r5, #0]
 80033e4:	2706      	movs	r7, #6
 80033e6:	6823      	ldr	r3, [r4, #0]
 80033e8:	401f      	ands	r7, r3
 80033ea:	d027      	beq.n	800343c <_printf_common+0x88>
 80033ec:	0023      	movs	r3, r4
 80033ee:	3343      	adds	r3, #67	; 0x43
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	1e5a      	subs	r2, r3, #1
 80033f4:	4193      	sbcs	r3, r2
 80033f6:	6822      	ldr	r2, [r4, #0]
 80033f8:	0692      	lsls	r2, r2, #26
 80033fa:	d430      	bmi.n	800345e <_printf_common+0xaa>
 80033fc:	0022      	movs	r2, r4
 80033fe:	9901      	ldr	r1, [sp, #4]
 8003400:	3243      	adds	r2, #67	; 0x43
 8003402:	9800      	ldr	r0, [sp, #0]
 8003404:	9e08      	ldr	r6, [sp, #32]
 8003406:	47b0      	blx	r6
 8003408:	1c43      	adds	r3, r0, #1
 800340a:	d025      	beq.n	8003458 <_printf_common+0xa4>
 800340c:	2306      	movs	r3, #6
 800340e:	6820      	ldr	r0, [r4, #0]
 8003410:	682a      	ldr	r2, [r5, #0]
 8003412:	68e1      	ldr	r1, [r4, #12]
 8003414:	4003      	ands	r3, r0
 8003416:	2500      	movs	r5, #0
 8003418:	2b04      	cmp	r3, #4
 800341a:	d103      	bne.n	8003424 <_printf_common+0x70>
 800341c:	1a8d      	subs	r5, r1, r2
 800341e:	43eb      	mvns	r3, r5
 8003420:	17db      	asrs	r3, r3, #31
 8003422:	401d      	ands	r5, r3
 8003424:	68a3      	ldr	r3, [r4, #8]
 8003426:	6922      	ldr	r2, [r4, #16]
 8003428:	4293      	cmp	r3, r2
 800342a:	dd01      	ble.n	8003430 <_printf_common+0x7c>
 800342c:	1a9b      	subs	r3, r3, r2
 800342e:	18ed      	adds	r5, r5, r3
 8003430:	2700      	movs	r7, #0
 8003432:	42bd      	cmp	r5, r7
 8003434:	d120      	bne.n	8003478 <_printf_common+0xc4>
 8003436:	2000      	movs	r0, #0
 8003438:	e010      	b.n	800345c <_printf_common+0xa8>
 800343a:	3701      	adds	r7, #1
 800343c:	68e3      	ldr	r3, [r4, #12]
 800343e:	682a      	ldr	r2, [r5, #0]
 8003440:	1a9b      	subs	r3, r3, r2
 8003442:	42bb      	cmp	r3, r7
 8003444:	ddd2      	ble.n	80033ec <_printf_common+0x38>
 8003446:	0022      	movs	r2, r4
 8003448:	2301      	movs	r3, #1
 800344a:	3219      	adds	r2, #25
 800344c:	9901      	ldr	r1, [sp, #4]
 800344e:	9800      	ldr	r0, [sp, #0]
 8003450:	9e08      	ldr	r6, [sp, #32]
 8003452:	47b0      	blx	r6
 8003454:	1c43      	adds	r3, r0, #1
 8003456:	d1f0      	bne.n	800343a <_printf_common+0x86>
 8003458:	2001      	movs	r0, #1
 800345a:	4240      	negs	r0, r0
 800345c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800345e:	2030      	movs	r0, #48	; 0x30
 8003460:	18e1      	adds	r1, r4, r3
 8003462:	3143      	adds	r1, #67	; 0x43
 8003464:	7008      	strb	r0, [r1, #0]
 8003466:	0021      	movs	r1, r4
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	3145      	adds	r1, #69	; 0x45
 800346c:	7809      	ldrb	r1, [r1, #0]
 800346e:	18a2      	adds	r2, r4, r2
 8003470:	3243      	adds	r2, #67	; 0x43
 8003472:	3302      	adds	r3, #2
 8003474:	7011      	strb	r1, [r2, #0]
 8003476:	e7c1      	b.n	80033fc <_printf_common+0x48>
 8003478:	0022      	movs	r2, r4
 800347a:	2301      	movs	r3, #1
 800347c:	321a      	adds	r2, #26
 800347e:	9901      	ldr	r1, [sp, #4]
 8003480:	9800      	ldr	r0, [sp, #0]
 8003482:	9e08      	ldr	r6, [sp, #32]
 8003484:	47b0      	blx	r6
 8003486:	1c43      	adds	r3, r0, #1
 8003488:	d0e6      	beq.n	8003458 <_printf_common+0xa4>
 800348a:	3701      	adds	r7, #1
 800348c:	e7d1      	b.n	8003432 <_printf_common+0x7e>
	...

08003490 <_printf_i>:
 8003490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003492:	b089      	sub	sp, #36	; 0x24
 8003494:	9204      	str	r2, [sp, #16]
 8003496:	000a      	movs	r2, r1
 8003498:	3243      	adds	r2, #67	; 0x43
 800349a:	9305      	str	r3, [sp, #20]
 800349c:	9003      	str	r0, [sp, #12]
 800349e:	9202      	str	r2, [sp, #8]
 80034a0:	7e0a      	ldrb	r2, [r1, #24]
 80034a2:	000c      	movs	r4, r1
 80034a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034a6:	2a6e      	cmp	r2, #110	; 0x6e
 80034a8:	d100      	bne.n	80034ac <_printf_i+0x1c>
 80034aa:	e086      	b.n	80035ba <_printf_i+0x12a>
 80034ac:	d81f      	bhi.n	80034ee <_printf_i+0x5e>
 80034ae:	2a63      	cmp	r2, #99	; 0x63
 80034b0:	d033      	beq.n	800351a <_printf_i+0x8a>
 80034b2:	d808      	bhi.n	80034c6 <_printf_i+0x36>
 80034b4:	2a00      	cmp	r2, #0
 80034b6:	d100      	bne.n	80034ba <_printf_i+0x2a>
 80034b8:	e08c      	b.n	80035d4 <_printf_i+0x144>
 80034ba:	2a58      	cmp	r2, #88	; 0x58
 80034bc:	d04d      	beq.n	800355a <_printf_i+0xca>
 80034be:	0025      	movs	r5, r4
 80034c0:	3542      	adds	r5, #66	; 0x42
 80034c2:	702a      	strb	r2, [r5, #0]
 80034c4:	e030      	b.n	8003528 <_printf_i+0x98>
 80034c6:	2a64      	cmp	r2, #100	; 0x64
 80034c8:	d001      	beq.n	80034ce <_printf_i+0x3e>
 80034ca:	2a69      	cmp	r2, #105	; 0x69
 80034cc:	d1f7      	bne.n	80034be <_printf_i+0x2e>
 80034ce:	6819      	ldr	r1, [r3, #0]
 80034d0:	6825      	ldr	r5, [r4, #0]
 80034d2:	1d0a      	adds	r2, r1, #4
 80034d4:	0628      	lsls	r0, r5, #24
 80034d6:	d529      	bpl.n	800352c <_printf_i+0x9c>
 80034d8:	6808      	ldr	r0, [r1, #0]
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	2800      	cmp	r0, #0
 80034de:	da03      	bge.n	80034e8 <_printf_i+0x58>
 80034e0:	232d      	movs	r3, #45	; 0x2d
 80034e2:	9a02      	ldr	r2, [sp, #8]
 80034e4:	4240      	negs	r0, r0
 80034e6:	7013      	strb	r3, [r2, #0]
 80034e8:	4e6b      	ldr	r6, [pc, #428]	; (8003698 <_printf_i+0x208>)
 80034ea:	270a      	movs	r7, #10
 80034ec:	e04f      	b.n	800358e <_printf_i+0xfe>
 80034ee:	2a73      	cmp	r2, #115	; 0x73
 80034f0:	d074      	beq.n	80035dc <_printf_i+0x14c>
 80034f2:	d808      	bhi.n	8003506 <_printf_i+0x76>
 80034f4:	2a6f      	cmp	r2, #111	; 0x6f
 80034f6:	d01f      	beq.n	8003538 <_printf_i+0xa8>
 80034f8:	2a70      	cmp	r2, #112	; 0x70
 80034fa:	d1e0      	bne.n	80034be <_printf_i+0x2e>
 80034fc:	2220      	movs	r2, #32
 80034fe:	6809      	ldr	r1, [r1, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	6022      	str	r2, [r4, #0]
 8003504:	e003      	b.n	800350e <_printf_i+0x7e>
 8003506:	2a75      	cmp	r2, #117	; 0x75
 8003508:	d016      	beq.n	8003538 <_printf_i+0xa8>
 800350a:	2a78      	cmp	r2, #120	; 0x78
 800350c:	d1d7      	bne.n	80034be <_printf_i+0x2e>
 800350e:	0022      	movs	r2, r4
 8003510:	2178      	movs	r1, #120	; 0x78
 8003512:	3245      	adds	r2, #69	; 0x45
 8003514:	7011      	strb	r1, [r2, #0]
 8003516:	4e61      	ldr	r6, [pc, #388]	; (800369c <_printf_i+0x20c>)
 8003518:	e022      	b.n	8003560 <_printf_i+0xd0>
 800351a:	0025      	movs	r5, r4
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	3542      	adds	r5, #66	; 0x42
 8003520:	1d11      	adds	r1, r2, #4
 8003522:	6019      	str	r1, [r3, #0]
 8003524:	6813      	ldr	r3, [r2, #0]
 8003526:	702b      	strb	r3, [r5, #0]
 8003528:	2301      	movs	r3, #1
 800352a:	e065      	b.n	80035f8 <_printf_i+0x168>
 800352c:	6808      	ldr	r0, [r1, #0]
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	0669      	lsls	r1, r5, #25
 8003532:	d5d3      	bpl.n	80034dc <_printf_i+0x4c>
 8003534:	b200      	sxth	r0, r0
 8003536:	e7d1      	b.n	80034dc <_printf_i+0x4c>
 8003538:	6819      	ldr	r1, [r3, #0]
 800353a:	6825      	ldr	r5, [r4, #0]
 800353c:	1d08      	adds	r0, r1, #4
 800353e:	6018      	str	r0, [r3, #0]
 8003540:	6808      	ldr	r0, [r1, #0]
 8003542:	062e      	lsls	r6, r5, #24
 8003544:	d505      	bpl.n	8003552 <_printf_i+0xc2>
 8003546:	4e54      	ldr	r6, [pc, #336]	; (8003698 <_printf_i+0x208>)
 8003548:	2708      	movs	r7, #8
 800354a:	2a6f      	cmp	r2, #111	; 0x6f
 800354c:	d01b      	beq.n	8003586 <_printf_i+0xf6>
 800354e:	270a      	movs	r7, #10
 8003550:	e019      	b.n	8003586 <_printf_i+0xf6>
 8003552:	066d      	lsls	r5, r5, #25
 8003554:	d5f7      	bpl.n	8003546 <_printf_i+0xb6>
 8003556:	b280      	uxth	r0, r0
 8003558:	e7f5      	b.n	8003546 <_printf_i+0xb6>
 800355a:	3145      	adds	r1, #69	; 0x45
 800355c:	4e4e      	ldr	r6, [pc, #312]	; (8003698 <_printf_i+0x208>)
 800355e:	700a      	strb	r2, [r1, #0]
 8003560:	6818      	ldr	r0, [r3, #0]
 8003562:	6822      	ldr	r2, [r4, #0]
 8003564:	1d01      	adds	r1, r0, #4
 8003566:	6800      	ldr	r0, [r0, #0]
 8003568:	6019      	str	r1, [r3, #0]
 800356a:	0615      	lsls	r5, r2, #24
 800356c:	d521      	bpl.n	80035b2 <_printf_i+0x122>
 800356e:	07d3      	lsls	r3, r2, #31
 8003570:	d502      	bpl.n	8003578 <_printf_i+0xe8>
 8003572:	2320      	movs	r3, #32
 8003574:	431a      	orrs	r2, r3
 8003576:	6022      	str	r2, [r4, #0]
 8003578:	2710      	movs	r7, #16
 800357a:	2800      	cmp	r0, #0
 800357c:	d103      	bne.n	8003586 <_printf_i+0xf6>
 800357e:	2320      	movs	r3, #32
 8003580:	6822      	ldr	r2, [r4, #0]
 8003582:	439a      	bics	r2, r3
 8003584:	6022      	str	r2, [r4, #0]
 8003586:	0023      	movs	r3, r4
 8003588:	2200      	movs	r2, #0
 800358a:	3343      	adds	r3, #67	; 0x43
 800358c:	701a      	strb	r2, [r3, #0]
 800358e:	6863      	ldr	r3, [r4, #4]
 8003590:	60a3      	str	r3, [r4, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	db58      	blt.n	8003648 <_printf_i+0x1b8>
 8003596:	2204      	movs	r2, #4
 8003598:	6821      	ldr	r1, [r4, #0]
 800359a:	4391      	bics	r1, r2
 800359c:	6021      	str	r1, [r4, #0]
 800359e:	2800      	cmp	r0, #0
 80035a0:	d154      	bne.n	800364c <_printf_i+0x1bc>
 80035a2:	9d02      	ldr	r5, [sp, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d05a      	beq.n	800365e <_printf_i+0x1ce>
 80035a8:	0025      	movs	r5, r4
 80035aa:	7833      	ldrb	r3, [r6, #0]
 80035ac:	3542      	adds	r5, #66	; 0x42
 80035ae:	702b      	strb	r3, [r5, #0]
 80035b0:	e055      	b.n	800365e <_printf_i+0x1ce>
 80035b2:	0655      	lsls	r5, r2, #25
 80035b4:	d5db      	bpl.n	800356e <_printf_i+0xde>
 80035b6:	b280      	uxth	r0, r0
 80035b8:	e7d9      	b.n	800356e <_printf_i+0xde>
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	680d      	ldr	r5, [r1, #0]
 80035be:	1d10      	adds	r0, r2, #4
 80035c0:	6949      	ldr	r1, [r1, #20]
 80035c2:	6018      	str	r0, [r3, #0]
 80035c4:	6813      	ldr	r3, [r2, #0]
 80035c6:	062e      	lsls	r6, r5, #24
 80035c8:	d501      	bpl.n	80035ce <_printf_i+0x13e>
 80035ca:	6019      	str	r1, [r3, #0]
 80035cc:	e002      	b.n	80035d4 <_printf_i+0x144>
 80035ce:	066d      	lsls	r5, r5, #25
 80035d0:	d5fb      	bpl.n	80035ca <_printf_i+0x13a>
 80035d2:	8019      	strh	r1, [r3, #0]
 80035d4:	2300      	movs	r3, #0
 80035d6:	9d02      	ldr	r5, [sp, #8]
 80035d8:	6123      	str	r3, [r4, #16]
 80035da:	e04f      	b.n	800367c <_printf_i+0x1ec>
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	1d11      	adds	r1, r2, #4
 80035e0:	6019      	str	r1, [r3, #0]
 80035e2:	6815      	ldr	r5, [r2, #0]
 80035e4:	2100      	movs	r1, #0
 80035e6:	6862      	ldr	r2, [r4, #4]
 80035e8:	0028      	movs	r0, r5
 80035ea:	f000 f859 	bl	80036a0 <memchr>
 80035ee:	2800      	cmp	r0, #0
 80035f0:	d001      	beq.n	80035f6 <_printf_i+0x166>
 80035f2:	1b40      	subs	r0, r0, r5
 80035f4:	6060      	str	r0, [r4, #4]
 80035f6:	6863      	ldr	r3, [r4, #4]
 80035f8:	6123      	str	r3, [r4, #16]
 80035fa:	2300      	movs	r3, #0
 80035fc:	9a02      	ldr	r2, [sp, #8]
 80035fe:	7013      	strb	r3, [r2, #0]
 8003600:	e03c      	b.n	800367c <_printf_i+0x1ec>
 8003602:	6923      	ldr	r3, [r4, #16]
 8003604:	002a      	movs	r2, r5
 8003606:	9904      	ldr	r1, [sp, #16]
 8003608:	9803      	ldr	r0, [sp, #12]
 800360a:	9d05      	ldr	r5, [sp, #20]
 800360c:	47a8      	blx	r5
 800360e:	1c43      	adds	r3, r0, #1
 8003610:	d03e      	beq.n	8003690 <_printf_i+0x200>
 8003612:	6823      	ldr	r3, [r4, #0]
 8003614:	079b      	lsls	r3, r3, #30
 8003616:	d415      	bmi.n	8003644 <_printf_i+0x1b4>
 8003618:	9b07      	ldr	r3, [sp, #28]
 800361a:	68e0      	ldr	r0, [r4, #12]
 800361c:	4298      	cmp	r0, r3
 800361e:	da39      	bge.n	8003694 <_printf_i+0x204>
 8003620:	0018      	movs	r0, r3
 8003622:	e037      	b.n	8003694 <_printf_i+0x204>
 8003624:	0022      	movs	r2, r4
 8003626:	2301      	movs	r3, #1
 8003628:	3219      	adds	r2, #25
 800362a:	9904      	ldr	r1, [sp, #16]
 800362c:	9803      	ldr	r0, [sp, #12]
 800362e:	9e05      	ldr	r6, [sp, #20]
 8003630:	47b0      	blx	r6
 8003632:	1c43      	adds	r3, r0, #1
 8003634:	d02c      	beq.n	8003690 <_printf_i+0x200>
 8003636:	3501      	adds	r5, #1
 8003638:	68e3      	ldr	r3, [r4, #12]
 800363a:	9a07      	ldr	r2, [sp, #28]
 800363c:	1a9b      	subs	r3, r3, r2
 800363e:	42ab      	cmp	r3, r5
 8003640:	dcf0      	bgt.n	8003624 <_printf_i+0x194>
 8003642:	e7e9      	b.n	8003618 <_printf_i+0x188>
 8003644:	2500      	movs	r5, #0
 8003646:	e7f7      	b.n	8003638 <_printf_i+0x1a8>
 8003648:	2800      	cmp	r0, #0
 800364a:	d0ad      	beq.n	80035a8 <_printf_i+0x118>
 800364c:	9d02      	ldr	r5, [sp, #8]
 800364e:	0039      	movs	r1, r7
 8003650:	f7fc fde0 	bl	8000214 <__aeabi_uidivmod>
 8003654:	5c73      	ldrb	r3, [r6, r1]
 8003656:	3d01      	subs	r5, #1
 8003658:	702b      	strb	r3, [r5, #0]
 800365a:	2800      	cmp	r0, #0
 800365c:	d1f7      	bne.n	800364e <_printf_i+0x1be>
 800365e:	2f08      	cmp	r7, #8
 8003660:	d109      	bne.n	8003676 <_printf_i+0x1e6>
 8003662:	6823      	ldr	r3, [r4, #0]
 8003664:	07db      	lsls	r3, r3, #31
 8003666:	d506      	bpl.n	8003676 <_printf_i+0x1e6>
 8003668:	6863      	ldr	r3, [r4, #4]
 800366a:	6922      	ldr	r2, [r4, #16]
 800366c:	4293      	cmp	r3, r2
 800366e:	dc02      	bgt.n	8003676 <_printf_i+0x1e6>
 8003670:	2330      	movs	r3, #48	; 0x30
 8003672:	3d01      	subs	r5, #1
 8003674:	702b      	strb	r3, [r5, #0]
 8003676:	9b02      	ldr	r3, [sp, #8]
 8003678:	1b5b      	subs	r3, r3, r5
 800367a:	6123      	str	r3, [r4, #16]
 800367c:	9b05      	ldr	r3, [sp, #20]
 800367e:	aa07      	add	r2, sp, #28
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	0021      	movs	r1, r4
 8003684:	9b04      	ldr	r3, [sp, #16]
 8003686:	9803      	ldr	r0, [sp, #12]
 8003688:	f7ff fe94 	bl	80033b4 <_printf_common>
 800368c:	1c43      	adds	r3, r0, #1
 800368e:	d1b8      	bne.n	8003602 <_printf_i+0x172>
 8003690:	2001      	movs	r0, #1
 8003692:	4240      	negs	r0, r0
 8003694:	b009      	add	sp, #36	; 0x24
 8003696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003698:	08003931 	.word	0x08003931
 800369c:	08003942 	.word	0x08003942

080036a0 <memchr>:
 80036a0:	b2c9      	uxtb	r1, r1
 80036a2:	1882      	adds	r2, r0, r2
 80036a4:	4290      	cmp	r0, r2
 80036a6:	d101      	bne.n	80036ac <memchr+0xc>
 80036a8:	2000      	movs	r0, #0
 80036aa:	4770      	bx	lr
 80036ac:	7803      	ldrb	r3, [r0, #0]
 80036ae:	428b      	cmp	r3, r1
 80036b0:	d0fb      	beq.n	80036aa <memchr+0xa>
 80036b2:	3001      	adds	r0, #1
 80036b4:	e7f6      	b.n	80036a4 <memchr+0x4>

080036b6 <memcpy>:
 80036b6:	2300      	movs	r3, #0
 80036b8:	b510      	push	{r4, lr}
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d100      	bne.n	80036c0 <memcpy+0xa>
 80036be:	bd10      	pop	{r4, pc}
 80036c0:	5ccc      	ldrb	r4, [r1, r3]
 80036c2:	54c4      	strb	r4, [r0, r3]
 80036c4:	3301      	adds	r3, #1
 80036c6:	e7f8      	b.n	80036ba <memcpy+0x4>

080036c8 <memmove>:
 80036c8:	b510      	push	{r4, lr}
 80036ca:	4288      	cmp	r0, r1
 80036cc:	d902      	bls.n	80036d4 <memmove+0xc>
 80036ce:	188b      	adds	r3, r1, r2
 80036d0:	4298      	cmp	r0, r3
 80036d2:	d303      	bcc.n	80036dc <memmove+0x14>
 80036d4:	2300      	movs	r3, #0
 80036d6:	e007      	b.n	80036e8 <memmove+0x20>
 80036d8:	5c8b      	ldrb	r3, [r1, r2]
 80036da:	5483      	strb	r3, [r0, r2]
 80036dc:	3a01      	subs	r2, #1
 80036de:	d2fb      	bcs.n	80036d8 <memmove+0x10>
 80036e0:	bd10      	pop	{r4, pc}
 80036e2:	5ccc      	ldrb	r4, [r1, r3]
 80036e4:	54c4      	strb	r4, [r0, r3]
 80036e6:	3301      	adds	r3, #1
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d1fa      	bne.n	80036e2 <memmove+0x1a>
 80036ec:	e7f8      	b.n	80036e0 <memmove+0x18>
	...

080036f0 <_free_r>:
 80036f0:	b570      	push	{r4, r5, r6, lr}
 80036f2:	0005      	movs	r5, r0
 80036f4:	2900      	cmp	r1, #0
 80036f6:	d010      	beq.n	800371a <_free_r+0x2a>
 80036f8:	1f0c      	subs	r4, r1, #4
 80036fa:	6823      	ldr	r3, [r4, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	da00      	bge.n	8003702 <_free_r+0x12>
 8003700:	18e4      	adds	r4, r4, r3
 8003702:	0028      	movs	r0, r5
 8003704:	f000 f8d4 	bl	80038b0 <__malloc_lock>
 8003708:	4a1d      	ldr	r2, [pc, #116]	; (8003780 <_free_r+0x90>)
 800370a:	6813      	ldr	r3, [r2, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d105      	bne.n	800371c <_free_r+0x2c>
 8003710:	6063      	str	r3, [r4, #4]
 8003712:	6014      	str	r4, [r2, #0]
 8003714:	0028      	movs	r0, r5
 8003716:	f000 f8cc 	bl	80038b2 <__malloc_unlock>
 800371a:	bd70      	pop	{r4, r5, r6, pc}
 800371c:	42a3      	cmp	r3, r4
 800371e:	d909      	bls.n	8003734 <_free_r+0x44>
 8003720:	6821      	ldr	r1, [r4, #0]
 8003722:	1860      	adds	r0, r4, r1
 8003724:	4283      	cmp	r3, r0
 8003726:	d1f3      	bne.n	8003710 <_free_r+0x20>
 8003728:	6818      	ldr	r0, [r3, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	1841      	adds	r1, r0, r1
 800372e:	6021      	str	r1, [r4, #0]
 8003730:	e7ee      	b.n	8003710 <_free_r+0x20>
 8003732:	0013      	movs	r3, r2
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	2a00      	cmp	r2, #0
 8003738:	d001      	beq.n	800373e <_free_r+0x4e>
 800373a:	42a2      	cmp	r2, r4
 800373c:	d9f9      	bls.n	8003732 <_free_r+0x42>
 800373e:	6819      	ldr	r1, [r3, #0]
 8003740:	1858      	adds	r0, r3, r1
 8003742:	42a0      	cmp	r0, r4
 8003744:	d10b      	bne.n	800375e <_free_r+0x6e>
 8003746:	6820      	ldr	r0, [r4, #0]
 8003748:	1809      	adds	r1, r1, r0
 800374a:	1858      	adds	r0, r3, r1
 800374c:	6019      	str	r1, [r3, #0]
 800374e:	4282      	cmp	r2, r0
 8003750:	d1e0      	bne.n	8003714 <_free_r+0x24>
 8003752:	6810      	ldr	r0, [r2, #0]
 8003754:	6852      	ldr	r2, [r2, #4]
 8003756:	1841      	adds	r1, r0, r1
 8003758:	6019      	str	r1, [r3, #0]
 800375a:	605a      	str	r2, [r3, #4]
 800375c:	e7da      	b.n	8003714 <_free_r+0x24>
 800375e:	42a0      	cmp	r0, r4
 8003760:	d902      	bls.n	8003768 <_free_r+0x78>
 8003762:	230c      	movs	r3, #12
 8003764:	602b      	str	r3, [r5, #0]
 8003766:	e7d5      	b.n	8003714 <_free_r+0x24>
 8003768:	6821      	ldr	r1, [r4, #0]
 800376a:	1860      	adds	r0, r4, r1
 800376c:	4282      	cmp	r2, r0
 800376e:	d103      	bne.n	8003778 <_free_r+0x88>
 8003770:	6810      	ldr	r0, [r2, #0]
 8003772:	6852      	ldr	r2, [r2, #4]
 8003774:	1841      	adds	r1, r0, r1
 8003776:	6021      	str	r1, [r4, #0]
 8003778:	6062      	str	r2, [r4, #4]
 800377a:	605c      	str	r4, [r3, #4]
 800377c:	e7ca      	b.n	8003714 <_free_r+0x24>
 800377e:	46c0      	nop			; (mov r8, r8)
 8003780:	200000b8 	.word	0x200000b8

08003784 <_malloc_r>:
 8003784:	2303      	movs	r3, #3
 8003786:	b570      	push	{r4, r5, r6, lr}
 8003788:	1ccd      	adds	r5, r1, #3
 800378a:	439d      	bics	r5, r3
 800378c:	3508      	adds	r5, #8
 800378e:	0006      	movs	r6, r0
 8003790:	2d0c      	cmp	r5, #12
 8003792:	d21e      	bcs.n	80037d2 <_malloc_r+0x4e>
 8003794:	250c      	movs	r5, #12
 8003796:	42a9      	cmp	r1, r5
 8003798:	d81d      	bhi.n	80037d6 <_malloc_r+0x52>
 800379a:	0030      	movs	r0, r6
 800379c:	f000 f888 	bl	80038b0 <__malloc_lock>
 80037a0:	4a25      	ldr	r2, [pc, #148]	; (8003838 <_malloc_r+0xb4>)
 80037a2:	6814      	ldr	r4, [r2, #0]
 80037a4:	0021      	movs	r1, r4
 80037a6:	2900      	cmp	r1, #0
 80037a8:	d119      	bne.n	80037de <_malloc_r+0x5a>
 80037aa:	4c24      	ldr	r4, [pc, #144]	; (800383c <_malloc_r+0xb8>)
 80037ac:	6823      	ldr	r3, [r4, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d103      	bne.n	80037ba <_malloc_r+0x36>
 80037b2:	0030      	movs	r0, r6
 80037b4:	f000 f86a 	bl	800388c <_sbrk_r>
 80037b8:	6020      	str	r0, [r4, #0]
 80037ba:	0029      	movs	r1, r5
 80037bc:	0030      	movs	r0, r6
 80037be:	f000 f865 	bl	800388c <_sbrk_r>
 80037c2:	1c43      	adds	r3, r0, #1
 80037c4:	d12b      	bne.n	800381e <_malloc_r+0x9a>
 80037c6:	230c      	movs	r3, #12
 80037c8:	0030      	movs	r0, r6
 80037ca:	6033      	str	r3, [r6, #0]
 80037cc:	f000 f871 	bl	80038b2 <__malloc_unlock>
 80037d0:	e003      	b.n	80037da <_malloc_r+0x56>
 80037d2:	2d00      	cmp	r5, #0
 80037d4:	dadf      	bge.n	8003796 <_malloc_r+0x12>
 80037d6:	230c      	movs	r3, #12
 80037d8:	6033      	str	r3, [r6, #0]
 80037da:	2000      	movs	r0, #0
 80037dc:	bd70      	pop	{r4, r5, r6, pc}
 80037de:	680b      	ldr	r3, [r1, #0]
 80037e0:	1b5b      	subs	r3, r3, r5
 80037e2:	d419      	bmi.n	8003818 <_malloc_r+0x94>
 80037e4:	2b0b      	cmp	r3, #11
 80037e6:	d903      	bls.n	80037f0 <_malloc_r+0x6c>
 80037e8:	600b      	str	r3, [r1, #0]
 80037ea:	18cc      	adds	r4, r1, r3
 80037ec:	6025      	str	r5, [r4, #0]
 80037ee:	e003      	b.n	80037f8 <_malloc_r+0x74>
 80037f0:	684b      	ldr	r3, [r1, #4]
 80037f2:	428c      	cmp	r4, r1
 80037f4:	d10d      	bne.n	8003812 <_malloc_r+0x8e>
 80037f6:	6013      	str	r3, [r2, #0]
 80037f8:	0030      	movs	r0, r6
 80037fa:	f000 f85a 	bl	80038b2 <__malloc_unlock>
 80037fe:	0020      	movs	r0, r4
 8003800:	2207      	movs	r2, #7
 8003802:	300b      	adds	r0, #11
 8003804:	1d23      	adds	r3, r4, #4
 8003806:	4390      	bics	r0, r2
 8003808:	1ac3      	subs	r3, r0, r3
 800380a:	d0e7      	beq.n	80037dc <_malloc_r+0x58>
 800380c:	425a      	negs	r2, r3
 800380e:	50e2      	str	r2, [r4, r3]
 8003810:	e7e4      	b.n	80037dc <_malloc_r+0x58>
 8003812:	6063      	str	r3, [r4, #4]
 8003814:	000c      	movs	r4, r1
 8003816:	e7ef      	b.n	80037f8 <_malloc_r+0x74>
 8003818:	000c      	movs	r4, r1
 800381a:	6849      	ldr	r1, [r1, #4]
 800381c:	e7c3      	b.n	80037a6 <_malloc_r+0x22>
 800381e:	2303      	movs	r3, #3
 8003820:	1cc4      	adds	r4, r0, #3
 8003822:	439c      	bics	r4, r3
 8003824:	42a0      	cmp	r0, r4
 8003826:	d0e1      	beq.n	80037ec <_malloc_r+0x68>
 8003828:	1a21      	subs	r1, r4, r0
 800382a:	0030      	movs	r0, r6
 800382c:	f000 f82e 	bl	800388c <_sbrk_r>
 8003830:	1c43      	adds	r3, r0, #1
 8003832:	d1db      	bne.n	80037ec <_malloc_r+0x68>
 8003834:	e7c7      	b.n	80037c6 <_malloc_r+0x42>
 8003836:	46c0      	nop			; (mov r8, r8)
 8003838:	200000b8 	.word	0x200000b8
 800383c:	200000bc 	.word	0x200000bc

08003840 <_realloc_r>:
 8003840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003842:	0007      	movs	r7, r0
 8003844:	000d      	movs	r5, r1
 8003846:	0016      	movs	r6, r2
 8003848:	2900      	cmp	r1, #0
 800384a:	d105      	bne.n	8003858 <_realloc_r+0x18>
 800384c:	0011      	movs	r1, r2
 800384e:	f7ff ff99 	bl	8003784 <_malloc_r>
 8003852:	0004      	movs	r4, r0
 8003854:	0020      	movs	r0, r4
 8003856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003858:	2a00      	cmp	r2, #0
 800385a:	d103      	bne.n	8003864 <_realloc_r+0x24>
 800385c:	f7ff ff48 	bl	80036f0 <_free_r>
 8003860:	0034      	movs	r4, r6
 8003862:	e7f7      	b.n	8003854 <_realloc_r+0x14>
 8003864:	f000 f826 	bl	80038b4 <_malloc_usable_size_r>
 8003868:	002c      	movs	r4, r5
 800386a:	42b0      	cmp	r0, r6
 800386c:	d2f2      	bcs.n	8003854 <_realloc_r+0x14>
 800386e:	0031      	movs	r1, r6
 8003870:	0038      	movs	r0, r7
 8003872:	f7ff ff87 	bl	8003784 <_malloc_r>
 8003876:	1e04      	subs	r4, r0, #0
 8003878:	d0ec      	beq.n	8003854 <_realloc_r+0x14>
 800387a:	0029      	movs	r1, r5
 800387c:	0032      	movs	r2, r6
 800387e:	f7ff ff1a 	bl	80036b6 <memcpy>
 8003882:	0029      	movs	r1, r5
 8003884:	0038      	movs	r0, r7
 8003886:	f7ff ff33 	bl	80036f0 <_free_r>
 800388a:	e7e3      	b.n	8003854 <_realloc_r+0x14>

0800388c <_sbrk_r>:
 800388c:	2300      	movs	r3, #0
 800388e:	b570      	push	{r4, r5, r6, lr}
 8003890:	4c06      	ldr	r4, [pc, #24]	; (80038ac <_sbrk_r+0x20>)
 8003892:	0005      	movs	r5, r0
 8003894:	0008      	movs	r0, r1
 8003896:	6023      	str	r3, [r4, #0]
 8003898:	f7fd f836 	bl	8000908 <_sbrk>
 800389c:	1c43      	adds	r3, r0, #1
 800389e:	d103      	bne.n	80038a8 <_sbrk_r+0x1c>
 80038a0:	6823      	ldr	r3, [r4, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d000      	beq.n	80038a8 <_sbrk_r+0x1c>
 80038a6:	602b      	str	r3, [r5, #0]
 80038a8:	bd70      	pop	{r4, r5, r6, pc}
 80038aa:	46c0      	nop			; (mov r8, r8)
 80038ac:	20000258 	.word	0x20000258

080038b0 <__malloc_lock>:
 80038b0:	4770      	bx	lr

080038b2 <__malloc_unlock>:
 80038b2:	4770      	bx	lr

080038b4 <_malloc_usable_size_r>:
 80038b4:	1f0b      	subs	r3, r1, #4
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	1f18      	subs	r0, r3, #4
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	da01      	bge.n	80038c2 <_malloc_usable_size_r+0xe>
 80038be:	580b      	ldr	r3, [r1, r0]
 80038c0:	18c0      	adds	r0, r0, r3
 80038c2:	4770      	bx	lr

080038c4 <_init>:
 80038c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038c6:	46c0      	nop			; (mov r8, r8)
 80038c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ca:	bc08      	pop	{r3}
 80038cc:	469e      	mov	lr, r3
 80038ce:	4770      	bx	lr

080038d0 <_fini>:
 80038d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038d6:	bc08      	pop	{r3}
 80038d8:	469e      	mov	lr, r3
 80038da:	4770      	bx	lr
