
F042G4_Interrupt_CANRX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037d8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003898  08003898  00013898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003910  08003910  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08003910  08003910  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003910  08003910  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003910  08003910  00013910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003914  08003914  00013914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08003918  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000098  080039b0  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  080039b0  00020228  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f2f  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001688  00000000  00000000  00027fef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000768  00000000  00000000  00029678  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006a0  00000000  00000000  00029de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014524  00000000  00000000  0002a480  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000067ef  00000000  00000000  0003e9a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00071676  00000000  00000000  00045193  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b6809  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bf8  00000000  00000000  000b6884  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000098 	.word	0x20000098
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003880 	.word	0x08003880

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000009c 	.word	0x2000009c
 8000104:	08003880 	.word	0x08003880

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fbcb 	bl	80009c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f85f 	bl	80002ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f951 	bl	80004d4 <MX_GPIO_Init>
  MX_CAN_Init();
 8000232:	f000 f8af 	bl	8000394 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000236:	f000 f91d 	bl	8000474 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800023a:	4b26      	ldr	r3, [pc, #152]	; (80002d4 <main+0xb4>)
 800023c:	2102      	movs	r1, #2
 800023e:	0018      	movs	r0, r3
 8000240:	f001 f875 	bl	800132e <HAL_CAN_ActivateNotification>
  canfil.FilterBank = 0;
 8000244:	4b24      	ldr	r3, [pc, #144]	; (80002d8 <main+0xb8>)
 8000246:	2200      	movs	r2, #0
 8000248:	615a      	str	r2, [r3, #20]
  canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 800024a:	4b23      	ldr	r3, [pc, #140]	; (80002d8 <main+0xb8>)
 800024c:	2200      	movs	r2, #0
 800024e:	619a      	str	r2, [r3, #24]
  canfil.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000250:	4b21      	ldr	r3, [pc, #132]	; (80002d8 <main+0xb8>)
 8000252:	2200      	movs	r2, #0
 8000254:	611a      	str	r2, [r3, #16]
  canfil.FilterIdHigh = 0;
 8000256:	4b20      	ldr	r3, [pc, #128]	; (80002d8 <main+0xb8>)
 8000258:	2200      	movs	r2, #0
 800025a:	601a      	str	r2, [r3, #0]
  canfil.FilterIdLow = 0;
 800025c:	4b1e      	ldr	r3, [pc, #120]	; (80002d8 <main+0xb8>)
 800025e:	2200      	movs	r2, #0
 8000260:	605a      	str	r2, [r3, #4]
  canfil.FilterMaskIdHigh = 0;
 8000262:	4b1d      	ldr	r3, [pc, #116]	; (80002d8 <main+0xb8>)
 8000264:	2200      	movs	r2, #0
 8000266:	609a      	str	r2, [r3, #8]
  canfil.FilterMaskIdLow = 0;
 8000268:	4b1b      	ldr	r3, [pc, #108]	; (80002d8 <main+0xb8>)
 800026a:	2200      	movs	r2, #0
 800026c:	60da      	str	r2, [r3, #12]
  canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 800026e:	4b1a      	ldr	r3, [pc, #104]	; (80002d8 <main+0xb8>)
 8000270:	2201      	movs	r2, #1
 8000272:	61da      	str	r2, [r3, #28]
  canfil.FilterActivation = ENABLE;
 8000274:	4b18      	ldr	r3, [pc, #96]	; (80002d8 <main+0xb8>)
 8000276:	2201      	movs	r2, #1
 8000278:	621a      	str	r2, [r3, #32]
  canfil.SlaveStartFilterBank = 14;
 800027a:	4b17      	ldr	r3, [pc, #92]	; (80002d8 <main+0xb8>)
 800027c:	220e      	movs	r2, #14
 800027e:	625a      	str	r2, [r3, #36]	; 0x24

  txHeader.DLC = 8;
 8000280:	4b16      	ldr	r3, [pc, #88]	; (80002dc <main+0xbc>)
 8000282:	2208      	movs	r2, #8
 8000284:	611a      	str	r2, [r3, #16]
  txHeader.IDE = CAN_ID_STD;
 8000286:	4b15      	ldr	r3, [pc, #84]	; (80002dc <main+0xbc>)
 8000288:	2200      	movs	r2, #0
 800028a:	609a      	str	r2, [r3, #8]
  txHeader.RTR = CAN_RTR_DATA;
 800028c:	4b13      	ldr	r3, [pc, #76]	; (80002dc <main+0xbc>)
 800028e:	2200      	movs	r2, #0
 8000290:	60da      	str	r2, [r3, #12]
  txHeader.StdId = 0xCC4216;
 8000292:	4b12      	ldr	r3, [pc, #72]	; (80002dc <main+0xbc>)
 8000294:	4a12      	ldr	r2, [pc, #72]	; (80002e0 <main+0xc0>)
 8000296:	601a      	str	r2, [r3, #0]
  txHeader.ExtId = 0x02;
 8000298:	4b10      	ldr	r3, [pc, #64]	; (80002dc <main+0xbc>)
 800029a:	2202      	movs	r2, #2
 800029c:	605a      	str	r2, [r3, #4]
  txHeader.TransmitGlobalTime = DISABLE;
 800029e:	4b0f      	ldr	r3, [pc, #60]	; (80002dc <main+0xbc>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	751a      	strb	r2, [r3, #20]
  HAL_CAN_ConfigFilter(&hcan,&canfil);
 80002a4:	4a0c      	ldr	r2, [pc, #48]	; (80002d8 <main+0xb8>)
 80002a6:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <main+0xb4>)
 80002a8:	0011      	movs	r1, r2
 80002aa:	0018      	movs	r0, r3
 80002ac:	f000 fd0c 	bl	8000cc8 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan);
 80002b0:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <main+0xb4>)
 80002b2:	0018      	movs	r0, r3
 80002b4:	f000 fdfa 	bl	8000eac <HAL_CAN_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
     uint8_t csend[] = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08};
 80002b8:	003b      	movs	r3, r7
 80002ba:	4a0a      	ldr	r2, [pc, #40]	; (80002e4 <main+0xc4>)
 80002bc:	ca03      	ldmia	r2!, {r0, r1}
 80002be:	c303      	stmia	r3!, {r0, r1}
   HAL_CAN_AddTxMessage(&hcan,&txHeader,csend,&canMailbox);
 80002c0:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <main+0xc8>)
 80002c2:	003a      	movs	r2, r7
 80002c4:	4905      	ldr	r1, [pc, #20]	; (80002dc <main+0xbc>)
 80002c6:	4803      	ldr	r0, [pc, #12]	; (80002d4 <main+0xb4>)
 80002c8:	f000 fe36 	bl	8000f38 <HAL_CAN_AddTxMessage>
   HAL_Delay(10);
 80002cc:	200a      	movs	r0, #10
 80002ce:	f000 fbdb 	bl	8000a88 <HAL_Delay>
  {
 80002d2:	e7f1      	b.n	80002b8 <main+0x98>
 80002d4:	200000f8 	.word	0x200000f8
 80002d8:	20000124 	.word	0x20000124
 80002dc:	200000c0 	.word	0x200000c0
 80002e0:	00cc4216 	.word	0x00cc4216
 80002e4:	08003898 	.word	0x08003898
 80002e8:	200001cc 	.word	0x200001cc

080002ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ec:	b590      	push	{r4, r7, lr}
 80002ee:	b099      	sub	sp, #100	; 0x64
 80002f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f2:	242c      	movs	r4, #44	; 0x2c
 80002f4:	193b      	adds	r3, r7, r4
 80002f6:	0018      	movs	r0, r3
 80002f8:	2334      	movs	r3, #52	; 0x34
 80002fa:	001a      	movs	r2, r3
 80002fc:	2100      	movs	r1, #0
 80002fe:	f002 feaf 	bl	8003060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000302:	231c      	movs	r3, #28
 8000304:	18fb      	adds	r3, r7, r3
 8000306:	0018      	movs	r0, r3
 8000308:	2310      	movs	r3, #16
 800030a:	001a      	movs	r2, r3
 800030c:	2100      	movs	r1, #0
 800030e:	f002 fea7 	bl	8003060 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	0018      	movs	r0, r3
 8000316:	2318      	movs	r3, #24
 8000318:	001a      	movs	r2, r3
 800031a:	2100      	movs	r1, #0
 800031c:	f002 fea0 	bl	8003060 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000320:	193b      	adds	r3, r7, r4
 8000322:	2220      	movs	r2, #32
 8000324:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000326:	193b      	adds	r3, r7, r4
 8000328:	2201      	movs	r2, #1
 800032a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800032c:	193b      	adds	r3, r7, r4
 800032e:	2200      	movs	r2, #0
 8000330:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000332:	193b      	adds	r3, r7, r4
 8000334:	0018      	movs	r0, r3
 8000336:	f001 fc83 	bl	8001c40 <HAL_RCC_OscConfig>
 800033a:	1e03      	subs	r3, r0, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x56>
  {
    Error_Handler();
 800033e:	f000 f8fd 	bl	800053c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000342:	211c      	movs	r1, #28
 8000344:	187b      	adds	r3, r7, r1
 8000346:	2207      	movs	r2, #7
 8000348:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800034a:	187b      	adds	r3, r7, r1
 800034c:	2203      	movs	r2, #3
 800034e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000350:	187b      	adds	r3, r7, r1
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000356:	187b      	adds	r3, r7, r1
 8000358:	2200      	movs	r2, #0
 800035a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800035c:	187b      	adds	r3, r7, r1
 800035e:	2101      	movs	r1, #1
 8000360:	0018      	movs	r0, r3
 8000362:	f001 fff3 	bl	800234c <HAL_RCC_ClockConfig>
 8000366:	1e03      	subs	r3, r0, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800036a:	f000 f8e7 	bl	800053c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	2201      	movs	r2, #1
 8000372:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2200      	movs	r2, #0
 8000378:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	0018      	movs	r0, r3
 800037e:	f002 f95d 	bl	800263c <HAL_RCCEx_PeriphCLKConfig>
 8000382:	1e03      	subs	r3, r0, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000386:	f000 f8d9 	bl	800053c <Error_Handler>
  }
}
 800038a:	46c0      	nop			; (mov r8, r8)
 800038c:	46bd      	mov	sp, r7
 800038e:	b019      	add	sp, #100	; 0x64
 8000390:	bd90      	pop	{r4, r7, pc}
	...

08000394 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b08a      	sub	sp, #40	; 0x28
 8000398:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800039a:	4b34      	ldr	r3, [pc, #208]	; (800046c <MX_CAN_Init+0xd8>)
 800039c:	4a34      	ldr	r2, [pc, #208]	; (8000470 <MX_CAN_Init+0xdc>)
 800039e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 12;
 80003a0:	4b32      	ldr	r3, [pc, #200]	; (800046c <MX_CAN_Init+0xd8>)
 80003a2:	220c      	movs	r2, #12
 80003a4:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80003a6:	4b31      	ldr	r3, [pc, #196]	; (800046c <MX_CAN_Init+0xd8>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003ac:	4b2f      	ldr	r3, [pc, #188]	; (800046c <MX_CAN_Init+0xd8>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80003b2:	4b2e      	ldr	r3, [pc, #184]	; (800046c <MX_CAN_Init+0xd8>)
 80003b4:	22c0      	movs	r2, #192	; 0xc0
 80003b6:	0312      	lsls	r2, r2, #12
 80003b8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80003ba:	4b2c      	ldr	r3, [pc, #176]	; (800046c <MX_CAN_Init+0xd8>)
 80003bc:	2280      	movs	r2, #128	; 0x80
 80003be:	0352      	lsls	r2, r2, #13
 80003c0:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80003c2:	4b2a      	ldr	r3, [pc, #168]	; (800046c <MX_CAN_Init+0xd8>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80003c8:	4b28      	ldr	r3, [pc, #160]	; (800046c <MX_CAN_Init+0xd8>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003ce:	4b27      	ldr	r3, [pc, #156]	; (800046c <MX_CAN_Init+0xd8>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80003d4:	4b25      	ldr	r3, [pc, #148]	; (800046c <MX_CAN_Init+0xd8>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003da:	4b24      	ldr	r3, [pc, #144]	; (800046c <MX_CAN_Init+0xd8>)
 80003dc:	2200      	movs	r2, #0
 80003de:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003e0:	4b22      	ldr	r3, [pc, #136]	; (800046c <MX_CAN_Init+0xd8>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003e6:	4b21      	ldr	r3, [pc, #132]	; (800046c <MX_CAN_Init+0xd8>)
 80003e8:	0018      	movs	r0, r3
 80003ea:	f000 fb6f 	bl	8000acc <HAL_CAN_Init>
 80003ee:	1e03      	subs	r3, r0, #0
 80003f0:	d001      	beq.n	80003f6 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80003f2:	f000 f8a3 	bl	800053c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef sFilterConfig = {0};
 80003f6:	003b      	movs	r3, r7
 80003f8:	0018      	movs	r0, r3
 80003fa:	2328      	movs	r3, #40	; 0x28
 80003fc:	001a      	movs	r2, r3
 80003fe:	2100      	movs	r1, #0
 8000400:	f002 fe2e 	bl	8003060 <memset>
  sFilterConfig.FilterBank = 0;
 8000404:	003b      	movs	r3, r7
 8000406:	2200      	movs	r2, #0
 8000408:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800040a:	003b      	movs	r3, r7
 800040c:	2200      	movs	r2, #0
 800040e:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000410:	003b      	movs	r3, r7
 8000412:	2201      	movs	r2, #1
 8000414:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000416:	003b      	movs	r3, r7
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 800041c:	003b      	movs	r3, r7
 800041e:	2200      	movs	r2, #0
 8000420:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000422:	003b      	movs	r3, r7
 8000424:	2200      	movs	r2, #0
 8000426:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000428:	003b      	movs	r3, r7
 800042a:	2200      	movs	r2, #0
 800042c:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800042e:	003b      	movs	r3, r7
 8000430:	2200      	movs	r2, #0
 8000432:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000434:	003b      	movs	r3, r7
 8000436:	2201      	movs	r2, #1
 8000438:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 800043a:	003b      	movs	r3, r7
 800043c:	220e      	movs	r2, #14
 800043e:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK){
 8000440:	003a      	movs	r2, r7
 8000442:	4b0a      	ldr	r3, [pc, #40]	; (800046c <MX_CAN_Init+0xd8>)
 8000444:	0011      	movs	r1, r2
 8000446:	0018      	movs	r0, r3
 8000448:	f000 fc3e 	bl	8000cc8 <HAL_CAN_ConfigFilter>
 800044c:	1e03      	subs	r3, r0, #0
 800044e:	d001      	beq.n	8000454 <MX_CAN_Init+0xc0>
    Error_Handler();
 8000450:	f000 f874 	bl	800053c <Error_Handler>
  }

  if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8000454:	4b05      	ldr	r3, [pc, #20]	; (800046c <MX_CAN_Init+0xd8>)
 8000456:	0018      	movs	r0, r3
 8000458:	f000 fd28 	bl	8000eac <HAL_CAN_Start>
 800045c:	1e03      	subs	r3, r0, #0
 800045e:	d001      	beq.n	8000464 <MX_CAN_Init+0xd0>
    Error_Handler();
 8000460:	f000 f86c 	bl	800053c <Error_Handler>
  }
  /* USER CODE END CAN_Init 2 */

}
 8000464:	46c0      	nop			; (mov r8, r8)
 8000466:	46bd      	mov	sp, r7
 8000468:	b00a      	add	sp, #40	; 0x28
 800046a:	bd80      	pop	{r7, pc}
 800046c:	200000f8 	.word	0x200000f8
 8000470:	40006400 	.word	0x40006400

08000474 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000478:	4b14      	ldr	r3, [pc, #80]	; (80004cc <MX_USART1_UART_Init+0x58>)
 800047a:	4a15      	ldr	r2, [pc, #84]	; (80004d0 <MX_USART1_UART_Init+0x5c>)
 800047c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800047e:	4b13      	ldr	r3, [pc, #76]	; (80004cc <MX_USART1_UART_Init+0x58>)
 8000480:	2296      	movs	r2, #150	; 0x96
 8000482:	0192      	lsls	r2, r2, #6
 8000484:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000486:	4b11      	ldr	r3, [pc, #68]	; (80004cc <MX_USART1_UART_Init+0x58>)
 8000488:	2200      	movs	r2, #0
 800048a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800048c:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <MX_USART1_UART_Init+0x58>)
 800048e:	2200      	movs	r2, #0
 8000490:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000492:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <MX_USART1_UART_Init+0x58>)
 8000494:	2200      	movs	r2, #0
 8000496:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000498:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <MX_USART1_UART_Init+0x58>)
 800049a:	220c      	movs	r2, #12
 800049c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800049e:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <MX_USART1_UART_Init+0x58>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004a4:	4b09      	ldr	r3, [pc, #36]	; (80004cc <MX_USART1_UART_Init+0x58>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004aa:	4b08      	ldr	r3, [pc, #32]	; (80004cc <MX_USART1_UART_Init+0x58>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <MX_USART1_UART_Init+0x58>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004b6:	4b05      	ldr	r3, [pc, #20]	; (80004cc <MX_USART1_UART_Init+0x58>)
 80004b8:	0018      	movs	r0, r3
 80004ba:	f002 f9ad 	bl	8002818 <HAL_UART_Init>
 80004be:	1e03      	subs	r3, r0, #0
 80004c0:	d001      	beq.n	80004c6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80004c2:	f000 f83b 	bl	800053c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	2000014c 	.word	0x2000014c
 80004d0:	40013800 	.word	0x40013800

080004d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004da:	4b17      	ldr	r3, [pc, #92]	; (8000538 <MX_GPIO_Init+0x64>)
 80004dc:	695a      	ldr	r2, [r3, #20]
 80004de:	4b16      	ldr	r3, [pc, #88]	; (8000538 <MX_GPIO_Init+0x64>)
 80004e0:	2180      	movs	r1, #128	; 0x80
 80004e2:	03c9      	lsls	r1, r1, #15
 80004e4:	430a      	orrs	r2, r1
 80004e6:	615a      	str	r2, [r3, #20]
 80004e8:	4b13      	ldr	r3, [pc, #76]	; (8000538 <MX_GPIO_Init+0x64>)
 80004ea:	695a      	ldr	r2, [r3, #20]
 80004ec:	2380      	movs	r3, #128	; 0x80
 80004ee:	03db      	lsls	r3, r3, #15
 80004f0:	4013      	ands	r3, r2
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f6:	4b10      	ldr	r3, [pc, #64]	; (8000538 <MX_GPIO_Init+0x64>)
 80004f8:	695a      	ldr	r2, [r3, #20]
 80004fa:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <MX_GPIO_Init+0x64>)
 80004fc:	2180      	movs	r1, #128	; 0x80
 80004fe:	0289      	lsls	r1, r1, #10
 8000500:	430a      	orrs	r2, r1
 8000502:	615a      	str	r2, [r3, #20]
 8000504:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <MX_GPIO_Init+0x64>)
 8000506:	695a      	ldr	r2, [r3, #20]
 8000508:	2380      	movs	r3, #128	; 0x80
 800050a:	029b      	lsls	r3, r3, #10
 800050c:	4013      	ands	r3, r2
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <MX_GPIO_Init+0x64>)
 8000514:	695a      	ldr	r2, [r3, #20]
 8000516:	4b08      	ldr	r3, [pc, #32]	; (8000538 <MX_GPIO_Init+0x64>)
 8000518:	2180      	movs	r1, #128	; 0x80
 800051a:	02c9      	lsls	r1, r1, #11
 800051c:	430a      	orrs	r2, r1
 800051e:	615a      	str	r2, [r3, #20]
 8000520:	4b05      	ldr	r3, [pc, #20]	; (8000538 <MX_GPIO_Init+0x64>)
 8000522:	695a      	ldr	r2, [r3, #20]
 8000524:	2380      	movs	r3, #128	; 0x80
 8000526:	02db      	lsls	r3, r3, #11
 8000528:	4013      	ands	r3, r2
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]

}
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	46bd      	mov	sp, r7
 8000532:	b004      	add	sp, #16
 8000534:	bd80      	pop	{r7, pc}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	40021000 	.word	0x40021000

0800053c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000540:	46c0      	nop			; (mov r8, r8)
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
	...

08000548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800054e:	4b12      	ldr	r3, [pc, #72]	; (8000598 <HAL_MspInit+0x50>)
 8000550:	699a      	ldr	r2, [r3, #24]
 8000552:	4b11      	ldr	r3, [pc, #68]	; (8000598 <HAL_MspInit+0x50>)
 8000554:	2101      	movs	r1, #1
 8000556:	430a      	orrs	r2, r1
 8000558:	619a      	str	r2, [r3, #24]
 800055a:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <HAL_MspInit+0x50>)
 800055c:	699b      	ldr	r3, [r3, #24]
 800055e:	2201      	movs	r2, #1
 8000560:	4013      	ands	r3, r2
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000566:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <HAL_MspInit+0x50>)
 8000568:	69da      	ldr	r2, [r3, #28]
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <HAL_MspInit+0x50>)
 800056c:	2180      	movs	r1, #128	; 0x80
 800056e:	0549      	lsls	r1, r1, #21
 8000570:	430a      	orrs	r2, r1
 8000572:	61da      	str	r2, [r3, #28]
 8000574:	4b08      	ldr	r3, [pc, #32]	; (8000598 <HAL_MspInit+0x50>)
 8000576:	69da      	ldr	r2, [r3, #28]
 8000578:	2380      	movs	r3, #128	; 0x80
 800057a:	055b      	lsls	r3, r3, #21
 800057c:	4013      	ands	r3, r2
 800057e:	603b      	str	r3, [r7, #0]
 8000580:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <HAL_MspInit+0x54>)
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	4b05      	ldr	r3, [pc, #20]	; (800059c <HAL_MspInit+0x54>)
 8000588:	2110      	movs	r1, #16
 800058a:	430a      	orrs	r2, r1
 800058c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	46bd      	mov	sp, r7
 8000592:	b002      	add	sp, #8
 8000594:	bd80      	pop	{r7, pc}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	40021000 	.word	0x40021000
 800059c:	40010000 	.word	0x40010000

080005a0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	; 0x28
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a8:	2314      	movs	r3, #20
 80005aa:	18fb      	adds	r3, r7, r3
 80005ac:	0018      	movs	r0, r3
 80005ae:	2314      	movs	r3, #20
 80005b0:	001a      	movs	r2, r3
 80005b2:	2100      	movs	r1, #0
 80005b4:	f002 fd54 	bl	8003060 <memset>
  if(hcan->Instance==CAN)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a21      	ldr	r2, [pc, #132]	; (8000644 <HAL_CAN_MspInit+0xa4>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d13b      	bne.n	800063a <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005c2:	4b21      	ldr	r3, [pc, #132]	; (8000648 <HAL_CAN_MspInit+0xa8>)
 80005c4:	69da      	ldr	r2, [r3, #28]
 80005c6:	4b20      	ldr	r3, [pc, #128]	; (8000648 <HAL_CAN_MspInit+0xa8>)
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	0489      	lsls	r1, r1, #18
 80005cc:	430a      	orrs	r2, r1
 80005ce:	61da      	str	r2, [r3, #28]
 80005d0:	4b1d      	ldr	r3, [pc, #116]	; (8000648 <HAL_CAN_MspInit+0xa8>)
 80005d2:	69da      	ldr	r2, [r3, #28]
 80005d4:	2380      	movs	r3, #128	; 0x80
 80005d6:	049b      	lsls	r3, r3, #18
 80005d8:	4013      	ands	r3, r2
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	4b1a      	ldr	r3, [pc, #104]	; (8000648 <HAL_CAN_MspInit+0xa8>)
 80005e0:	695a      	ldr	r2, [r3, #20]
 80005e2:	4b19      	ldr	r3, [pc, #100]	; (8000648 <HAL_CAN_MspInit+0xa8>)
 80005e4:	2180      	movs	r1, #128	; 0x80
 80005e6:	0289      	lsls	r1, r1, #10
 80005e8:	430a      	orrs	r2, r1
 80005ea:	615a      	str	r2, [r3, #20]
 80005ec:	4b16      	ldr	r3, [pc, #88]	; (8000648 <HAL_CAN_MspInit+0xa8>)
 80005ee:	695a      	ldr	r2, [r3, #20]
 80005f0:	2380      	movs	r3, #128	; 0x80
 80005f2:	029b      	lsls	r3, r3, #10
 80005f4:	4013      	ands	r3, r2
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80005fa:	2114      	movs	r1, #20
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	22c0      	movs	r2, #192	; 0xc0
 8000600:	0152      	lsls	r2, r2, #5
 8000602:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2202      	movs	r2, #2
 8000608:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	187b      	adds	r3, r7, r1
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000610:	187b      	adds	r3, r7, r1
 8000612:	2203      	movs	r2, #3
 8000614:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2204      	movs	r2, #4
 800061a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061c:	187a      	adds	r2, r7, r1
 800061e:	2390      	movs	r3, #144	; 0x90
 8000620:	05db      	lsls	r3, r3, #23
 8000622:	0011      	movs	r1, r2
 8000624:	0018      	movs	r0, r3
 8000626:	f001 f9a3 	bl	8001970 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 800062a:	2200      	movs	r2, #0
 800062c:	2100      	movs	r1, #0
 800062e:	201e      	movs	r0, #30
 8000630:	f001 f96c 	bl	800190c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8000634:	201e      	movs	r0, #30
 8000636:	f001 f97e 	bl	8001936 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	46bd      	mov	sp, r7
 800063e:	b00a      	add	sp, #40	; 0x28
 8000640:	bd80      	pop	{r7, pc}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	40006400 	.word	0x40006400
 8000648:	40021000 	.word	0x40021000

0800064c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	; 0x28
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	2314      	movs	r3, #20
 8000656:	18fb      	adds	r3, r7, r3
 8000658:	0018      	movs	r0, r3
 800065a:	2314      	movs	r3, #20
 800065c:	001a      	movs	r2, r3
 800065e:	2100      	movs	r1, #0
 8000660:	f002 fcfe 	bl	8003060 <memset>
  if(huart->Instance==USART1)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a1c      	ldr	r2, [pc, #112]	; (80006dc <HAL_UART_MspInit+0x90>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d131      	bne.n	80006d2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800066e:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <HAL_UART_MspInit+0x94>)
 8000670:	699a      	ldr	r2, [r3, #24]
 8000672:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <HAL_UART_MspInit+0x94>)
 8000674:	2180      	movs	r1, #128	; 0x80
 8000676:	01c9      	lsls	r1, r1, #7
 8000678:	430a      	orrs	r2, r1
 800067a:	619a      	str	r2, [r3, #24]
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <HAL_UART_MspInit+0x94>)
 800067e:	699a      	ldr	r2, [r3, #24]
 8000680:	2380      	movs	r3, #128	; 0x80
 8000682:	01db      	lsls	r3, r3, #7
 8000684:	4013      	ands	r3, r2
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <HAL_UART_MspInit+0x94>)
 800068c:	695a      	ldr	r2, [r3, #20]
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <HAL_UART_MspInit+0x94>)
 8000690:	2180      	movs	r1, #128	; 0x80
 8000692:	02c9      	lsls	r1, r1, #11
 8000694:	430a      	orrs	r2, r1
 8000696:	615a      	str	r2, [r3, #20]
 8000698:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <HAL_UART_MspInit+0x94>)
 800069a:	695a      	ldr	r2, [r3, #20]
 800069c:	2380      	movs	r3, #128	; 0x80
 800069e:	02db      	lsls	r3, r3, #11
 80006a0:	4013      	ands	r3, r2
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006a6:	2114      	movs	r1, #20
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	22c0      	movs	r2, #192	; 0xc0
 80006ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2202      	movs	r2, #2
 80006b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2203      	movs	r2, #3
 80006be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	4a06      	ldr	r2, [pc, #24]	; (80006e4 <HAL_UART_MspInit+0x98>)
 80006ca:	0019      	movs	r1, r3
 80006cc:	0010      	movs	r0, r2
 80006ce:	f001 f94f 	bl	8001970 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	b00a      	add	sp, #40	; 0x28
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	40013800 	.word	0x40013800
 80006e0:	40021000 	.word	0x40021000
 80006e4:	48000400 	.word	0x48000400

080006e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006ec:	46c0      	nop			; (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006f6:	e7fe      	b.n	80006f6 <HardFault_Handler+0x4>

080006f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006fc:	46c0      	nop			; (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000702:	b580      	push	{r7, lr}
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000710:	f000 f99e 	bl	8000a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
	...

0800071c <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 800071c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800071e:	b097      	sub	sp, #92	; 0x5c
 8000720:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CEC_CAN_IRQn 0 */

	/* USER CODE END CEC_CAN_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan);
 8000722:	4b62      	ldr	r3, [pc, #392]	; (80008ac <CEC_CAN_IRQHandler+0x190>)
 8000724:	0018      	movs	r0, r3
 8000726:	f000 fe2c 	bl	8001382 <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN CEC_CAN_IRQn 1 */
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];
	uint8_t ID[8]={NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};
 800072a:	232c      	movs	r3, #44	; 0x2c
 800072c:	18fb      	adds	r3, r7, r3
 800072e:	0018      	movs	r0, r3
 8000730:	2308      	movs	r3, #8
 8000732:	001a      	movs	r2, r3
 8000734:	2100      	movs	r1, #0
 8000736:	f002 fc93 	bl	8003060 <memset>
	char B4[2];
	char B5[2];
	char B6[2];
	char B7[2];

	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);  // get the currently waiting frame
 800073a:	2434      	movs	r4, #52	; 0x34
 800073c:	193b      	adds	r3, r7, r4
 800073e:	253c      	movs	r5, #60	; 0x3c
 8000740:	197a      	adds	r2, r7, r5
 8000742:	485a      	ldr	r0, [pc, #360]	; (80008ac <CEC_CAN_IRQHandler+0x190>)
 8000744:	2100      	movs	r1, #0
 8000746:	f000 fcd6 	bl	80010f6 <HAL_CAN_GetRxMessage>

	//	  		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_7);
	char buffer1 [8];
	sprintf(buffer1,"%0x",RxHeader.ExtId);
 800074a:	197b      	adds	r3, r7, r5
 800074c:	685a      	ldr	r2, [r3, #4]
 800074e:	4958      	ldr	r1, [pc, #352]	; (80008b0 <CEC_CAN_IRQHandler+0x194>)
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	0018      	movs	r0, r3
 8000754:	f002 fc8c 	bl	8003070 <siprintf>

	sprintf(B0,"%0x",RxData[0]);
 8000758:	193b      	adds	r3, r7, r4
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	001a      	movs	r2, r3
 800075e:	4954      	ldr	r1, [pc, #336]	; (80008b0 <CEC_CAN_IRQHandler+0x194>)
 8000760:	2628      	movs	r6, #40	; 0x28
 8000762:	19bb      	adds	r3, r7, r6
 8000764:	0018      	movs	r0, r3
 8000766:	f002 fc83 	bl	8003070 <siprintf>
	sprintf(B1,"%0x",RxData[1]);
 800076a:	193b      	adds	r3, r7, r4
 800076c:	785b      	ldrb	r3, [r3, #1]
 800076e:	001a      	movs	r2, r3
 8000770:	494f      	ldr	r1, [pc, #316]	; (80008b0 <CEC_CAN_IRQHandler+0x194>)
 8000772:	2324      	movs	r3, #36	; 0x24
 8000774:	18fb      	adds	r3, r7, r3
 8000776:	0018      	movs	r0, r3
 8000778:	f002 fc7a 	bl	8003070 <siprintf>
	sprintf(B2,"%0x",RxData[2]);
 800077c:	193b      	adds	r3, r7, r4
 800077e:	789b      	ldrb	r3, [r3, #2]
 8000780:	001a      	movs	r2, r3
 8000782:	494b      	ldr	r1, [pc, #300]	; (80008b0 <CEC_CAN_IRQHandler+0x194>)
 8000784:	2020      	movs	r0, #32
 8000786:	183b      	adds	r3, r7, r0
 8000788:	0018      	movs	r0, r3
 800078a:	f002 fc71 	bl	8003070 <siprintf>
	sprintf(B3,"%0x",RxData[3]);
 800078e:	193b      	adds	r3, r7, r4
 8000790:	78db      	ldrb	r3, [r3, #3]
 8000792:	001a      	movs	r2, r3
 8000794:	4946      	ldr	r1, [pc, #280]	; (80008b0 <CEC_CAN_IRQHandler+0x194>)
 8000796:	251c      	movs	r5, #28
 8000798:	197b      	adds	r3, r7, r5
 800079a:	0018      	movs	r0, r3
 800079c:	f002 fc68 	bl	8003070 <siprintf>
	sprintf(B4,"%0x",RxData[4]);
 80007a0:	193b      	adds	r3, r7, r4
 80007a2:	791b      	ldrb	r3, [r3, #4]
 80007a4:	001a      	movs	r2, r3
 80007a6:	4942      	ldr	r1, [pc, #264]	; (80008b0 <CEC_CAN_IRQHandler+0x194>)
 80007a8:	2318      	movs	r3, #24
 80007aa:	18fb      	adds	r3, r7, r3
 80007ac:	0018      	movs	r0, r3
 80007ae:	f002 fc5f 	bl	8003070 <siprintf>
	sprintf(B5,"%0x",RxData[5]);
 80007b2:	193b      	adds	r3, r7, r4
 80007b4:	795b      	ldrb	r3, [r3, #5]
 80007b6:	001a      	movs	r2, r3
 80007b8:	493d      	ldr	r1, [pc, #244]	; (80008b0 <CEC_CAN_IRQHandler+0x194>)
 80007ba:	2414      	movs	r4, #20
 80007bc:	193b      	adds	r3, r7, r4
 80007be:	0018      	movs	r0, r3
 80007c0:	f002 fc56 	bl	8003070 <siprintf>



	HAL_UART_Transmit(&huart1, (uint8_t *)buffer1, sizeof(buffer1), 20);
 80007c4:	1d39      	adds	r1, r7, #4
 80007c6:	483b      	ldr	r0, [pc, #236]	; (80008b4 <CEC_CAN_IRQHandler+0x198>)
 80007c8:	2314      	movs	r3, #20
 80007ca:	2208      	movs	r2, #8
 80007cc:	f002 f878 	bl	80028c0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, space, sizeof(space), 20);
 80007d0:	4939      	ldr	r1, [pc, #228]	; (80008b8 <CEC_CAN_IRQHandler+0x19c>)
 80007d2:	4838      	ldr	r0, [pc, #224]	; (80008b4 <CEC_CAN_IRQHandler+0x198>)
 80007d4:	2314      	movs	r3, #20
 80007d6:	2202      	movs	r2, #2
 80007d8:	f002 f872 	bl	80028c0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *)B0, sizeof(B0), 20);
 80007dc:	19b9      	adds	r1, r7, r6
 80007de:	4835      	ldr	r0, [pc, #212]	; (80008b4 <CEC_CAN_IRQHandler+0x198>)
 80007e0:	2314      	movs	r3, #20
 80007e2:	2202      	movs	r2, #2
 80007e4:	f002 f86c 	bl	80028c0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, space, sizeof(space), 20);
 80007e8:	4933      	ldr	r1, [pc, #204]	; (80008b8 <CEC_CAN_IRQHandler+0x19c>)
 80007ea:	4832      	ldr	r0, [pc, #200]	; (80008b4 <CEC_CAN_IRQHandler+0x198>)
 80007ec:	2314      	movs	r3, #20
 80007ee:	2202      	movs	r2, #2
 80007f0:	f002 f866 	bl	80028c0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *)B1, sizeof(B0), 20);
 80007f4:	2324      	movs	r3, #36	; 0x24
 80007f6:	18f9      	adds	r1, r7, r3
 80007f8:	482e      	ldr	r0, [pc, #184]	; (80008b4 <CEC_CAN_IRQHandler+0x198>)
 80007fa:	2314      	movs	r3, #20
 80007fc:	2202      	movs	r2, #2
 80007fe:	f002 f85f 	bl	80028c0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, space, sizeof(space), 20);
 8000802:	492d      	ldr	r1, [pc, #180]	; (80008b8 <CEC_CAN_IRQHandler+0x19c>)
 8000804:	482b      	ldr	r0, [pc, #172]	; (80008b4 <CEC_CAN_IRQHandler+0x198>)
 8000806:	2314      	movs	r3, #20
 8000808:	2202      	movs	r2, #2
 800080a:	f002 f859 	bl	80028c0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *)B2, sizeof(B0), 20);
 800080e:	2020      	movs	r0, #32
 8000810:	1839      	adds	r1, r7, r0
 8000812:	4828      	ldr	r0, [pc, #160]	; (80008b4 <CEC_CAN_IRQHandler+0x198>)
 8000814:	2314      	movs	r3, #20
 8000816:	2202      	movs	r2, #2
 8000818:	f002 f852 	bl	80028c0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, space, sizeof(space), 20);
 800081c:	4926      	ldr	r1, [pc, #152]	; (80008b8 <CEC_CAN_IRQHandler+0x19c>)
 800081e:	4825      	ldr	r0, [pc, #148]	; (80008b4 <CEC_CAN_IRQHandler+0x198>)
 8000820:	2314      	movs	r3, #20
 8000822:	2202      	movs	r2, #2
 8000824:	f002 f84c 	bl	80028c0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *)B3, sizeof(B0), 20);
 8000828:	1979      	adds	r1, r7, r5
 800082a:	4822      	ldr	r0, [pc, #136]	; (80008b4 <CEC_CAN_IRQHandler+0x198>)
 800082c:	2314      	movs	r3, #20
 800082e:	2202      	movs	r2, #2
 8000830:	f002 f846 	bl	80028c0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, space, sizeof(space), 20);
 8000834:	4920      	ldr	r1, [pc, #128]	; (80008b8 <CEC_CAN_IRQHandler+0x19c>)
 8000836:	481f      	ldr	r0, [pc, #124]	; (80008b4 <CEC_CAN_IRQHandler+0x198>)
 8000838:	2314      	movs	r3, #20
 800083a:	2202      	movs	r2, #2
 800083c:	f002 f840 	bl	80028c0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *)B3, sizeof(B0), 20);
 8000840:	1979      	adds	r1, r7, r5
 8000842:	481c      	ldr	r0, [pc, #112]	; (80008b4 <CEC_CAN_IRQHandler+0x198>)
 8000844:	2314      	movs	r3, #20
 8000846:	2202      	movs	r2, #2
 8000848:	f002 f83a 	bl	80028c0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, space, sizeof(space), 20);
 800084c:	491a      	ldr	r1, [pc, #104]	; (80008b8 <CEC_CAN_IRQHandler+0x19c>)
 800084e:	4819      	ldr	r0, [pc, #100]	; (80008b4 <CEC_CAN_IRQHandler+0x198>)
 8000850:	2314      	movs	r3, #20
 8000852:	2202      	movs	r2, #2
 8000854:	f002 f834 	bl	80028c0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *)B4, sizeof(B0), 20);
 8000858:	2318      	movs	r3, #24
 800085a:	18f9      	adds	r1, r7, r3
 800085c:	4815      	ldr	r0, [pc, #84]	; (80008b4 <CEC_CAN_IRQHandler+0x198>)
 800085e:	2314      	movs	r3, #20
 8000860:	2202      	movs	r2, #2
 8000862:	f002 f82d 	bl	80028c0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, space, sizeof(space), 20);
 8000866:	4914      	ldr	r1, [pc, #80]	; (80008b8 <CEC_CAN_IRQHandler+0x19c>)
 8000868:	4812      	ldr	r0, [pc, #72]	; (80008b4 <CEC_CAN_IRQHandler+0x198>)
 800086a:	2314      	movs	r3, #20
 800086c:	2202      	movs	r2, #2
 800086e:	f002 f827 	bl	80028c0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *)B5, sizeof(B0), 20);
 8000872:	1939      	adds	r1, r7, r4
 8000874:	480f      	ldr	r0, [pc, #60]	; (80008b4 <CEC_CAN_IRQHandler+0x198>)
 8000876:	2314      	movs	r3, #20
 8000878:	2202      	movs	r2, #2
 800087a:	f002 f821 	bl	80028c0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, space, sizeof(space), 20);
 800087e:	490e      	ldr	r1, [pc, #56]	; (80008b8 <CEC_CAN_IRQHandler+0x19c>)
 8000880:	480c      	ldr	r0, [pc, #48]	; (80008b4 <CEC_CAN_IRQHandler+0x198>)
 8000882:	2314      	movs	r3, #20
 8000884:	2202      	movs	r2, #2
 8000886:	f002 f81b 	bl	80028c0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, newline, sizeof(newline), 20);
 800088a:	490c      	ldr	r1, [pc, #48]	; (80008bc <CEC_CAN_IRQHandler+0x1a0>)
 800088c:	4809      	ldr	r0, [pc, #36]	; (80008b4 <CEC_CAN_IRQHandler+0x198>)
 800088e:	2314      	movs	r3, #20
 8000890:	2202      	movs	r2, #2
 8000892:	f002 f815 	bl	80028c0 <HAL_UART_Transmit>
	//  GPIOD->ODR=r<<12; //use output data register to turn on LEDs
	HAL_UART_Transmit(&huart1, txdata1, sizeof(txdata1), 100);
 8000896:	490a      	ldr	r1, [pc, #40]	; (80008c0 <CEC_CAN_IRQHandler+0x1a4>)
 8000898:	4806      	ldr	r0, [pc, #24]	; (80008b4 <CEC_CAN_IRQHandler+0x198>)
 800089a:	2364      	movs	r3, #100	; 0x64
 800089c:	221e      	movs	r2, #30
 800089e:	f002 f80f 	bl	80028c0 <HAL_UART_Transmit>
	/* USER CODE END CEC_CAN_IRQn 1 */
}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	46bd      	mov	sp, r7
 80008a6:	b017      	add	sp, #92	; 0x5c
 80008a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	200000f8 	.word	0x200000f8
 80008b0:	080038a0 	.word	0x080038a0
 80008b4:	2000014c 	.word	0x2000014c
 80008b8:	20000004 	.word	0x20000004
 80008bc:	20000000 	.word	0x20000000
 80008c0:	20000008 	.word	0x20000008

080008c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008cc:	4a14      	ldr	r2, [pc, #80]	; (8000920 <_sbrk+0x5c>)
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <_sbrk+0x60>)
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008d8:	4b13      	ldr	r3, [pc, #76]	; (8000928 <_sbrk+0x64>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d102      	bne.n	80008e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <_sbrk+0x64>)
 80008e2:	4a12      	ldr	r2, [pc, #72]	; (800092c <_sbrk+0x68>)
 80008e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <_sbrk+0x64>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	18d3      	adds	r3, r2, r3
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d207      	bcs.n	8000904 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008f4:	f002 fb8a 	bl	800300c <__errno>
 80008f8:	0003      	movs	r3, r0
 80008fa:	220c      	movs	r2, #12
 80008fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008fe:	2301      	movs	r3, #1
 8000900:	425b      	negs	r3, r3
 8000902:	e009      	b.n	8000918 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <_sbrk+0x64>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800090a:	4b07      	ldr	r3, [pc, #28]	; (8000928 <_sbrk+0x64>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	18d2      	adds	r2, r2, r3
 8000912:	4b05      	ldr	r3, [pc, #20]	; (8000928 <_sbrk+0x64>)
 8000914:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000916:	68fb      	ldr	r3, [r7, #12]
}
 8000918:	0018      	movs	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	b006      	add	sp, #24
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20001800 	.word	0x20001800
 8000924:	00000400 	.word	0x00000400
 8000928:	200000b4 	.word	0x200000b4
 800092c:	20000228 	.word	0x20000228

08000930 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800093c:	4813      	ldr	r0, [pc, #76]	; (800098c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800093e:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000940:	4813      	ldr	r0, [pc, #76]	; (8000990 <LoopForever+0x6>)
    LDR R1, [R0]
 8000942:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000944:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000946:	4a13      	ldr	r2, [pc, #76]	; (8000994 <LoopForever+0xa>)
    CMP R1, R2
 8000948:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800094a:	d105      	bne.n	8000958 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 800094c:	4812      	ldr	r0, [pc, #72]	; (8000998 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800094e:	4913      	ldr	r1, [pc, #76]	; (800099c <LoopForever+0x12>)
    STR R1, [R0]
 8000950:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000952:	4813      	ldr	r0, [pc, #76]	; (80009a0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000954:	4913      	ldr	r1, [pc, #76]	; (80009a4 <LoopForever+0x1a>)
    STR R1, [R0]
 8000956:	6001      	str	r1, [r0, #0]

08000958 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000958:	4813      	ldr	r0, [pc, #76]	; (80009a8 <LoopForever+0x1e>)
  ldr r1, =_edata
 800095a:	4914      	ldr	r1, [pc, #80]	; (80009ac <LoopForever+0x22>)
  ldr r2, =_sidata
 800095c:	4a14      	ldr	r2, [pc, #80]	; (80009b0 <LoopForever+0x26>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000960:	e002      	b.n	8000968 <LoopCopyDataInit>

08000962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000966:	3304      	adds	r3, #4

08000968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800096c:	d3f9      	bcc.n	8000962 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096e:	4a11      	ldr	r2, [pc, #68]	; (80009b4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000970:	4c11      	ldr	r4, [pc, #68]	; (80009b8 <LoopForever+0x2e>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000974:	e001      	b.n	800097a <LoopFillZerobss>

08000976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000978:	3204      	adds	r2, #4

0800097a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800097c:	d3fb      	bcc.n	8000976 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800097e:	f7ff ffd7 	bl	8000930 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000982:	f002 fb49 	bl	8003018 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000986:	f7ff fc4b 	bl	8000220 <main>

0800098a <LoopForever>:

LoopForever:
    b LoopForever
 800098a:	e7fe      	b.n	800098a <LoopForever>
  ldr   r0, =_estack
 800098c:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000990:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000994:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000998:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 800099c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80009a0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80009a4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80009a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009ac:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80009b0:	08003918 	.word	0x08003918
  ldr r2, =_sbss
 80009b4:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80009b8:	20000228 	.word	0x20000228

080009bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009bc:	e7fe      	b.n	80009bc <ADC1_IRQHandler>
	...

080009c0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c4:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <HAL_Init+0x24>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_Init+0x24>)
 80009ca:	2110      	movs	r1, #16
 80009cc:	430a      	orrs	r2, r1
 80009ce:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80009d0:	2000      	movs	r0, #0
 80009d2:	f000 f809 	bl	80009e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d6:	f7ff fdb7 	bl	8000548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009da:	2300      	movs	r3, #0
}
 80009dc:	0018      	movs	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	40022000 	.word	0x40022000

080009e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <HAL_InitTick+0x5c>)
 80009f2:	681c      	ldr	r4, [r3, #0]
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <HAL_InitTick+0x60>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	0019      	movs	r1, r3
 80009fa:	23fa      	movs	r3, #250	; 0xfa
 80009fc:	0098      	lsls	r0, r3, #2
 80009fe:	f7ff fb83 	bl	8000108 <__udivsi3>
 8000a02:	0003      	movs	r3, r0
 8000a04:	0019      	movs	r1, r3
 8000a06:	0020      	movs	r0, r4
 8000a08:	f7ff fb7e 	bl	8000108 <__udivsi3>
 8000a0c:	0003      	movs	r3, r0
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f000 ffa1 	bl	8001956 <HAL_SYSTICK_Config>
 8000a14:	1e03      	subs	r3, r0, #0
 8000a16:	d001      	beq.n	8000a1c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	e00f      	b.n	8000a3c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b03      	cmp	r3, #3
 8000a20:	d80b      	bhi.n	8000a3a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	2301      	movs	r3, #1
 8000a26:	425b      	negs	r3, r3
 8000a28:	2200      	movs	r2, #0
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f000 ff6e 	bl	800190c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_InitTick+0x64>)
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a36:	2300      	movs	r3, #0
 8000a38:	e000      	b.n	8000a3c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
}
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	b003      	add	sp, #12
 8000a42:	bd90      	pop	{r4, r7, pc}
 8000a44:	20000028 	.word	0x20000028
 8000a48:	20000030 	.word	0x20000030
 8000a4c:	2000002c 	.word	0x2000002c

08000a50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <HAL_IncTick+0x1c>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	001a      	movs	r2, r3
 8000a5a:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <HAL_IncTick+0x20>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	18d2      	adds	r2, r2, r3
 8000a60:	4b03      	ldr	r3, [pc, #12]	; (8000a70 <HAL_IncTick+0x20>)
 8000a62:	601a      	str	r2, [r3, #0]
}
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	20000030 	.word	0x20000030
 8000a70:	20000220 	.word	0x20000220

08000a74 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  return uwTick;
 8000a78:	4b02      	ldr	r3, [pc, #8]	; (8000a84 <HAL_GetTick+0x10>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
}
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	20000220 	.word	0x20000220

08000a88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a90:	f7ff fff0 	bl	8000a74 <HAL_GetTick>
 8000a94:	0003      	movs	r3, r0
 8000a96:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	d005      	beq.n	8000aae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <HAL_Delay+0x40>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	001a      	movs	r2, r3
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	189b      	adds	r3, r3, r2
 8000aac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	f7ff ffe0 	bl	8000a74 <HAL_GetTick>
 8000ab4:	0002      	movs	r2, r0
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d8f7      	bhi.n	8000ab0 <HAL_Delay+0x28>
  {
  }
}
 8000ac0:	46c0      	nop			; (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	b004      	add	sp, #16
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000030 	.word	0x20000030

08000acc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d101      	bne.n	8000ade <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	e0f0      	b.n	8000cc0 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2220      	movs	r2, #32
 8000ae2:	5c9b      	ldrb	r3, [r3, r2]
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d103      	bne.n	8000af2 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	0018      	movs	r0, r3
 8000aee:	f7ff fd57 	bl	80005a0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2102      	movs	r1, #2
 8000afe:	438a      	bics	r2, r1
 8000b00:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b02:	f7ff ffb7 	bl	8000a74 <HAL_GetTick>
 8000b06:	0003      	movs	r3, r0
 8000b08:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b0a:	e013      	b.n	8000b34 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b0c:	f7ff ffb2 	bl	8000a74 <HAL_GetTick>
 8000b10:	0002      	movs	r2, r0
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	2b0a      	cmp	r3, #10
 8000b18:	d90c      	bls.n	8000b34 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b1e:	2280      	movs	r2, #128	; 0x80
 8000b20:	0292      	lsls	r2, r2, #10
 8000b22:	431a      	orrs	r2, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2220      	movs	r2, #32
 8000b2c:	2105      	movs	r1, #5
 8000b2e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000b30:	2301      	movs	r3, #1
 8000b32:	e0c5      	b.n	8000cc0 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	2202      	movs	r2, #2
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	d1e5      	bne.n	8000b0c <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	430a      	orrs	r2, r1
 8000b4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b50:	f7ff ff90 	bl	8000a74 <HAL_GetTick>
 8000b54:	0003      	movs	r3, r0
 8000b56:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b58:	e013      	b.n	8000b82 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b5a:	f7ff ff8b 	bl	8000a74 <HAL_GetTick>
 8000b5e:	0002      	movs	r2, r0
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	1ad3      	subs	r3, r2, r3
 8000b64:	2b0a      	cmp	r3, #10
 8000b66:	d90c      	bls.n	8000b82 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b6c:	2280      	movs	r2, #128	; 0x80
 8000b6e:	0292      	lsls	r2, r2, #10
 8000b70:	431a      	orrs	r2, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2220      	movs	r2, #32
 8000b7a:	2105      	movs	r1, #5
 8000b7c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e09e      	b.n	8000cc0 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	2201      	movs	r2, #1
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	d0e5      	beq.n	8000b5a <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	7e1b      	ldrb	r3, [r3, #24]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d108      	bne.n	8000ba8 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2180      	movs	r1, #128	; 0x80
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	e007      	b.n	8000bb8 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2180      	movs	r1, #128	; 0x80
 8000bb4:	438a      	bics	r2, r1
 8000bb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	7e5b      	ldrb	r3, [r3, #25]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d108      	bne.n	8000bd2 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2140      	movs	r1, #64	; 0x40
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	e007      	b.n	8000be2 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2140      	movs	r1, #64	; 0x40
 8000bde:	438a      	bics	r2, r1
 8000be0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	7e9b      	ldrb	r3, [r3, #26]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d108      	bne.n	8000bfc <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2120      	movs	r1, #32
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	e007      	b.n	8000c0c <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2120      	movs	r1, #32
 8000c08:	438a      	bics	r2, r1
 8000c0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	7edb      	ldrb	r3, [r3, #27]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d108      	bne.n	8000c26 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2110      	movs	r1, #16
 8000c20:	438a      	bics	r2, r1
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	e007      	b.n	8000c36 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2110      	movs	r1, #16
 8000c32:	430a      	orrs	r2, r1
 8000c34:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	7f1b      	ldrb	r3, [r3, #28]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d108      	bne.n	8000c50 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2108      	movs	r1, #8
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	e007      	b.n	8000c60 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2108      	movs	r1, #8
 8000c5c:	438a      	bics	r2, r1
 8000c5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	7f5b      	ldrb	r3, [r3, #29]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d108      	bne.n	8000c7a <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2104      	movs	r1, #4
 8000c74:	430a      	orrs	r2, r1
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	e007      	b.n	8000c8a <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2104      	movs	r1, #4
 8000c86:	438a      	bics	r2, r1
 8000c88:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	689a      	ldr	r2, [r3, #8]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	431a      	orrs	r2, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	691b      	ldr	r3, [r3, #16]
 8000c98:	431a      	orrs	r2, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	695b      	ldr	r3, [r3, #20]
 8000c9e:	431a      	orrs	r2, r3
 8000ca0:	0011      	movs	r1, r2
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	1e5a      	subs	r2, r3, #1
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	430a      	orrs	r2, r1
 8000cae:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2220      	movs	r2, #32
 8000cba:	2101      	movs	r1, #1
 8000cbc:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000cbe:	2300      	movs	r3, #0
}
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	b004      	add	sp, #16
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000cd8:	2013      	movs	r0, #19
 8000cda:	183b      	adds	r3, r7, r0
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	2120      	movs	r1, #32
 8000ce0:	5c52      	ldrb	r2, [r2, r1]
 8000ce2:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8000ce4:	183b      	adds	r3, r7, r0
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d005      	beq.n	8000cf8 <HAL_CAN_ConfigFilter+0x30>
 8000cec:	2313      	movs	r3, #19
 8000cee:	18fb      	adds	r3, r7, r3
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d000      	beq.n	8000cf8 <HAL_CAN_ConfigFilter+0x30>
 8000cf6:	e0cd      	b.n	8000e94 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000cf8:	697a      	ldr	r2, [r7, #20]
 8000cfa:	2380      	movs	r3, #128	; 0x80
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	58d3      	ldr	r3, [r2, r3]
 8000d00:	2201      	movs	r2, #1
 8000d02:	431a      	orrs	r2, r3
 8000d04:	0011      	movs	r1, r2
 8000d06:	697a      	ldr	r2, [r7, #20]
 8000d08:	2380      	movs	r3, #128	; 0x80
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	695b      	ldr	r3, [r3, #20]
 8000d12:	221f      	movs	r2, #31
 8000d14:	4013      	ands	r3, r2
 8000d16:	2201      	movs	r2, #1
 8000d18:	409a      	lsls	r2, r3
 8000d1a:	0013      	movs	r3, r2
 8000d1c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000d1e:	697a      	ldr	r2, [r7, #20]
 8000d20:	2387      	movs	r3, #135	; 0x87
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	58d3      	ldr	r3, [r2, r3]
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	43d2      	mvns	r2, r2
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	0011      	movs	r1, r2
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	2387      	movs	r3, #135	; 0x87
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d129      	bne.n	8000d92 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000d3e:	697a      	ldr	r2, [r7, #20]
 8000d40:	2383      	movs	r3, #131	; 0x83
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	58d3      	ldr	r3, [r2, r3]
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	43d2      	mvns	r2, r2
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	0011      	movs	r1, r2
 8000d4e:	697a      	ldr	r2, [r7, #20]
 8000d50:	2383      	movs	r3, #131	; 0x83
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	68db      	ldr	r3, [r3, #12]
 8000d5a:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	041b      	lsls	r3, r3, #16
 8000d62:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d68:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	3248      	adds	r2, #72	; 0x48
 8000d6e:	00d2      	lsls	r2, r2, #3
 8000d70:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	041b      	lsls	r3, r3, #16
 8000d7e:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d84:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d86:	6979      	ldr	r1, [r7, #20]
 8000d88:	3348      	adds	r3, #72	; 0x48
 8000d8a:	00db      	lsls	r3, r3, #3
 8000d8c:	18cb      	adds	r3, r1, r3
 8000d8e:	3304      	adds	r3, #4
 8000d90:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	69db      	ldr	r3, [r3, #28]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d128      	bne.n	8000dec <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000d9a:	697a      	ldr	r2, [r7, #20]
 8000d9c:	2383      	movs	r3, #131	; 0x83
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	58d2      	ldr	r2, [r2, r3]
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	431a      	orrs	r2, r3
 8000da6:	0011      	movs	r1, r2
 8000da8:	697a      	ldr	r2, [r7, #20]
 8000daa:	2383      	movs	r3, #131	; 0x83
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	041b      	lsls	r3, r3, #16
 8000dbc:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000dc2:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	3248      	adds	r2, #72	; 0x48
 8000dc8:	00d2      	lsls	r2, r2, #3
 8000dca:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	041b      	lsls	r3, r3, #16
 8000dd8:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dde:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000de0:	6979      	ldr	r1, [r7, #20]
 8000de2:	3348      	adds	r3, #72	; 0x48
 8000de4:	00db      	lsls	r3, r3, #3
 8000de6:	18cb      	adds	r3, r1, r3
 8000de8:	3304      	adds	r3, #4
 8000dea:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d10c      	bne.n	8000e0e <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	2381      	movs	r3, #129	; 0x81
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	58d3      	ldr	r3, [r2, r3]
 8000dfc:	68fa      	ldr	r2, [r7, #12]
 8000dfe:	43d2      	mvns	r2, r2
 8000e00:	401a      	ands	r2, r3
 8000e02:	0011      	movs	r1, r2
 8000e04:	697a      	ldr	r2, [r7, #20]
 8000e06:	2381      	movs	r3, #129	; 0x81
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	50d1      	str	r1, [r2, r3]
 8000e0c:	e00a      	b.n	8000e24 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000e0e:	697a      	ldr	r2, [r7, #20]
 8000e10:	2381      	movs	r3, #129	; 0x81
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	58d2      	ldr	r2, [r2, r3]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	431a      	orrs	r2, r3
 8000e1a:	0011      	movs	r1, r2
 8000e1c:	697a      	ldr	r2, [r7, #20]
 8000e1e:	2381      	movs	r3, #129	; 0x81
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	691b      	ldr	r3, [r3, #16]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d10c      	bne.n	8000e46 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e2c:	697a      	ldr	r2, [r7, #20]
 8000e2e:	2385      	movs	r3, #133	; 0x85
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	58d3      	ldr	r3, [r2, r3]
 8000e34:	68fa      	ldr	r2, [r7, #12]
 8000e36:	43d2      	mvns	r2, r2
 8000e38:	401a      	ands	r2, r3
 8000e3a:	0011      	movs	r1, r2
 8000e3c:	697a      	ldr	r2, [r7, #20]
 8000e3e:	2385      	movs	r3, #133	; 0x85
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	50d1      	str	r1, [r2, r3]
 8000e44:	e00a      	b.n	8000e5c <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e46:	697a      	ldr	r2, [r7, #20]
 8000e48:	2385      	movs	r3, #133	; 0x85
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	58d2      	ldr	r2, [r2, r3]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	431a      	orrs	r2, r3
 8000e52:	0011      	movs	r1, r2
 8000e54:	697a      	ldr	r2, [r7, #20]
 8000e56:	2385      	movs	r3, #133	; 0x85
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	6a1b      	ldr	r3, [r3, #32]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d10a      	bne.n	8000e7a <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000e64:	697a      	ldr	r2, [r7, #20]
 8000e66:	2387      	movs	r3, #135	; 0x87
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	58d2      	ldr	r2, [r2, r3]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	431a      	orrs	r2, r3
 8000e70:	0011      	movs	r1, r2
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	2387      	movs	r3, #135	; 0x87
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e7a:	697a      	ldr	r2, [r7, #20]
 8000e7c:	2380      	movs	r3, #128	; 0x80
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	58d3      	ldr	r3, [r2, r3]
 8000e82:	2201      	movs	r2, #1
 8000e84:	4393      	bics	r3, r2
 8000e86:	0019      	movs	r1, r3
 8000e88:	697a      	ldr	r2, [r7, #20]
 8000e8a:	2380      	movs	r3, #128	; 0x80
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8000e90:	2300      	movs	r3, #0
 8000e92:	e007      	b.n	8000ea4 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e98:	2280      	movs	r2, #128	; 0x80
 8000e9a:	02d2      	lsls	r2, r2, #11
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
  }
}
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	b006      	add	sp, #24
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2220      	movs	r2, #32
 8000eb8:	5c9b      	ldrb	r3, [r3, r2]
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d12f      	bne.n	8000f20 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2220      	movs	r2, #32
 8000ec4:	2102      	movs	r1, #2
 8000ec6:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	438a      	bics	r2, r1
 8000ed6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000ed8:	f7ff fdcc 	bl	8000a74 <HAL_GetTick>
 8000edc:	0003      	movs	r3, r0
 8000ede:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ee0:	e013      	b.n	8000f0a <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ee2:	f7ff fdc7 	bl	8000a74 <HAL_GetTick>
 8000ee6:	0002      	movs	r2, r0
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	2b0a      	cmp	r3, #10
 8000eee:	d90c      	bls.n	8000f0a <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef4:	2280      	movs	r2, #128	; 0x80
 8000ef6:	0292      	lsls	r2, r2, #10
 8000ef8:	431a      	orrs	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2220      	movs	r2, #32
 8000f02:	2105      	movs	r1, #5
 8000f04:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e012      	b.n	8000f30 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	2201      	movs	r2, #1
 8000f12:	4013      	ands	r3, r2
 8000f14:	d1e5      	bne.n	8000ee2 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	e007      	b.n	8000f30 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f24:	2280      	movs	r2, #128	; 0x80
 8000f26:	0312      	lsls	r2, r2, #12
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
  }
}
 8000f30:	0018      	movs	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	b004      	add	sp, #16
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
 8000f44:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f46:	201f      	movs	r0, #31
 8000f48:	183b      	adds	r3, r7, r0
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	2120      	movs	r1, #32
 8000f4e:	5c52      	ldrb	r2, [r2, r1]
 8000f50:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f5a:	183b      	adds	r3, r7, r0
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d005      	beq.n	8000f6e <HAL_CAN_AddTxMessage+0x36>
 8000f62:	231f      	movs	r3, #31
 8000f64:	18fb      	adds	r3, r7, r3
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d000      	beq.n	8000f6e <HAL_CAN_AddTxMessage+0x36>
 8000f6c:	e0b7      	b.n	80010de <HAL_CAN_AddTxMessage+0x1a6>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	2380      	movs	r3, #128	; 0x80
 8000f72:	04db      	lsls	r3, r3, #19
 8000f74:	4013      	ands	r3, r2
 8000f76:	d10a      	bne.n	8000f8e <HAL_CAN_AddTxMessage+0x56>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	2380      	movs	r3, #128	; 0x80
 8000f7c:	051b      	lsls	r3, r3, #20
 8000f7e:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f80:	d105      	bne.n	8000f8e <HAL_CAN_AddTxMessage+0x56>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	2380      	movs	r3, #128	; 0x80
 8000f86:	055b      	lsls	r3, r3, #21
 8000f88:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f8a:	d100      	bne.n	8000f8e <HAL_CAN_AddTxMessage+0x56>
 8000f8c:	e09e      	b.n	80010cc <HAL_CAN_AddTxMessage+0x194>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	0e1b      	lsrs	r3, r3, #24
 8000f92:	2203      	movs	r2, #3
 8000f94:	4013      	ands	r3, r2
 8000f96:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d908      	bls.n	8000fb0 <HAL_CAN_AddTxMessage+0x78>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa2:	2280      	movs	r2, #128	; 0x80
 8000fa4:	0412      	lsls	r2, r2, #16
 8000fa6:	431a      	orrs	r2, r3
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e09e      	b.n	80010ee <HAL_CAN_AddTxMessage+0x1b6>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	409a      	lsls	r2, r3
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d10c      	bne.n	8000fdc <HAL_CAN_AddTxMessage+0xa4>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4311      	orrs	r1, r2
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	3218      	adds	r2, #24
 8000fd6:	0112      	lsls	r2, r2, #4
 8000fd8:	50d1      	str	r1, [r2, r3]
 8000fda:	e00f      	b.n	8000ffc <HAL_CAN_AddTxMessage+0xc4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000fe6:	431a      	orrs	r2, r3
 8000fe8:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8000ff2:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ff4:	697a      	ldr	r2, [r7, #20]
 8000ff6:	3218      	adds	r2, #24
 8000ff8:	0112      	lsls	r2, r2, #4
 8000ffa:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	6819      	ldr	r1, [r3, #0]
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	691a      	ldr	r2, [r3, #16]
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	3318      	adds	r3, #24
 8001008:	011b      	lsls	r3, r3, #4
 800100a:	18cb      	adds	r3, r1, r3
 800100c:	3304      	adds	r3, #4
 800100e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	7d1b      	ldrb	r3, [r3, #20]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d112      	bne.n	800103e <HAL_CAN_AddTxMessage+0x106>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	3318      	adds	r3, #24
 8001020:	011b      	lsls	r3, r3, #4
 8001022:	18d3      	adds	r3, r2, r3
 8001024:	3304      	adds	r3, #4
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	6819      	ldr	r1, [r3, #0]
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	431a      	orrs	r2, r3
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	3318      	adds	r3, #24
 8001036:	011b      	lsls	r3, r3, #4
 8001038:	18cb      	adds	r3, r1, r3
 800103a:	3304      	adds	r3, #4
 800103c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3307      	adds	r3, #7
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	061a      	lsls	r2, r3, #24
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3306      	adds	r3, #6
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	041b      	lsls	r3, r3, #16
 800104e:	431a      	orrs	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3305      	adds	r3, #5
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	021b      	lsls	r3, r3, #8
 8001058:	431a      	orrs	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3304      	adds	r3, #4
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	0019      	movs	r1, r3
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	6818      	ldr	r0, [r3, #0]
 8001066:	430a      	orrs	r2, r1
 8001068:	6979      	ldr	r1, [r7, #20]
 800106a:	23c6      	movs	r3, #198	; 0xc6
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	0109      	lsls	r1, r1, #4
 8001070:	1841      	adds	r1, r0, r1
 8001072:	18cb      	adds	r3, r1, r3
 8001074:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3303      	adds	r3, #3
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	061a      	lsls	r2, r3, #24
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3302      	adds	r3, #2
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	041b      	lsls	r3, r3, #16
 8001086:	431a      	orrs	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3301      	adds	r3, #1
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	021b      	lsls	r3, r3, #8
 8001090:	431a      	orrs	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	0019      	movs	r1, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	6818      	ldr	r0, [r3, #0]
 800109c:	430a      	orrs	r2, r1
 800109e:	6979      	ldr	r1, [r7, #20]
 80010a0:	23c4      	movs	r3, #196	; 0xc4
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	0109      	lsls	r1, r1, #4
 80010a6:	1841      	adds	r1, r0, r1
 80010a8:	18cb      	adds	r3, r1, r3
 80010aa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	3218      	adds	r2, #24
 80010b4:	0112      	lsls	r2, r2, #4
 80010b6:	58d2      	ldr	r2, [r2, r3]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2101      	movs	r1, #1
 80010be:	4311      	orrs	r1, r2
 80010c0:	697a      	ldr	r2, [r7, #20]
 80010c2:	3218      	adds	r2, #24
 80010c4:	0112      	lsls	r2, r2, #4
 80010c6:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 80010c8:	2300      	movs	r3, #0
 80010ca:	e010      	b.n	80010ee <HAL_CAN_AddTxMessage+0x1b6>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d0:	2280      	movs	r2, #128	; 0x80
 80010d2:	0392      	lsls	r2, r2, #14
 80010d4:	431a      	orrs	r2, r3
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e007      	b.n	80010ee <HAL_CAN_AddTxMessage+0x1b6>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e2:	2280      	movs	r2, #128	; 0x80
 80010e4:	02d2      	lsls	r2, r2, #11
 80010e6:	431a      	orrs	r2, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
  }
}
 80010ee:	0018      	movs	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b008      	add	sp, #32
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b086      	sub	sp, #24
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	60f8      	str	r0, [r7, #12]
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001104:	2017      	movs	r0, #23
 8001106:	183b      	adds	r3, r7, r0
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	2120      	movs	r1, #32
 800110c:	5c52      	ldrb	r2, [r2, r1]
 800110e:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001110:	183b      	adds	r3, r7, r0
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d005      	beq.n	8001124 <HAL_CAN_GetRxMessage+0x2e>
 8001118:	2317      	movs	r3, #23
 800111a:	18fb      	adds	r3, r7, r3
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b02      	cmp	r3, #2
 8001120:	d000      	beq.n	8001124 <HAL_CAN_GetRxMessage+0x2e>
 8001122:	e0f8      	b.n	8001316 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10e      	bne.n	8001148 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	2203      	movs	r2, #3
 8001132:	4013      	ands	r3, r2
 8001134:	d117      	bne.n	8001166 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113a:	2280      	movs	r2, #128	; 0x80
 800113c:	0392      	lsls	r2, r2, #14
 800113e:	431a      	orrs	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e0ee      	b.n	8001326 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	2203      	movs	r2, #3
 8001150:	4013      	ands	r3, r2
 8001152:	d108      	bne.n	8001166 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001158:	2280      	movs	r2, #128	; 0x80
 800115a:	0392      	lsls	r2, r2, #14
 800115c:	431a      	orrs	r2, r3
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e0df      	b.n	8001326 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	321b      	adds	r2, #27
 800116e:	0112      	lsls	r2, r2, #4
 8001170:	58d3      	ldr	r3, [r2, r3]
 8001172:	2204      	movs	r2, #4
 8001174:	401a      	ands	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d10b      	bne.n	800119a <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	321b      	adds	r2, #27
 800118a:	0112      	lsls	r2, r2, #4
 800118c:	58d3      	ldr	r3, [r2, r3]
 800118e:	0d5b      	lsrs	r3, r3, #21
 8001190:	055b      	lsls	r3, r3, #21
 8001192:	0d5a      	lsrs	r2, r3, #21
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	e00a      	b.n	80011b0 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	321b      	adds	r2, #27
 80011a2:	0112      	lsls	r2, r2, #4
 80011a4:	58d3      	ldr	r3, [r2, r3]
 80011a6:	08db      	lsrs	r3, r3, #3
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	08da      	lsrs	r2, r3, #3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	68ba      	ldr	r2, [r7, #8]
 80011b6:	321b      	adds	r2, #27
 80011b8:	0112      	lsls	r2, r2, #4
 80011ba:	58d3      	ldr	r3, [r2, r3]
 80011bc:	2202      	movs	r2, #2
 80011be:	401a      	ands	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	331b      	adds	r3, #27
 80011cc:	011b      	lsls	r3, r3, #4
 80011ce:	18d3      	adds	r3, r2, r3
 80011d0:	3304      	adds	r3, #4
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	220f      	movs	r2, #15
 80011d6:	401a      	ands	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	331b      	adds	r3, #27
 80011e4:	011b      	lsls	r3, r3, #4
 80011e6:	18d3      	adds	r3, r2, r3
 80011e8:	3304      	adds	r3, #4
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	0a1b      	lsrs	r3, r3, #8
 80011ee:	22ff      	movs	r2, #255	; 0xff
 80011f0:	401a      	ands	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	331b      	adds	r3, #27
 80011fe:	011b      	lsls	r3, r3, #4
 8001200:	18d3      	adds	r3, r2, r3
 8001202:	3304      	adds	r3, #4
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	0c1b      	lsrs	r3, r3, #16
 8001208:	041b      	lsls	r3, r3, #16
 800120a:	0c1a      	lsrs	r2, r3, #16
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6819      	ldr	r1, [r3, #0]
 8001214:	68ba      	ldr	r2, [r7, #8]
 8001216:	23dc      	movs	r3, #220	; 0xdc
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	0112      	lsls	r2, r2, #4
 800121c:	188a      	adds	r2, r1, r2
 800121e:	18d3      	adds	r3, r2, r3
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	b2da      	uxtb	r2, r3
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	6819      	ldr	r1, [r3, #0]
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	23dc      	movs	r3, #220	; 0xdc
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	0112      	lsls	r2, r2, #4
 8001234:	188a      	adds	r2, r1, r2
 8001236:	18d3      	adds	r3, r2, r3
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	0a1a      	lsrs	r2, r3, #8
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	3301      	adds	r3, #1
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6819      	ldr	r1, [r3, #0]
 8001248:	68ba      	ldr	r2, [r7, #8]
 800124a:	23dc      	movs	r3, #220	; 0xdc
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	0112      	lsls	r2, r2, #4
 8001250:	188a      	adds	r2, r1, r2
 8001252:	18d3      	adds	r3, r2, r3
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	0c1a      	lsrs	r2, r3, #16
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	3302      	adds	r3, #2
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	6819      	ldr	r1, [r3, #0]
 8001264:	68ba      	ldr	r2, [r7, #8]
 8001266:	23dc      	movs	r3, #220	; 0xdc
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	0112      	lsls	r2, r2, #4
 800126c:	188a      	adds	r2, r1, r2
 800126e:	18d3      	adds	r3, r2, r3
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	0e1a      	lsrs	r2, r3, #24
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	3303      	adds	r3, #3
 8001278:	b2d2      	uxtb	r2, r2
 800127a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	6819      	ldr	r1, [r3, #0]
 8001280:	68ba      	ldr	r2, [r7, #8]
 8001282:	23de      	movs	r3, #222	; 0xde
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	0112      	lsls	r2, r2, #4
 8001288:	188a      	adds	r2, r1, r2
 800128a:	18d3      	adds	r3, r2, r3
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	3304      	adds	r3, #4
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	6819      	ldr	r1, [r3, #0]
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	23de      	movs	r3, #222	; 0xde
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	0112      	lsls	r2, r2, #4
 80012a2:	188a      	adds	r2, r1, r2
 80012a4:	18d3      	adds	r3, r2, r3
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	0a1a      	lsrs	r2, r3, #8
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	3305      	adds	r3, #5
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6819      	ldr	r1, [r3, #0]
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	23de      	movs	r3, #222	; 0xde
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	0112      	lsls	r2, r2, #4
 80012be:	188a      	adds	r2, r1, r2
 80012c0:	18d3      	adds	r3, r2, r3
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	0c1a      	lsrs	r2, r3, #16
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	3306      	adds	r3, #6
 80012ca:	b2d2      	uxtb	r2, r2
 80012cc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6819      	ldr	r1, [r3, #0]
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	23de      	movs	r3, #222	; 0xde
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	0112      	lsls	r2, r2, #4
 80012da:	188a      	adds	r2, r1, r2
 80012dc:	18d3      	adds	r3, r2, r3
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	0e1a      	lsrs	r2, r3, #24
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	3307      	adds	r3, #7
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d108      	bne.n	8001302 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	68da      	ldr	r2, [r3, #12]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2120      	movs	r1, #32
 80012fc:	430a      	orrs	r2, r1
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	e007      	b.n	8001312 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	691a      	ldr	r2, [r3, #16]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2120      	movs	r1, #32
 800130e:	430a      	orrs	r2, r1
 8001310:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001312:	2300      	movs	r3, #0
 8001314:	e007      	b.n	8001326 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131a:	2280      	movs	r2, #128	; 0x80
 800131c:	02d2      	lsls	r2, r2, #11
 800131e:	431a      	orrs	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
  }
}
 8001326:	0018      	movs	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	b006      	add	sp, #24
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b084      	sub	sp, #16
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
 8001336:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001338:	200f      	movs	r0, #15
 800133a:	183b      	adds	r3, r7, r0
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	2120      	movs	r1, #32
 8001340:	5c52      	ldrb	r2, [r2, r1]
 8001342:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001344:	183b      	adds	r3, r7, r0
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d004      	beq.n	8001356 <HAL_CAN_ActivateNotification+0x28>
 800134c:	230f      	movs	r3, #15
 800134e:	18fb      	adds	r3, r7, r3
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d109      	bne.n	800136a <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	6959      	ldr	r1, [r3, #20]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	430a      	orrs	r2, r1
 8001364:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001366:	2300      	movs	r3, #0
 8001368:	e007      	b.n	800137a <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136e:	2280      	movs	r2, #128	; 0x80
 8001370:	02d2      	lsls	r2, r2, #11
 8001372:	431a      	orrs	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
  }
}
 800137a:	0018      	movs	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	b004      	add	sp, #16
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b08a      	sub	sp, #40	; 0x28
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800138a:	2300      	movs	r3, #0
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80013be:	6a3b      	ldr	r3, [r7, #32]
 80013c0:	2201      	movs	r2, #1
 80013c2:	4013      	ands	r3, r2
 80013c4:	d100      	bne.n	80013c8 <HAL_CAN_IRQHandler+0x46>
 80013c6:	e084      	b.n	80014d2 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	2201      	movs	r2, #1
 80013cc:	4013      	ands	r3, r2
 80013ce:	d024      	beq.n	800141a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2201      	movs	r2, #1
 80013d6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	2202      	movs	r2, #2
 80013dc:	4013      	ands	r3, r2
 80013de:	d004      	beq.n	80013ea <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	0018      	movs	r0, r3
 80013e4:	f000 f97e 	bl	80016e4 <HAL_CAN_TxMailbox0CompleteCallback>
 80013e8:	e017      	b.n	800141a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	2204      	movs	r2, #4
 80013ee:	4013      	ands	r3, r2
 80013f0:	d005      	beq.n	80013fe <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	2280      	movs	r2, #128	; 0x80
 80013f6:	0112      	lsls	r2, r2, #4
 80013f8:	4313      	orrs	r3, r2
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
 80013fc:	e00d      	b.n	800141a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	2208      	movs	r2, #8
 8001402:	4013      	ands	r3, r2
 8001404:	d005      	beq.n	8001412 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	2280      	movs	r2, #128	; 0x80
 800140a:	0152      	lsls	r2, r2, #5
 800140c:	4313      	orrs	r3, r2
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
 8001410:	e003      	b.n	800141a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	0018      	movs	r0, r3
 8001416:	f000 f97d 	bl	8001714 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	2380      	movs	r3, #128	; 0x80
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	4013      	ands	r3, r2
 8001422:	d028      	beq.n	8001476 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2280      	movs	r2, #128	; 0x80
 800142a:	0052      	lsls	r2, r2, #1
 800142c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	2380      	movs	r3, #128	; 0x80
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4013      	ands	r3, r2
 8001436:	d004      	beq.n	8001442 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	0018      	movs	r0, r3
 800143c:	f000 f95a 	bl	80016f4 <HAL_CAN_TxMailbox1CompleteCallback>
 8001440:	e019      	b.n	8001476 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	2380      	movs	r3, #128	; 0x80
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	4013      	ands	r3, r2
 800144a:	d005      	beq.n	8001458 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800144c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144e:	2280      	movs	r2, #128	; 0x80
 8001450:	0192      	lsls	r2, r2, #6
 8001452:	4313      	orrs	r3, r2
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
 8001456:	e00e      	b.n	8001476 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	2380      	movs	r3, #128	; 0x80
 800145c:	011b      	lsls	r3, r3, #4
 800145e:	4013      	ands	r3, r2
 8001460:	d005      	beq.n	800146e <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	2280      	movs	r2, #128	; 0x80
 8001466:	01d2      	lsls	r2, r2, #7
 8001468:	4313      	orrs	r3, r2
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
 800146c:	e003      	b.n	8001476 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	0018      	movs	r0, r3
 8001472:	f000 f957 	bl	8001724 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	025b      	lsls	r3, r3, #9
 800147c:	4013      	ands	r3, r2
 800147e:	d028      	beq.n	80014d2 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2280      	movs	r2, #128	; 0x80
 8001486:	0252      	lsls	r2, r2, #9
 8001488:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	2380      	movs	r3, #128	; 0x80
 800148e:	029b      	lsls	r3, r3, #10
 8001490:	4013      	ands	r3, r2
 8001492:	d004      	beq.n	800149e <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	0018      	movs	r0, r3
 8001498:	f000 f934 	bl	8001704 <HAL_CAN_TxMailbox2CompleteCallback>
 800149c:	e019      	b.n	80014d2 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	2380      	movs	r3, #128	; 0x80
 80014a2:	02db      	lsls	r3, r3, #11
 80014a4:	4013      	ands	r3, r2
 80014a6:	d005      	beq.n	80014b4 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80014a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014aa:	2280      	movs	r2, #128	; 0x80
 80014ac:	0212      	lsls	r2, r2, #8
 80014ae:	4313      	orrs	r3, r2
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
 80014b2:	e00e      	b.n	80014d2 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	2380      	movs	r3, #128	; 0x80
 80014b8:	031b      	lsls	r3, r3, #12
 80014ba:	4013      	ands	r3, r2
 80014bc:	d005      	beq.n	80014ca <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	2280      	movs	r2, #128	; 0x80
 80014c2:	0252      	lsls	r2, r2, #9
 80014c4:	4313      	orrs	r3, r2
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
 80014c8:	e003      	b.n	80014d2 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	0018      	movs	r0, r3
 80014ce:	f000 f931 	bl	8001734 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80014d2:	6a3b      	ldr	r3, [r7, #32]
 80014d4:	2208      	movs	r2, #8
 80014d6:	4013      	ands	r3, r2
 80014d8:	d00c      	beq.n	80014f4 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	2210      	movs	r2, #16
 80014de:	4013      	ands	r3, r2
 80014e0:	d008      	beq.n	80014f4 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	2280      	movs	r2, #128	; 0x80
 80014e6:	0092      	lsls	r2, r2, #2
 80014e8:	4313      	orrs	r3, r2
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2210      	movs	r2, #16
 80014f2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80014f4:	6a3b      	ldr	r3, [r7, #32]
 80014f6:	2204      	movs	r2, #4
 80014f8:	4013      	ands	r3, r2
 80014fa:	d00b      	beq.n	8001514 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	2208      	movs	r2, #8
 8001500:	4013      	ands	r3, r2
 8001502:	d007      	beq.n	8001514 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2208      	movs	r2, #8
 800150a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	0018      	movs	r0, r3
 8001510:	f000 f920 	bl	8001754 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001514:	6a3b      	ldr	r3, [r7, #32]
 8001516:	2202      	movs	r2, #2
 8001518:	4013      	ands	r3, r2
 800151a:	d009      	beq.n	8001530 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	2203      	movs	r2, #3
 8001524:	4013      	ands	r3, r2
 8001526:	d003      	beq.n	8001530 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	0018      	movs	r0, r3
 800152c:	f000 f90a 	bl	8001744 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001530:	6a3b      	ldr	r3, [r7, #32]
 8001532:	2240      	movs	r2, #64	; 0x40
 8001534:	4013      	ands	r3, r2
 8001536:	d00c      	beq.n	8001552 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	2210      	movs	r2, #16
 800153c:	4013      	ands	r3, r2
 800153e:	d008      	beq.n	8001552 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001542:	2280      	movs	r2, #128	; 0x80
 8001544:	00d2      	lsls	r2, r2, #3
 8001546:	4313      	orrs	r3, r2
 8001548:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2210      	movs	r2, #16
 8001550:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001552:	6a3b      	ldr	r3, [r7, #32]
 8001554:	2220      	movs	r2, #32
 8001556:	4013      	ands	r3, r2
 8001558:	d00b      	beq.n	8001572 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	2208      	movs	r2, #8
 800155e:	4013      	ands	r3, r2
 8001560:	d007      	beq.n	8001572 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2208      	movs	r2, #8
 8001568:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	0018      	movs	r0, r3
 800156e:	f000 f901 	bl	8001774 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001572:	6a3b      	ldr	r3, [r7, #32]
 8001574:	2210      	movs	r2, #16
 8001576:	4013      	ands	r3, r2
 8001578:	d009      	beq.n	800158e <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	691b      	ldr	r3, [r3, #16]
 8001580:	2203      	movs	r2, #3
 8001582:	4013      	ands	r3, r2
 8001584:	d003      	beq.n	800158e <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	0018      	movs	r0, r3
 800158a:	f000 f8eb 	bl	8001764 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800158e:	6a3a      	ldr	r2, [r7, #32]
 8001590:	2380      	movs	r3, #128	; 0x80
 8001592:	029b      	lsls	r3, r3, #10
 8001594:	4013      	ands	r3, r2
 8001596:	d00b      	beq.n	80015b0 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	2210      	movs	r2, #16
 800159c:	4013      	ands	r3, r2
 800159e:	d007      	beq.n	80015b0 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2210      	movs	r2, #16
 80015a6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	0018      	movs	r0, r3
 80015ac:	f000 f8ea 	bl	8001784 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80015b0:	6a3a      	ldr	r2, [r7, #32]
 80015b2:	2380      	movs	r3, #128	; 0x80
 80015b4:	025b      	lsls	r3, r3, #9
 80015b6:	4013      	ands	r3, r2
 80015b8:	d00b      	beq.n	80015d2 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	2208      	movs	r2, #8
 80015be:	4013      	ands	r3, r2
 80015c0:	d007      	beq.n	80015d2 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2208      	movs	r2, #8
 80015c8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	0018      	movs	r0, r3
 80015ce:	f000 f8e1 	bl	8001794 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80015d2:	6a3a      	ldr	r2, [r7, #32]
 80015d4:	2380      	movs	r3, #128	; 0x80
 80015d6:	021b      	lsls	r3, r3, #8
 80015d8:	4013      	ands	r3, r2
 80015da:	d100      	bne.n	80015de <HAL_CAN_IRQHandler+0x25c>
 80015dc:	e071      	b.n	80016c2 <HAL_CAN_IRQHandler+0x340>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	2204      	movs	r2, #4
 80015e2:	4013      	ands	r3, r2
 80015e4:	d100      	bne.n	80015e8 <HAL_CAN_IRQHandler+0x266>
 80015e6:	e068      	b.n	80016ba <HAL_CAN_IRQHandler+0x338>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80015e8:	6a3a      	ldr	r2, [r7, #32]
 80015ea:	2380      	movs	r3, #128	; 0x80
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	4013      	ands	r3, r2
 80015f0:	d007      	beq.n	8001602 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2201      	movs	r2, #1
 80015f6:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80015f8:	d003      	beq.n	8001602 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	2201      	movs	r2, #1
 80015fe:	4313      	orrs	r3, r2
 8001600:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001602:	6a3a      	ldr	r2, [r7, #32]
 8001604:	2380      	movs	r3, #128	; 0x80
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4013      	ands	r3, r2
 800160a:	d007      	beq.n	800161c <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2202      	movs	r2, #2
 8001610:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001612:	d003      	beq.n	800161c <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	2202      	movs	r2, #2
 8001618:	4313      	orrs	r3, r2
 800161a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800161c:	6a3a      	ldr	r2, [r7, #32]
 800161e:	2380      	movs	r3, #128	; 0x80
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	4013      	ands	r3, r2
 8001624:	d007      	beq.n	8001636 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2204      	movs	r2, #4
 800162a:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800162c:	d003      	beq.n	8001636 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	2204      	movs	r2, #4
 8001632:	4313      	orrs	r3, r2
 8001634:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001636:	6a3a      	ldr	r2, [r7, #32]
 8001638:	2380      	movs	r3, #128	; 0x80
 800163a:	011b      	lsls	r3, r3, #4
 800163c:	4013      	ands	r3, r2
 800163e:	d03c      	beq.n	80016ba <HAL_CAN_IRQHandler+0x338>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2270      	movs	r2, #112	; 0x70
 8001644:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001646:	d038      	beq.n	80016ba <HAL_CAN_IRQHandler+0x338>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2270      	movs	r2, #112	; 0x70
 800164c:	4013      	ands	r3, r2
 800164e:	2b30      	cmp	r3, #48	; 0x30
 8001650:	d016      	beq.n	8001680 <HAL_CAN_IRQHandler+0x2fe>
 8001652:	d804      	bhi.n	800165e <HAL_CAN_IRQHandler+0x2dc>
 8001654:	2b10      	cmp	r3, #16
 8001656:	d009      	beq.n	800166c <HAL_CAN_IRQHandler+0x2ea>
 8001658:	2b20      	cmp	r3, #32
 800165a:	d00c      	beq.n	8001676 <HAL_CAN_IRQHandler+0x2f4>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800165c:	e025      	b.n	80016aa <HAL_CAN_IRQHandler+0x328>
        switch (esrflags & CAN_ESR_LEC)
 800165e:	2b50      	cmp	r3, #80	; 0x50
 8001660:	d018      	beq.n	8001694 <HAL_CAN_IRQHandler+0x312>
 8001662:	2b60      	cmp	r3, #96	; 0x60
 8001664:	d01b      	beq.n	800169e <HAL_CAN_IRQHandler+0x31c>
 8001666:	2b40      	cmp	r3, #64	; 0x40
 8001668:	d00f      	beq.n	800168a <HAL_CAN_IRQHandler+0x308>
            break;
 800166a:	e01e      	b.n	80016aa <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_STF;
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	2208      	movs	r2, #8
 8001670:	4313      	orrs	r3, r2
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001674:	e019      	b.n	80016aa <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	2210      	movs	r2, #16
 800167a:	4313      	orrs	r3, r2
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800167e:	e014      	b.n	80016aa <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	2220      	movs	r2, #32
 8001684:	4313      	orrs	r3, r2
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001688:	e00f      	b.n	80016aa <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BR;
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	2240      	movs	r2, #64	; 0x40
 800168e:	4313      	orrs	r3, r2
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001692:	e00a      	b.n	80016aa <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BD;
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	2280      	movs	r2, #128	; 0x80
 8001698:	4313      	orrs	r3, r2
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800169c:	e005      	b.n	80016aa <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_CRC;
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	2280      	movs	r2, #128	; 0x80
 80016a2:	0052      	lsls	r2, r2, #1
 80016a4:	4313      	orrs	r3, r2
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016a8:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	699a      	ldr	r2, [r3, #24]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2170      	movs	r1, #112	; 0x70
 80016b6:	438a      	bics	r2, r1
 80016b8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2204      	movs	r2, #4
 80016c0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d009      	beq.n	80016dc <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	0018      	movs	r0, r3
 80016d8:	f000 f864 	bl	80017a4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80016dc:	46c0      	nop			; (mov r8, r8)
 80016de:	46bd      	mov	sp, r7
 80016e0:	b00a      	add	sp, #40	; 0x28
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80016ec:	46c0      	nop			; (mov r8, r8)
 80016ee:	46bd      	mov	sp, r7
 80016f0:	b002      	add	sp, #8
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80016fc:	46c0      	nop			; (mov r8, r8)
 80016fe:	46bd      	mov	sp, r7
 8001700:	b002      	add	sp, #8
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800170c:	46c0      	nop			; (mov r8, r8)
 800170e:	46bd      	mov	sp, r7
 8001710:	b002      	add	sp, #8
 8001712:	bd80      	pop	{r7, pc}

08001714 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800171c:	46c0      	nop			; (mov r8, r8)
 800171e:	46bd      	mov	sp, r7
 8001720:	b002      	add	sp, #8
 8001722:	bd80      	pop	{r7, pc}

08001724 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800172c:	46c0      	nop			; (mov r8, r8)
 800172e:	46bd      	mov	sp, r7
 8001730:	b002      	add	sp, #8
 8001732:	bd80      	pop	{r7, pc}

08001734 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800173c:	46c0      	nop			; (mov r8, r8)
 800173e:	46bd      	mov	sp, r7
 8001740:	b002      	add	sp, #8
 8001742:	bd80      	pop	{r7, pc}

08001744 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800174c:	46c0      	nop			; (mov r8, r8)
 800174e:	46bd      	mov	sp, r7
 8001750:	b002      	add	sp, #8
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800175c:	46c0      	nop			; (mov r8, r8)
 800175e:	46bd      	mov	sp, r7
 8001760:	b002      	add	sp, #8
 8001762:	bd80      	pop	{r7, pc}

08001764 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800176c:	46c0      	nop			; (mov r8, r8)
 800176e:	46bd      	mov	sp, r7
 8001770:	b002      	add	sp, #8
 8001772:	bd80      	pop	{r7, pc}

08001774 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800177c:	46c0      	nop			; (mov r8, r8)
 800177e:	46bd      	mov	sp, r7
 8001780:	b002      	add	sp, #8
 8001782:	bd80      	pop	{r7, pc}

08001784 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800178c:	46c0      	nop			; (mov r8, r8)
 800178e:	46bd      	mov	sp, r7
 8001790:	b002      	add	sp, #8
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800179c:	46c0      	nop			; (mov r8, r8)
 800179e:	46bd      	mov	sp, r7
 80017a0:	b002      	add	sp, #8
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80017ac:	46c0      	nop			; (mov r8, r8)
 80017ae:	46bd      	mov	sp, r7
 80017b0:	b002      	add	sp, #8
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	0002      	movs	r2, r0
 80017bc:	1dfb      	adds	r3, r7, #7
 80017be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017c0:	1dfb      	adds	r3, r7, #7
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b7f      	cmp	r3, #127	; 0x7f
 80017c6:	d809      	bhi.n	80017dc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017c8:	1dfb      	adds	r3, r7, #7
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	001a      	movs	r2, r3
 80017ce:	231f      	movs	r3, #31
 80017d0:	401a      	ands	r2, r3
 80017d2:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <__NVIC_EnableIRQ+0x30>)
 80017d4:	2101      	movs	r1, #1
 80017d6:	4091      	lsls	r1, r2
 80017d8:	000a      	movs	r2, r1
 80017da:	601a      	str	r2, [r3, #0]
  }
}
 80017dc:	46c0      	nop			; (mov r8, r8)
 80017de:	46bd      	mov	sp, r7
 80017e0:	b002      	add	sp, #8
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	e000e100 	.word	0xe000e100

080017e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e8:	b590      	push	{r4, r7, lr}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	0002      	movs	r2, r0
 80017f0:	6039      	str	r1, [r7, #0]
 80017f2:	1dfb      	adds	r3, r7, #7
 80017f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017f6:	1dfb      	adds	r3, r7, #7
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b7f      	cmp	r3, #127	; 0x7f
 80017fc:	d828      	bhi.n	8001850 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017fe:	4a2f      	ldr	r2, [pc, #188]	; (80018bc <__NVIC_SetPriority+0xd4>)
 8001800:	1dfb      	adds	r3, r7, #7
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	b25b      	sxtb	r3, r3
 8001806:	089b      	lsrs	r3, r3, #2
 8001808:	33c0      	adds	r3, #192	; 0xc0
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	589b      	ldr	r3, [r3, r2]
 800180e:	1dfa      	adds	r2, r7, #7
 8001810:	7812      	ldrb	r2, [r2, #0]
 8001812:	0011      	movs	r1, r2
 8001814:	2203      	movs	r2, #3
 8001816:	400a      	ands	r2, r1
 8001818:	00d2      	lsls	r2, r2, #3
 800181a:	21ff      	movs	r1, #255	; 0xff
 800181c:	4091      	lsls	r1, r2
 800181e:	000a      	movs	r2, r1
 8001820:	43d2      	mvns	r2, r2
 8001822:	401a      	ands	r2, r3
 8001824:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	019b      	lsls	r3, r3, #6
 800182a:	22ff      	movs	r2, #255	; 0xff
 800182c:	401a      	ands	r2, r3
 800182e:	1dfb      	adds	r3, r7, #7
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	0018      	movs	r0, r3
 8001834:	2303      	movs	r3, #3
 8001836:	4003      	ands	r3, r0
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800183c:	481f      	ldr	r0, [pc, #124]	; (80018bc <__NVIC_SetPriority+0xd4>)
 800183e:	1dfb      	adds	r3, r7, #7
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	b25b      	sxtb	r3, r3
 8001844:	089b      	lsrs	r3, r3, #2
 8001846:	430a      	orrs	r2, r1
 8001848:	33c0      	adds	r3, #192	; 0xc0
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800184e:	e031      	b.n	80018b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001850:	4a1b      	ldr	r2, [pc, #108]	; (80018c0 <__NVIC_SetPriority+0xd8>)
 8001852:	1dfb      	adds	r3, r7, #7
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	0019      	movs	r1, r3
 8001858:	230f      	movs	r3, #15
 800185a:	400b      	ands	r3, r1
 800185c:	3b08      	subs	r3, #8
 800185e:	089b      	lsrs	r3, r3, #2
 8001860:	3306      	adds	r3, #6
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	18d3      	adds	r3, r2, r3
 8001866:	3304      	adds	r3, #4
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	1dfa      	adds	r2, r7, #7
 800186c:	7812      	ldrb	r2, [r2, #0]
 800186e:	0011      	movs	r1, r2
 8001870:	2203      	movs	r2, #3
 8001872:	400a      	ands	r2, r1
 8001874:	00d2      	lsls	r2, r2, #3
 8001876:	21ff      	movs	r1, #255	; 0xff
 8001878:	4091      	lsls	r1, r2
 800187a:	000a      	movs	r2, r1
 800187c:	43d2      	mvns	r2, r2
 800187e:	401a      	ands	r2, r3
 8001880:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	019b      	lsls	r3, r3, #6
 8001886:	22ff      	movs	r2, #255	; 0xff
 8001888:	401a      	ands	r2, r3
 800188a:	1dfb      	adds	r3, r7, #7
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	0018      	movs	r0, r3
 8001890:	2303      	movs	r3, #3
 8001892:	4003      	ands	r3, r0
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001898:	4809      	ldr	r0, [pc, #36]	; (80018c0 <__NVIC_SetPriority+0xd8>)
 800189a:	1dfb      	adds	r3, r7, #7
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	001c      	movs	r4, r3
 80018a0:	230f      	movs	r3, #15
 80018a2:	4023      	ands	r3, r4
 80018a4:	3b08      	subs	r3, #8
 80018a6:	089b      	lsrs	r3, r3, #2
 80018a8:	430a      	orrs	r2, r1
 80018aa:	3306      	adds	r3, #6
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	18c3      	adds	r3, r0, r3
 80018b0:	3304      	adds	r3, #4
 80018b2:	601a      	str	r2, [r3, #0]
}
 80018b4:	46c0      	nop			; (mov r8, r8)
 80018b6:	46bd      	mov	sp, r7
 80018b8:	b003      	add	sp, #12
 80018ba:	bd90      	pop	{r4, r7, pc}
 80018bc:	e000e100 	.word	0xe000e100
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	4a0c      	ldr	r2, [pc, #48]	; (8001904 <SysTick_Config+0x40>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d901      	bls.n	80018da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018d6:	2301      	movs	r3, #1
 80018d8:	e010      	b.n	80018fc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018da:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <SysTick_Config+0x44>)
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	3a01      	subs	r2, #1
 80018e0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018e2:	2301      	movs	r3, #1
 80018e4:	425b      	negs	r3, r3
 80018e6:	2103      	movs	r1, #3
 80018e8:	0018      	movs	r0, r3
 80018ea:	f7ff ff7d 	bl	80017e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ee:	4b06      	ldr	r3, [pc, #24]	; (8001908 <SysTick_Config+0x44>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <SysTick_Config+0x44>)
 80018f6:	2207      	movs	r2, #7
 80018f8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	0018      	movs	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	b002      	add	sp, #8
 8001902:	bd80      	pop	{r7, pc}
 8001904:	00ffffff 	.word	0x00ffffff
 8001908:	e000e010 	.word	0xe000e010

0800190c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
 8001916:	210f      	movs	r1, #15
 8001918:	187b      	adds	r3, r7, r1
 800191a:	1c02      	adds	r2, r0, #0
 800191c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	187b      	adds	r3, r7, r1
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	b25b      	sxtb	r3, r3
 8001926:	0011      	movs	r1, r2
 8001928:	0018      	movs	r0, r3
 800192a:	f7ff ff5d 	bl	80017e8 <__NVIC_SetPriority>
}
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	46bd      	mov	sp, r7
 8001932:	b004      	add	sp, #16
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	0002      	movs	r2, r0
 800193e:	1dfb      	adds	r3, r7, #7
 8001940:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001942:	1dfb      	adds	r3, r7, #7
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	b25b      	sxtb	r3, r3
 8001948:	0018      	movs	r0, r3
 800194a:	f7ff ff33 	bl	80017b4 <__NVIC_EnableIRQ>
}
 800194e:	46c0      	nop			; (mov r8, r8)
 8001950:	46bd      	mov	sp, r7
 8001952:	b002      	add	sp, #8
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	0018      	movs	r0, r3
 8001962:	f7ff ffaf 	bl	80018c4 <SysTick_Config>
 8001966:	0003      	movs	r3, r0
}
 8001968:	0018      	movs	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	b002      	add	sp, #8
 800196e:	bd80      	pop	{r7, pc}

08001970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800197e:	e149      	b.n	8001c14 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2101      	movs	r1, #1
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	4091      	lsls	r1, r2
 800198a:	000a      	movs	r2, r1
 800198c:	4013      	ands	r3, r2
 800198e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d100      	bne.n	8001998 <HAL_GPIO_Init+0x28>
 8001996:	e13a      	b.n	8001c0e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d00b      	beq.n	80019b8 <HAL_GPIO_Init+0x48>
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d007      	beq.n	80019b8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019ac:	2b11      	cmp	r3, #17
 80019ae:	d003      	beq.n	80019b8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b12      	cmp	r3, #18
 80019b6:	d130      	bne.n	8001a1a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	2203      	movs	r2, #3
 80019c4:	409a      	lsls	r2, r3
 80019c6:	0013      	movs	r3, r2
 80019c8:	43da      	mvns	r2, r3
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	4013      	ands	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	68da      	ldr	r2, [r3, #12]
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	409a      	lsls	r2, r3
 80019da:	0013      	movs	r3, r2
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019ee:	2201      	movs	r2, #1
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	409a      	lsls	r2, r3
 80019f4:	0013      	movs	r3, r2
 80019f6:	43da      	mvns	r2, r3
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	4013      	ands	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	091b      	lsrs	r3, r3, #4
 8001a04:	2201      	movs	r2, #1
 8001a06:	401a      	ands	r2, r3
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	409a      	lsls	r2, r3
 8001a0c:	0013      	movs	r3, r2
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	2203      	movs	r2, #3
 8001a26:	409a      	lsls	r2, r3
 8001a28:	0013      	movs	r3, r2
 8001a2a:	43da      	mvns	r2, r3
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	409a      	lsls	r2, r3
 8001a3c:	0013      	movs	r3, r2
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_Init+0xea>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b12      	cmp	r3, #18
 8001a58:	d123      	bne.n	8001aa2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	08da      	lsrs	r2, r3, #3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3208      	adds	r2, #8
 8001a62:	0092      	lsls	r2, r2, #2
 8001a64:	58d3      	ldr	r3, [r2, r3]
 8001a66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	2207      	movs	r2, #7
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	220f      	movs	r2, #15
 8001a72:	409a      	lsls	r2, r3
 8001a74:	0013      	movs	r3, r2
 8001a76:	43da      	mvns	r2, r3
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	691a      	ldr	r2, [r3, #16]
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	2107      	movs	r1, #7
 8001a86:	400b      	ands	r3, r1
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	409a      	lsls	r2, r3
 8001a8c:	0013      	movs	r3, r2
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	08da      	lsrs	r2, r3, #3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3208      	adds	r2, #8
 8001a9c:	0092      	lsls	r2, r2, #2
 8001a9e:	6939      	ldr	r1, [r7, #16]
 8001aa0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	2203      	movs	r2, #3
 8001aae:	409a      	lsls	r2, r3
 8001ab0:	0013      	movs	r3, r2
 8001ab2:	43da      	mvns	r2, r3
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2203      	movs	r2, #3
 8001ac0:	401a      	ands	r2, r3
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	0013      	movs	r3, r2
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	2380      	movs	r3, #128	; 0x80
 8001adc:	055b      	lsls	r3, r3, #21
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d100      	bne.n	8001ae4 <HAL_GPIO_Init+0x174>
 8001ae2:	e094      	b.n	8001c0e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae4:	4b51      	ldr	r3, [pc, #324]	; (8001c2c <HAL_GPIO_Init+0x2bc>)
 8001ae6:	699a      	ldr	r2, [r3, #24]
 8001ae8:	4b50      	ldr	r3, [pc, #320]	; (8001c2c <HAL_GPIO_Init+0x2bc>)
 8001aea:	2101      	movs	r1, #1
 8001aec:	430a      	orrs	r2, r1
 8001aee:	619a      	str	r2, [r3, #24]
 8001af0:	4b4e      	ldr	r3, [pc, #312]	; (8001c2c <HAL_GPIO_Init+0x2bc>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	2201      	movs	r2, #1
 8001af6:	4013      	ands	r3, r2
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001afc:	4a4c      	ldr	r2, [pc, #304]	; (8001c30 <HAL_GPIO_Init+0x2c0>)
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	089b      	lsrs	r3, r3, #2
 8001b02:	3302      	adds	r3, #2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	589b      	ldr	r3, [r3, r2]
 8001b08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	4013      	ands	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	220f      	movs	r2, #15
 8001b14:	409a      	lsls	r2, r3
 8001b16:	0013      	movs	r3, r2
 8001b18:	43da      	mvns	r2, r3
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	2390      	movs	r3, #144	; 0x90
 8001b24:	05db      	lsls	r3, r3, #23
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d00d      	beq.n	8001b46 <HAL_GPIO_Init+0x1d6>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a41      	ldr	r2, [pc, #260]	; (8001c34 <HAL_GPIO_Init+0x2c4>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d007      	beq.n	8001b42 <HAL_GPIO_Init+0x1d2>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a40      	ldr	r2, [pc, #256]	; (8001c38 <HAL_GPIO_Init+0x2c8>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d101      	bne.n	8001b3e <HAL_GPIO_Init+0x1ce>
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	e004      	b.n	8001b48 <HAL_GPIO_Init+0x1d8>
 8001b3e:	2305      	movs	r3, #5
 8001b40:	e002      	b.n	8001b48 <HAL_GPIO_Init+0x1d8>
 8001b42:	2301      	movs	r3, #1
 8001b44:	e000      	b.n	8001b48 <HAL_GPIO_Init+0x1d8>
 8001b46:	2300      	movs	r3, #0
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	2103      	movs	r1, #3
 8001b4c:	400a      	ands	r2, r1
 8001b4e:	0092      	lsls	r2, r2, #2
 8001b50:	4093      	lsls	r3, r2
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b58:	4935      	ldr	r1, [pc, #212]	; (8001c30 <HAL_GPIO_Init+0x2c0>)
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	089b      	lsrs	r3, r3, #2
 8001b5e:	3302      	adds	r3, #2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b66:	4b35      	ldr	r3, [pc, #212]	; (8001c3c <HAL_GPIO_Init+0x2cc>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	43da      	mvns	r2, r3
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	4013      	ands	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	025b      	lsls	r3, r3, #9
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d003      	beq.n	8001b8a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b8a:	4b2c      	ldr	r3, [pc, #176]	; (8001c3c <HAL_GPIO_Init+0x2cc>)
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001b90:	4b2a      	ldr	r3, [pc, #168]	; (8001c3c <HAL_GPIO_Init+0x2cc>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	43da      	mvns	r2, r3
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	2380      	movs	r3, #128	; 0x80
 8001ba6:	029b      	lsls	r3, r3, #10
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d003      	beq.n	8001bb4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bb4:	4b21      	ldr	r3, [pc, #132]	; (8001c3c <HAL_GPIO_Init+0x2cc>)
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bba:	4b20      	ldr	r3, [pc, #128]	; (8001c3c <HAL_GPIO_Init+0x2cc>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	43da      	mvns	r2, r3
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685a      	ldr	r2, [r3, #4]
 8001bce:	2380      	movs	r3, #128	; 0x80
 8001bd0:	035b      	lsls	r3, r3, #13
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001bde:	4b17      	ldr	r3, [pc, #92]	; (8001c3c <HAL_GPIO_Init+0x2cc>)
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001be4:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <HAL_GPIO_Init+0x2cc>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	43da      	mvns	r2, r3
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	039b      	lsls	r3, r3, #14
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d003      	beq.n	8001c08 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <HAL_GPIO_Init+0x2cc>)
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	3301      	adds	r3, #1
 8001c12:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	40da      	lsrs	r2, r3
 8001c1c:	1e13      	subs	r3, r2, #0
 8001c1e:	d000      	beq.n	8001c22 <HAL_GPIO_Init+0x2b2>
 8001c20:	e6ae      	b.n	8001980 <HAL_GPIO_Init+0x10>
  } 
}
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	46bd      	mov	sp, r7
 8001c26:	b006      	add	sp, #24
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40010000 	.word	0x40010000
 8001c34:	48000400 	.word	0x48000400
 8001c38:	48000800 	.word	0x48000800
 8001c3c:	40010400 	.word	0x40010400

08001c40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d102      	bne.n	8001c54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	f000 fb76 	bl	8002340 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d100      	bne.n	8001c60 <HAL_RCC_OscConfig+0x20>
 8001c5e:	e08e      	b.n	8001d7e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c60:	4bc5      	ldr	r3, [pc, #788]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	220c      	movs	r2, #12
 8001c66:	4013      	ands	r3, r2
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d00e      	beq.n	8001c8a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c6c:	4bc2      	ldr	r3, [pc, #776]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	220c      	movs	r2, #12
 8001c72:	4013      	ands	r3, r2
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d117      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x68>
 8001c78:	4bbf      	ldr	r3, [pc, #764]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	23c0      	movs	r3, #192	; 0xc0
 8001c7e:	025b      	lsls	r3, r3, #9
 8001c80:	401a      	ands	r2, r3
 8001c82:	2380      	movs	r3, #128	; 0x80
 8001c84:	025b      	lsls	r3, r3, #9
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d10e      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8a:	4bbb      	ldr	r3, [pc, #748]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	2380      	movs	r3, #128	; 0x80
 8001c90:	029b      	lsls	r3, r3, #10
 8001c92:	4013      	ands	r3, r2
 8001c94:	d100      	bne.n	8001c98 <HAL_RCC_OscConfig+0x58>
 8001c96:	e071      	b.n	8001d7c <HAL_RCC_OscConfig+0x13c>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d000      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x62>
 8001ca0:	e06c      	b.n	8001d7c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	f000 fb4c 	bl	8002340 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d107      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x80>
 8001cb0:	4bb1      	ldr	r3, [pc, #708]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	4bb0      	ldr	r3, [pc, #704]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001cb6:	2180      	movs	r1, #128	; 0x80
 8001cb8:	0249      	lsls	r1, r1, #9
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	e02f      	b.n	8001d20 <HAL_RCC_OscConfig+0xe0>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d10c      	bne.n	8001ce2 <HAL_RCC_OscConfig+0xa2>
 8001cc8:	4bab      	ldr	r3, [pc, #684]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	4baa      	ldr	r3, [pc, #680]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001cce:	49ab      	ldr	r1, [pc, #684]	; (8001f7c <HAL_RCC_OscConfig+0x33c>)
 8001cd0:	400a      	ands	r2, r1
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	4ba8      	ldr	r3, [pc, #672]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4ba7      	ldr	r3, [pc, #668]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001cda:	49a9      	ldr	r1, [pc, #676]	; (8001f80 <HAL_RCC_OscConfig+0x340>)
 8001cdc:	400a      	ands	r2, r1
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	e01e      	b.n	8001d20 <HAL_RCC_OscConfig+0xe0>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b05      	cmp	r3, #5
 8001ce8:	d10e      	bne.n	8001d08 <HAL_RCC_OscConfig+0xc8>
 8001cea:	4ba3      	ldr	r3, [pc, #652]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	4ba2      	ldr	r3, [pc, #648]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001cf0:	2180      	movs	r1, #128	; 0x80
 8001cf2:	02c9      	lsls	r1, r1, #11
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	4b9f      	ldr	r3, [pc, #636]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b9e      	ldr	r3, [pc, #632]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001cfe:	2180      	movs	r1, #128	; 0x80
 8001d00:	0249      	lsls	r1, r1, #9
 8001d02:	430a      	orrs	r2, r1
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	e00b      	b.n	8001d20 <HAL_RCC_OscConfig+0xe0>
 8001d08:	4b9b      	ldr	r3, [pc, #620]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b9a      	ldr	r3, [pc, #616]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001d0e:	499b      	ldr	r1, [pc, #620]	; (8001f7c <HAL_RCC_OscConfig+0x33c>)
 8001d10:	400a      	ands	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	4b98      	ldr	r3, [pc, #608]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4b97      	ldr	r3, [pc, #604]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001d1a:	4999      	ldr	r1, [pc, #612]	; (8001f80 <HAL_RCC_OscConfig+0x340>)
 8001d1c:	400a      	ands	r2, r1
 8001d1e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d014      	beq.n	8001d52 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d28:	f7fe fea4 	bl	8000a74 <HAL_GetTick>
 8001d2c:	0003      	movs	r3, r0
 8001d2e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d32:	f7fe fe9f 	bl	8000a74 <HAL_GetTick>
 8001d36:	0002      	movs	r2, r0
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b64      	cmp	r3, #100	; 0x64
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e2fd      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d44:	4b8c      	ldr	r3, [pc, #560]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	2380      	movs	r3, #128	; 0x80
 8001d4a:	029b      	lsls	r3, r3, #10
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d0f0      	beq.n	8001d32 <HAL_RCC_OscConfig+0xf2>
 8001d50:	e015      	b.n	8001d7e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d52:	f7fe fe8f 	bl	8000a74 <HAL_GetTick>
 8001d56:	0003      	movs	r3, r0
 8001d58:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d5c:	f7fe fe8a 	bl	8000a74 <HAL_GetTick>
 8001d60:	0002      	movs	r2, r0
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b64      	cmp	r3, #100	; 0x64
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e2e8      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d6e:	4b82      	ldr	r3, [pc, #520]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	2380      	movs	r3, #128	; 0x80
 8001d74:	029b      	lsls	r3, r3, #10
 8001d76:	4013      	ands	r3, r2
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0x11c>
 8001d7a:	e000      	b.n	8001d7e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d7c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2202      	movs	r2, #2
 8001d84:	4013      	ands	r3, r2
 8001d86:	d100      	bne.n	8001d8a <HAL_RCC_OscConfig+0x14a>
 8001d88:	e06c      	b.n	8001e64 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d8a:	4b7b      	ldr	r3, [pc, #492]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	220c      	movs	r2, #12
 8001d90:	4013      	ands	r3, r2
 8001d92:	d00e      	beq.n	8001db2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d94:	4b78      	ldr	r3, [pc, #480]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	220c      	movs	r2, #12
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	d11f      	bne.n	8001de0 <HAL_RCC_OscConfig+0x1a0>
 8001da0:	4b75      	ldr	r3, [pc, #468]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	23c0      	movs	r3, #192	; 0xc0
 8001da6:	025b      	lsls	r3, r3, #9
 8001da8:	401a      	ands	r2, r3
 8001daa:	2380      	movs	r3, #128	; 0x80
 8001dac:	021b      	lsls	r3, r3, #8
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d116      	bne.n	8001de0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001db2:	4b71      	ldr	r3, [pc, #452]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2202      	movs	r2, #2
 8001db8:	4013      	ands	r3, r2
 8001dba:	d005      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x188>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d001      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e2bb      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc8:	4b6b      	ldr	r3, [pc, #428]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	22f8      	movs	r2, #248	; 0xf8
 8001dce:	4393      	bics	r3, r2
 8001dd0:	0019      	movs	r1, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	00da      	lsls	r2, r3, #3
 8001dd8:	4b67      	ldr	r3, [pc, #412]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dde:	e041      	b.n	8001e64 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d024      	beq.n	8001e32 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001de8:	4b63      	ldr	r3, [pc, #396]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4b62      	ldr	r3, [pc, #392]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001dee:	2101      	movs	r1, #1
 8001df0:	430a      	orrs	r2, r1
 8001df2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df4:	f7fe fe3e 	bl	8000a74 <HAL_GetTick>
 8001df8:	0003      	movs	r3, r0
 8001dfa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dfe:	f7fe fe39 	bl	8000a74 <HAL_GetTick>
 8001e02:	0002      	movs	r2, r0
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e297      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e10:	4b59      	ldr	r3, [pc, #356]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2202      	movs	r2, #2
 8001e16:	4013      	ands	r3, r2
 8001e18:	d0f1      	beq.n	8001dfe <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1a:	4b57      	ldr	r3, [pc, #348]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	22f8      	movs	r2, #248	; 0xf8
 8001e20:	4393      	bics	r3, r2
 8001e22:	0019      	movs	r1, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	00da      	lsls	r2, r3, #3
 8001e2a:	4b53      	ldr	r3, [pc, #332]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	e018      	b.n	8001e64 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e32:	4b51      	ldr	r3, [pc, #324]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	4b50      	ldr	r3, [pc, #320]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001e38:	2101      	movs	r1, #1
 8001e3a:	438a      	bics	r2, r1
 8001e3c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3e:	f7fe fe19 	bl	8000a74 <HAL_GetTick>
 8001e42:	0003      	movs	r3, r0
 8001e44:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e48:	f7fe fe14 	bl	8000a74 <HAL_GetTick>
 8001e4c:	0002      	movs	r2, r0
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e272      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e5a:	4b47      	ldr	r3, [pc, #284]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	4013      	ands	r3, r2
 8001e62:	d1f1      	bne.n	8001e48 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2208      	movs	r2, #8
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d036      	beq.n	8001edc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d019      	beq.n	8001eaa <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e76:	4b40      	ldr	r3, [pc, #256]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001e78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e7a:	4b3f      	ldr	r3, [pc, #252]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e82:	f7fe fdf7 	bl	8000a74 <HAL_GetTick>
 8001e86:	0003      	movs	r3, r0
 8001e88:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e8c:	f7fe fdf2 	bl	8000a74 <HAL_GetTick>
 8001e90:	0002      	movs	r2, r0
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e250      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9e:	4b36      	ldr	r3, [pc, #216]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d0f1      	beq.n	8001e8c <HAL_RCC_OscConfig+0x24c>
 8001ea8:	e018      	b.n	8001edc <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eaa:	4b33      	ldr	r3, [pc, #204]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001eac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eae:	4b32      	ldr	r3, [pc, #200]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	438a      	bics	r2, r1
 8001eb4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb6:	f7fe fddd 	bl	8000a74 <HAL_GetTick>
 8001eba:	0003      	movs	r3, r0
 8001ebc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ec0:	f7fe fdd8 	bl	8000a74 <HAL_GetTick>
 8001ec4:	0002      	movs	r2, r0
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e236      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed2:	4b29      	ldr	r3, [pc, #164]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	4013      	ands	r3, r2
 8001eda:	d1f1      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2204      	movs	r2, #4
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d100      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x2a8>
 8001ee6:	e0b5      	b.n	8002054 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ee8:	231f      	movs	r3, #31
 8001eea:	18fb      	adds	r3, r7, r3
 8001eec:	2200      	movs	r2, #0
 8001eee:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ef0:	4b21      	ldr	r3, [pc, #132]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001ef2:	69da      	ldr	r2, [r3, #28]
 8001ef4:	2380      	movs	r3, #128	; 0x80
 8001ef6:	055b      	lsls	r3, r3, #21
 8001ef8:	4013      	ands	r3, r2
 8001efa:	d111      	bne.n	8001f20 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001efc:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001efe:	69da      	ldr	r2, [r3, #28]
 8001f00:	4b1d      	ldr	r3, [pc, #116]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001f02:	2180      	movs	r1, #128	; 0x80
 8001f04:	0549      	lsls	r1, r1, #21
 8001f06:	430a      	orrs	r2, r1
 8001f08:	61da      	str	r2, [r3, #28]
 8001f0a:	4b1b      	ldr	r3, [pc, #108]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001f0c:	69da      	ldr	r2, [r3, #28]
 8001f0e:	2380      	movs	r3, #128	; 0x80
 8001f10:	055b      	lsls	r3, r3, #21
 8001f12:	4013      	ands	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f18:	231f      	movs	r3, #31
 8001f1a:	18fb      	adds	r3, r7, r3
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f20:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <HAL_RCC_OscConfig+0x344>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d11a      	bne.n	8001f62 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f2c:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <HAL_RCC_OscConfig+0x344>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <HAL_RCC_OscConfig+0x344>)
 8001f32:	2180      	movs	r1, #128	; 0x80
 8001f34:	0049      	lsls	r1, r1, #1
 8001f36:	430a      	orrs	r2, r1
 8001f38:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f3a:	f7fe fd9b 	bl	8000a74 <HAL_GetTick>
 8001f3e:	0003      	movs	r3, r0
 8001f40:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f44:	f7fe fd96 	bl	8000a74 <HAL_GetTick>
 8001f48:	0002      	movs	r2, r0
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b64      	cmp	r3, #100	; 0x64
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e1f4      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f56:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <HAL_RCC_OscConfig+0x344>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	2380      	movs	r3, #128	; 0x80
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d0f0      	beq.n	8001f44 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d10e      	bne.n	8001f88 <HAL_RCC_OscConfig+0x348>
 8001f6a:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001f6c:	6a1a      	ldr	r2, [r3, #32]
 8001f6e:	4b02      	ldr	r3, [pc, #8]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001f70:	2101      	movs	r1, #1
 8001f72:	430a      	orrs	r2, r1
 8001f74:	621a      	str	r2, [r3, #32]
 8001f76:	e035      	b.n	8001fe4 <HAL_RCC_OscConfig+0x3a4>
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	fffeffff 	.word	0xfffeffff
 8001f80:	fffbffff 	.word	0xfffbffff
 8001f84:	40007000 	.word	0x40007000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10c      	bne.n	8001faa <HAL_RCC_OscConfig+0x36a>
 8001f90:	4bca      	ldr	r3, [pc, #808]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8001f92:	6a1a      	ldr	r2, [r3, #32]
 8001f94:	4bc9      	ldr	r3, [pc, #804]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8001f96:	2101      	movs	r1, #1
 8001f98:	438a      	bics	r2, r1
 8001f9a:	621a      	str	r2, [r3, #32]
 8001f9c:	4bc7      	ldr	r3, [pc, #796]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8001f9e:	6a1a      	ldr	r2, [r3, #32]
 8001fa0:	4bc6      	ldr	r3, [pc, #792]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8001fa2:	2104      	movs	r1, #4
 8001fa4:	438a      	bics	r2, r1
 8001fa6:	621a      	str	r2, [r3, #32]
 8001fa8:	e01c      	b.n	8001fe4 <HAL_RCC_OscConfig+0x3a4>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	2b05      	cmp	r3, #5
 8001fb0:	d10c      	bne.n	8001fcc <HAL_RCC_OscConfig+0x38c>
 8001fb2:	4bc2      	ldr	r3, [pc, #776]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8001fb4:	6a1a      	ldr	r2, [r3, #32]
 8001fb6:	4bc1      	ldr	r3, [pc, #772]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8001fb8:	2104      	movs	r1, #4
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	621a      	str	r2, [r3, #32]
 8001fbe:	4bbf      	ldr	r3, [pc, #764]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8001fc0:	6a1a      	ldr	r2, [r3, #32]
 8001fc2:	4bbe      	ldr	r3, [pc, #760]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	621a      	str	r2, [r3, #32]
 8001fca:	e00b      	b.n	8001fe4 <HAL_RCC_OscConfig+0x3a4>
 8001fcc:	4bbb      	ldr	r3, [pc, #748]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8001fce:	6a1a      	ldr	r2, [r3, #32]
 8001fd0:	4bba      	ldr	r3, [pc, #744]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	438a      	bics	r2, r1
 8001fd6:	621a      	str	r2, [r3, #32]
 8001fd8:	4bb8      	ldr	r3, [pc, #736]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8001fda:	6a1a      	ldr	r2, [r3, #32]
 8001fdc:	4bb7      	ldr	r3, [pc, #732]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8001fde:	2104      	movs	r1, #4
 8001fe0:	438a      	bics	r2, r1
 8001fe2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d014      	beq.n	8002016 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fec:	f7fe fd42 	bl	8000a74 <HAL_GetTick>
 8001ff0:	0003      	movs	r3, r0
 8001ff2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff4:	e009      	b.n	800200a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ff6:	f7fe fd3d 	bl	8000a74 <HAL_GetTick>
 8001ffa:	0002      	movs	r2, r0
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	4aaf      	ldr	r2, [pc, #700]	; (80022c0 <HAL_RCC_OscConfig+0x680>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e19a      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800200a:	4bac      	ldr	r3, [pc, #688]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	2202      	movs	r2, #2
 8002010:	4013      	ands	r3, r2
 8002012:	d0f0      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x3b6>
 8002014:	e013      	b.n	800203e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002016:	f7fe fd2d 	bl	8000a74 <HAL_GetTick>
 800201a:	0003      	movs	r3, r0
 800201c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800201e:	e009      	b.n	8002034 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002020:	f7fe fd28 	bl	8000a74 <HAL_GetTick>
 8002024:	0002      	movs	r2, r0
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	4aa5      	ldr	r2, [pc, #660]	; (80022c0 <HAL_RCC_OscConfig+0x680>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e185      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002034:	4ba1      	ldr	r3, [pc, #644]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	2202      	movs	r2, #2
 800203a:	4013      	ands	r3, r2
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800203e:	231f      	movs	r3, #31
 8002040:	18fb      	adds	r3, r7, r3
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d105      	bne.n	8002054 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002048:	4b9c      	ldr	r3, [pc, #624]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 800204a:	69da      	ldr	r2, [r3, #28]
 800204c:	4b9b      	ldr	r3, [pc, #620]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 800204e:	499d      	ldr	r1, [pc, #628]	; (80022c4 <HAL_RCC_OscConfig+0x684>)
 8002050:	400a      	ands	r2, r1
 8002052:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2210      	movs	r2, #16
 800205a:	4013      	ands	r3, r2
 800205c:	d063      	beq.n	8002126 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d12a      	bne.n	80020bc <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002066:	4b95      	ldr	r3, [pc, #596]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8002068:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800206a:	4b94      	ldr	r3, [pc, #592]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 800206c:	2104      	movs	r1, #4
 800206e:	430a      	orrs	r2, r1
 8002070:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002072:	4b92      	ldr	r3, [pc, #584]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8002074:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002076:	4b91      	ldr	r3, [pc, #580]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8002078:	2101      	movs	r1, #1
 800207a:	430a      	orrs	r2, r1
 800207c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207e:	f7fe fcf9 	bl	8000a74 <HAL_GetTick>
 8002082:	0003      	movs	r3, r0
 8002084:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002088:	f7fe fcf4 	bl	8000a74 <HAL_GetTick>
 800208c:	0002      	movs	r2, r0
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e152      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800209a:	4b88      	ldr	r3, [pc, #544]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 800209c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800209e:	2202      	movs	r2, #2
 80020a0:	4013      	ands	r3, r2
 80020a2:	d0f1      	beq.n	8002088 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020a4:	4b85      	ldr	r3, [pc, #532]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 80020a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a8:	22f8      	movs	r2, #248	; 0xf8
 80020aa:	4393      	bics	r3, r2
 80020ac:	0019      	movs	r1, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	00da      	lsls	r2, r3, #3
 80020b4:	4b81      	ldr	r3, [pc, #516]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 80020b6:	430a      	orrs	r2, r1
 80020b8:	635a      	str	r2, [r3, #52]	; 0x34
 80020ba:	e034      	b.n	8002126 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	3305      	adds	r3, #5
 80020c2:	d111      	bne.n	80020e8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80020c4:	4b7d      	ldr	r3, [pc, #500]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 80020c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020c8:	4b7c      	ldr	r3, [pc, #496]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 80020ca:	2104      	movs	r1, #4
 80020cc:	438a      	bics	r2, r1
 80020ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020d0:	4b7a      	ldr	r3, [pc, #488]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 80020d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d4:	22f8      	movs	r2, #248	; 0xf8
 80020d6:	4393      	bics	r3, r2
 80020d8:	0019      	movs	r1, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	00da      	lsls	r2, r3, #3
 80020e0:	4b76      	ldr	r3, [pc, #472]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 80020e2:	430a      	orrs	r2, r1
 80020e4:	635a      	str	r2, [r3, #52]	; 0x34
 80020e6:	e01e      	b.n	8002126 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80020e8:	4b74      	ldr	r3, [pc, #464]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 80020ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020ec:	4b73      	ldr	r3, [pc, #460]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 80020ee:	2104      	movs	r1, #4
 80020f0:	430a      	orrs	r2, r1
 80020f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80020f4:	4b71      	ldr	r3, [pc, #452]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 80020f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020f8:	4b70      	ldr	r3, [pc, #448]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 80020fa:	2101      	movs	r1, #1
 80020fc:	438a      	bics	r2, r1
 80020fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002100:	f7fe fcb8 	bl	8000a74 <HAL_GetTick>
 8002104:	0003      	movs	r3, r0
 8002106:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800210a:	f7fe fcb3 	bl	8000a74 <HAL_GetTick>
 800210e:	0002      	movs	r2, r0
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e111      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800211c:	4b67      	ldr	r3, [pc, #412]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 800211e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002120:	2202      	movs	r2, #2
 8002122:	4013      	ands	r3, r2
 8002124:	d1f1      	bne.n	800210a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2220      	movs	r2, #32
 800212c:	4013      	ands	r3, r2
 800212e:	d05c      	beq.n	80021ea <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002130:	4b62      	ldr	r3, [pc, #392]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	220c      	movs	r2, #12
 8002136:	4013      	ands	r3, r2
 8002138:	2b0c      	cmp	r3, #12
 800213a:	d00e      	beq.n	800215a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800213c:	4b5f      	ldr	r3, [pc, #380]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	220c      	movs	r2, #12
 8002142:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002144:	2b08      	cmp	r3, #8
 8002146:	d114      	bne.n	8002172 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002148:	4b5c      	ldr	r3, [pc, #368]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	23c0      	movs	r3, #192	; 0xc0
 800214e:	025b      	lsls	r3, r3, #9
 8002150:	401a      	ands	r2, r3
 8002152:	23c0      	movs	r3, #192	; 0xc0
 8002154:	025b      	lsls	r3, r3, #9
 8002156:	429a      	cmp	r2, r3
 8002158:	d10b      	bne.n	8002172 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800215a:	4b58      	ldr	r3, [pc, #352]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 800215c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800215e:	2380      	movs	r3, #128	; 0x80
 8002160:	025b      	lsls	r3, r3, #9
 8002162:	4013      	ands	r3, r2
 8002164:	d040      	beq.n	80021e8 <HAL_RCC_OscConfig+0x5a8>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d03c      	beq.n	80021e8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e0e6      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d01b      	beq.n	80021b2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800217a:	4b50      	ldr	r3, [pc, #320]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 800217c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800217e:	4b4f      	ldr	r3, [pc, #316]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8002180:	2180      	movs	r1, #128	; 0x80
 8002182:	0249      	lsls	r1, r1, #9
 8002184:	430a      	orrs	r2, r1
 8002186:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002188:	f7fe fc74 	bl	8000a74 <HAL_GetTick>
 800218c:	0003      	movs	r3, r0
 800218e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002192:	f7fe fc6f 	bl	8000a74 <HAL_GetTick>
 8002196:	0002      	movs	r2, r0
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e0cd      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80021a4:	4b45      	ldr	r3, [pc, #276]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 80021a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021a8:	2380      	movs	r3, #128	; 0x80
 80021aa:	025b      	lsls	r3, r3, #9
 80021ac:	4013      	ands	r3, r2
 80021ae:	d0f0      	beq.n	8002192 <HAL_RCC_OscConfig+0x552>
 80021b0:	e01b      	b.n	80021ea <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80021b2:	4b42      	ldr	r3, [pc, #264]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 80021b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021b6:	4b41      	ldr	r3, [pc, #260]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 80021b8:	4943      	ldr	r1, [pc, #268]	; (80022c8 <HAL_RCC_OscConfig+0x688>)
 80021ba:	400a      	ands	r2, r1
 80021bc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021be:	f7fe fc59 	bl	8000a74 <HAL_GetTick>
 80021c2:	0003      	movs	r3, r0
 80021c4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021c8:	f7fe fc54 	bl	8000a74 <HAL_GetTick>
 80021cc:	0002      	movs	r2, r0
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e0b2      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80021da:	4b38      	ldr	r3, [pc, #224]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 80021dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021de:	2380      	movs	r3, #128	; 0x80
 80021e0:	025b      	lsls	r3, r3, #9
 80021e2:	4013      	ands	r3, r2
 80021e4:	d1f0      	bne.n	80021c8 <HAL_RCC_OscConfig+0x588>
 80021e6:	e000      	b.n	80021ea <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80021e8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d100      	bne.n	80021f4 <HAL_RCC_OscConfig+0x5b4>
 80021f2:	e0a4      	b.n	800233e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021f4:	4b31      	ldr	r3, [pc, #196]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	220c      	movs	r2, #12
 80021fa:	4013      	ands	r3, r2
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	d100      	bne.n	8002202 <HAL_RCC_OscConfig+0x5c2>
 8002200:	e078      	b.n	80022f4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002206:	2b02      	cmp	r3, #2
 8002208:	d14c      	bne.n	80022a4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800220a:	4b2c      	ldr	r3, [pc, #176]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	4b2b      	ldr	r3, [pc, #172]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8002210:	492e      	ldr	r1, [pc, #184]	; (80022cc <HAL_RCC_OscConfig+0x68c>)
 8002212:	400a      	ands	r2, r1
 8002214:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002216:	f7fe fc2d 	bl	8000a74 <HAL_GetTick>
 800221a:	0003      	movs	r3, r0
 800221c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002220:	f7fe fc28 	bl	8000a74 <HAL_GetTick>
 8002224:	0002      	movs	r2, r0
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e086      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002232:	4b22      	ldr	r3, [pc, #136]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	2380      	movs	r3, #128	; 0x80
 8002238:	049b      	lsls	r3, r3, #18
 800223a:	4013      	ands	r3, r2
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800223e:	4b1f      	ldr	r3, [pc, #124]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8002240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002242:	220f      	movs	r2, #15
 8002244:	4393      	bics	r3, r2
 8002246:	0019      	movs	r1, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800224c:	4b1b      	ldr	r3, [pc, #108]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 800224e:	430a      	orrs	r2, r1
 8002250:	62da      	str	r2, [r3, #44]	; 0x2c
 8002252:	4b1a      	ldr	r3, [pc, #104]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	4a1e      	ldr	r2, [pc, #120]	; (80022d0 <HAL_RCC_OscConfig+0x690>)
 8002258:	4013      	ands	r3, r2
 800225a:	0019      	movs	r1, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002264:	431a      	orrs	r2, r3
 8002266:	4b15      	ldr	r3, [pc, #84]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8002268:	430a      	orrs	r2, r1
 800226a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800226c:	4b13      	ldr	r3, [pc, #76]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	4b12      	ldr	r3, [pc, #72]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8002272:	2180      	movs	r1, #128	; 0x80
 8002274:	0449      	lsls	r1, r1, #17
 8002276:	430a      	orrs	r2, r1
 8002278:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227a:	f7fe fbfb 	bl	8000a74 <HAL_GetTick>
 800227e:	0003      	movs	r3, r0
 8002280:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002284:	f7fe fbf6 	bl	8000a74 <HAL_GetTick>
 8002288:	0002      	movs	r2, r0
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e054      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	2380      	movs	r3, #128	; 0x80
 800229c:	049b      	lsls	r3, r3, #18
 800229e:	4013      	ands	r3, r2
 80022a0:	d0f0      	beq.n	8002284 <HAL_RCC_OscConfig+0x644>
 80022a2:	e04c      	b.n	800233e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a4:	4b05      	ldr	r3, [pc, #20]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	4b04      	ldr	r3, [pc, #16]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 80022aa:	4908      	ldr	r1, [pc, #32]	; (80022cc <HAL_RCC_OscConfig+0x68c>)
 80022ac:	400a      	ands	r2, r1
 80022ae:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7fe fbe0 	bl	8000a74 <HAL_GetTick>
 80022b4:	0003      	movs	r3, r0
 80022b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b8:	e015      	b.n	80022e6 <HAL_RCC_OscConfig+0x6a6>
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	40021000 	.word	0x40021000
 80022c0:	00001388 	.word	0x00001388
 80022c4:	efffffff 	.word	0xefffffff
 80022c8:	fffeffff 	.word	0xfffeffff
 80022cc:	feffffff 	.word	0xfeffffff
 80022d0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022d4:	f7fe fbce 	bl	8000a74 <HAL_GetTick>
 80022d8:	0002      	movs	r2, r0
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e02c      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e6:	4b18      	ldr	r3, [pc, #96]	; (8002348 <HAL_RCC_OscConfig+0x708>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	2380      	movs	r3, #128	; 0x80
 80022ec:	049b      	lsls	r3, r3, #18
 80022ee:	4013      	ands	r3, r2
 80022f0:	d1f0      	bne.n	80022d4 <HAL_RCC_OscConfig+0x694>
 80022f2:	e024      	b.n	800233e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e01f      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002300:	4b11      	ldr	r3, [pc, #68]	; (8002348 <HAL_RCC_OscConfig+0x708>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002306:	4b10      	ldr	r3, [pc, #64]	; (8002348 <HAL_RCC_OscConfig+0x708>)
 8002308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	23c0      	movs	r3, #192	; 0xc0
 8002310:	025b      	lsls	r3, r3, #9
 8002312:	401a      	ands	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002318:	429a      	cmp	r2, r3
 800231a:	d10e      	bne.n	800233a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	220f      	movs	r2, #15
 8002320:	401a      	ands	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002326:	429a      	cmp	r2, r3
 8002328:	d107      	bne.n	800233a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	23f0      	movs	r3, #240	; 0xf0
 800232e:	039b      	lsls	r3, r3, #14
 8002330:	401a      	ands	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002336:	429a      	cmp	r2, r3
 8002338:	d001      	beq.n	800233e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	0018      	movs	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	b008      	add	sp, #32
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40021000 	.word	0x40021000

0800234c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0bf      	b.n	80024e0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002360:	4b61      	ldr	r3, [pc, #388]	; (80024e8 <HAL_RCC_ClockConfig+0x19c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2201      	movs	r2, #1
 8002366:	4013      	ands	r3, r2
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	d911      	bls.n	8002392 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236e:	4b5e      	ldr	r3, [pc, #376]	; (80024e8 <HAL_RCC_ClockConfig+0x19c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2201      	movs	r2, #1
 8002374:	4393      	bics	r3, r2
 8002376:	0019      	movs	r1, r3
 8002378:	4b5b      	ldr	r3, [pc, #364]	; (80024e8 <HAL_RCC_ClockConfig+0x19c>)
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002380:	4b59      	ldr	r3, [pc, #356]	; (80024e8 <HAL_RCC_ClockConfig+0x19c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2201      	movs	r2, #1
 8002386:	4013      	ands	r3, r2
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	429a      	cmp	r2, r3
 800238c:	d001      	beq.n	8002392 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e0a6      	b.n	80024e0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2202      	movs	r2, #2
 8002398:	4013      	ands	r3, r2
 800239a:	d015      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2204      	movs	r2, #4
 80023a2:	4013      	ands	r3, r2
 80023a4:	d006      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80023a6:	4b51      	ldr	r3, [pc, #324]	; (80024ec <HAL_RCC_ClockConfig+0x1a0>)
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	4b50      	ldr	r3, [pc, #320]	; (80024ec <HAL_RCC_ClockConfig+0x1a0>)
 80023ac:	21e0      	movs	r1, #224	; 0xe0
 80023ae:	00c9      	lsls	r1, r1, #3
 80023b0:	430a      	orrs	r2, r1
 80023b2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b4:	4b4d      	ldr	r3, [pc, #308]	; (80024ec <HAL_RCC_ClockConfig+0x1a0>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	22f0      	movs	r2, #240	; 0xf0
 80023ba:	4393      	bics	r3, r2
 80023bc:	0019      	movs	r1, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	4b4a      	ldr	r3, [pc, #296]	; (80024ec <HAL_RCC_ClockConfig+0x1a0>)
 80023c4:	430a      	orrs	r2, r1
 80023c6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2201      	movs	r2, #1
 80023ce:	4013      	ands	r3, r2
 80023d0:	d04c      	beq.n	800246c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d107      	bne.n	80023ea <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023da:	4b44      	ldr	r3, [pc, #272]	; (80024ec <HAL_RCC_ClockConfig+0x1a0>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	029b      	lsls	r3, r3, #10
 80023e2:	4013      	ands	r3, r2
 80023e4:	d120      	bne.n	8002428 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e07a      	b.n	80024e0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d107      	bne.n	8002402 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f2:	4b3e      	ldr	r3, [pc, #248]	; (80024ec <HAL_RCC_ClockConfig+0x1a0>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	2380      	movs	r3, #128	; 0x80
 80023f8:	049b      	lsls	r3, r3, #18
 80023fa:	4013      	ands	r3, r2
 80023fc:	d114      	bne.n	8002428 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e06e      	b.n	80024e0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b03      	cmp	r3, #3
 8002408:	d107      	bne.n	800241a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800240a:	4b38      	ldr	r3, [pc, #224]	; (80024ec <HAL_RCC_ClockConfig+0x1a0>)
 800240c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800240e:	2380      	movs	r3, #128	; 0x80
 8002410:	025b      	lsls	r3, r3, #9
 8002412:	4013      	ands	r3, r2
 8002414:	d108      	bne.n	8002428 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e062      	b.n	80024e0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241a:	4b34      	ldr	r3, [pc, #208]	; (80024ec <HAL_RCC_ClockConfig+0x1a0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2202      	movs	r2, #2
 8002420:	4013      	ands	r3, r2
 8002422:	d101      	bne.n	8002428 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e05b      	b.n	80024e0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002428:	4b30      	ldr	r3, [pc, #192]	; (80024ec <HAL_RCC_ClockConfig+0x1a0>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2203      	movs	r2, #3
 800242e:	4393      	bics	r3, r2
 8002430:	0019      	movs	r1, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	4b2d      	ldr	r3, [pc, #180]	; (80024ec <HAL_RCC_ClockConfig+0x1a0>)
 8002438:	430a      	orrs	r2, r1
 800243a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800243c:	f7fe fb1a 	bl	8000a74 <HAL_GetTick>
 8002440:	0003      	movs	r3, r0
 8002442:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002444:	e009      	b.n	800245a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002446:	f7fe fb15 	bl	8000a74 <HAL_GetTick>
 800244a:	0002      	movs	r2, r0
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	4a27      	ldr	r2, [pc, #156]	; (80024f0 <HAL_RCC_ClockConfig+0x1a4>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d901      	bls.n	800245a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e042      	b.n	80024e0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245a:	4b24      	ldr	r3, [pc, #144]	; (80024ec <HAL_RCC_ClockConfig+0x1a0>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	220c      	movs	r2, #12
 8002460:	401a      	ands	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	429a      	cmp	r2, r3
 800246a:	d1ec      	bne.n	8002446 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800246c:	4b1e      	ldr	r3, [pc, #120]	; (80024e8 <HAL_RCC_ClockConfig+0x19c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2201      	movs	r2, #1
 8002472:	4013      	ands	r3, r2
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d211      	bcs.n	800249e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247a:	4b1b      	ldr	r3, [pc, #108]	; (80024e8 <HAL_RCC_ClockConfig+0x19c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2201      	movs	r2, #1
 8002480:	4393      	bics	r3, r2
 8002482:	0019      	movs	r1, r3
 8002484:	4b18      	ldr	r3, [pc, #96]	; (80024e8 <HAL_RCC_ClockConfig+0x19c>)
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800248c:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <HAL_RCC_ClockConfig+0x19c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2201      	movs	r2, #1
 8002492:	4013      	ands	r3, r2
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d001      	beq.n	800249e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e020      	b.n	80024e0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2204      	movs	r2, #4
 80024a4:	4013      	ands	r3, r2
 80024a6:	d009      	beq.n	80024bc <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80024a8:	4b10      	ldr	r3, [pc, #64]	; (80024ec <HAL_RCC_ClockConfig+0x1a0>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	4a11      	ldr	r2, [pc, #68]	; (80024f4 <HAL_RCC_ClockConfig+0x1a8>)
 80024ae:	4013      	ands	r3, r2
 80024b0:	0019      	movs	r1, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <HAL_RCC_ClockConfig+0x1a0>)
 80024b8:	430a      	orrs	r2, r1
 80024ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80024bc:	f000 f820 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 80024c0:	0001      	movs	r1, r0
 80024c2:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <HAL_RCC_ClockConfig+0x1a0>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	091b      	lsrs	r3, r3, #4
 80024c8:	220f      	movs	r2, #15
 80024ca:	4013      	ands	r3, r2
 80024cc:	4a0a      	ldr	r2, [pc, #40]	; (80024f8 <HAL_RCC_ClockConfig+0x1ac>)
 80024ce:	5cd3      	ldrb	r3, [r2, r3]
 80024d0:	000a      	movs	r2, r1
 80024d2:	40da      	lsrs	r2, r3
 80024d4:	4b09      	ldr	r3, [pc, #36]	; (80024fc <HAL_RCC_ClockConfig+0x1b0>)
 80024d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80024d8:	2000      	movs	r0, #0
 80024da:	f7fe fa85 	bl	80009e8 <HAL_InitTick>
  
  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	0018      	movs	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	b004      	add	sp, #16
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40022000 	.word	0x40022000
 80024ec:	40021000 	.word	0x40021000
 80024f0:	00001388 	.word	0x00001388
 80024f4:	fffff8ff 	.word	0xfffff8ff
 80024f8:	080038c4 	.word	0x080038c4
 80024fc:	20000028 	.word	0x20000028

08002500 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002500:	b590      	push	{r4, r7, lr}
 8002502:	b08f      	sub	sp, #60	; 0x3c
 8002504:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002506:	2314      	movs	r3, #20
 8002508:	18fb      	adds	r3, r7, r3
 800250a:	4a37      	ldr	r2, [pc, #220]	; (80025e8 <HAL_RCC_GetSysClockFreq+0xe8>)
 800250c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800250e:	c313      	stmia	r3!, {r0, r1, r4}
 8002510:	6812      	ldr	r2, [r2, #0]
 8002512:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002514:	1d3b      	adds	r3, r7, #4
 8002516:	4a35      	ldr	r2, [pc, #212]	; (80025ec <HAL_RCC_GetSysClockFreq+0xec>)
 8002518:	ca13      	ldmia	r2!, {r0, r1, r4}
 800251a:	c313      	stmia	r3!, {r0, r1, r4}
 800251c:	6812      	ldr	r2, [r2, #0]
 800251e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002524:	2300      	movs	r3, #0
 8002526:	62bb      	str	r3, [r7, #40]	; 0x28
 8002528:	2300      	movs	r3, #0
 800252a:	637b      	str	r3, [r7, #52]	; 0x34
 800252c:	2300      	movs	r3, #0
 800252e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002534:	4b2e      	ldr	r3, [pc, #184]	; (80025f0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800253a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253c:	220c      	movs	r2, #12
 800253e:	4013      	ands	r3, r2
 8002540:	2b08      	cmp	r3, #8
 8002542:	d006      	beq.n	8002552 <HAL_RCC_GetSysClockFreq+0x52>
 8002544:	2b0c      	cmp	r3, #12
 8002546:	d043      	beq.n	80025d0 <HAL_RCC_GetSysClockFreq+0xd0>
 8002548:	2b04      	cmp	r3, #4
 800254a:	d144      	bne.n	80025d6 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800254c:	4b29      	ldr	r3, [pc, #164]	; (80025f4 <HAL_RCC_GetSysClockFreq+0xf4>)
 800254e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002550:	e044      	b.n	80025dc <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002554:	0c9b      	lsrs	r3, r3, #18
 8002556:	220f      	movs	r2, #15
 8002558:	4013      	ands	r3, r2
 800255a:	2214      	movs	r2, #20
 800255c:	18ba      	adds	r2, r7, r2
 800255e:	5cd3      	ldrb	r3, [r2, r3]
 8002560:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002562:	4b23      	ldr	r3, [pc, #140]	; (80025f0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002566:	220f      	movs	r2, #15
 8002568:	4013      	ands	r3, r2
 800256a:	1d3a      	adds	r2, r7, #4
 800256c:	5cd3      	ldrb	r3, [r2, r3]
 800256e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002572:	23c0      	movs	r3, #192	; 0xc0
 8002574:	025b      	lsls	r3, r3, #9
 8002576:	401a      	ands	r2, r3
 8002578:	2380      	movs	r3, #128	; 0x80
 800257a:	025b      	lsls	r3, r3, #9
 800257c:	429a      	cmp	r2, r3
 800257e:	d109      	bne.n	8002594 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002580:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002582:	481c      	ldr	r0, [pc, #112]	; (80025f4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002584:	f7fd fdc0 	bl	8000108 <__udivsi3>
 8002588:	0003      	movs	r3, r0
 800258a:	001a      	movs	r2, r3
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	4353      	muls	r3, r2
 8002590:	637b      	str	r3, [r7, #52]	; 0x34
 8002592:	e01a      	b.n	80025ca <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002596:	23c0      	movs	r3, #192	; 0xc0
 8002598:	025b      	lsls	r3, r3, #9
 800259a:	401a      	ands	r2, r3
 800259c:	23c0      	movs	r3, #192	; 0xc0
 800259e:	025b      	lsls	r3, r3, #9
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d109      	bne.n	80025b8 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025a6:	4814      	ldr	r0, [pc, #80]	; (80025f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025a8:	f7fd fdae 	bl	8000108 <__udivsi3>
 80025ac:	0003      	movs	r3, r0
 80025ae:	001a      	movs	r2, r3
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	4353      	muls	r3, r2
 80025b4:	637b      	str	r3, [r7, #52]	; 0x34
 80025b6:	e008      	b.n	80025ca <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025ba:	480e      	ldr	r0, [pc, #56]	; (80025f4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80025bc:	f7fd fda4 	bl	8000108 <__udivsi3>
 80025c0:	0003      	movs	r3, r0
 80025c2:	001a      	movs	r2, r3
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	4353      	muls	r3, r2
 80025c8:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80025ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025cc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025ce:	e005      	b.n	80025dc <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80025d0:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025d4:	e002      	b.n	80025dc <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025d6:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80025d8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025da:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80025dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80025de:	0018      	movs	r0, r3
 80025e0:	46bd      	mov	sp, r7
 80025e2:	b00f      	add	sp, #60	; 0x3c
 80025e4:	bd90      	pop	{r4, r7, pc}
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	080038a4 	.word	0x080038a4
 80025ec:	080038b4 	.word	0x080038b4
 80025f0:	40021000 	.word	0x40021000
 80025f4:	007a1200 	.word	0x007a1200
 80025f8:	02dc6c00 	.word	0x02dc6c00

080025fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002600:	4b02      	ldr	r3, [pc, #8]	; (800260c <HAL_RCC_GetHCLKFreq+0x10>)
 8002602:	681b      	ldr	r3, [r3, #0]
}
 8002604:	0018      	movs	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	20000028 	.word	0x20000028

08002610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002614:	f7ff fff2 	bl	80025fc <HAL_RCC_GetHCLKFreq>
 8002618:	0001      	movs	r1, r0
 800261a:	4b06      	ldr	r3, [pc, #24]	; (8002634 <HAL_RCC_GetPCLK1Freq+0x24>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	0a1b      	lsrs	r3, r3, #8
 8002620:	2207      	movs	r2, #7
 8002622:	4013      	ands	r3, r2
 8002624:	4a04      	ldr	r2, [pc, #16]	; (8002638 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002626:	5cd3      	ldrb	r3, [r2, r3]
 8002628:	40d9      	lsrs	r1, r3
 800262a:	000b      	movs	r3, r1
}    
 800262c:	0018      	movs	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	40021000 	.word	0x40021000
 8002638:	080038d4 	.word	0x080038d4

0800263c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002644:	2300      	movs	r3, #0
 8002646:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002648:	2300      	movs	r3, #0
 800264a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	025b      	lsls	r3, r3, #9
 8002654:	4013      	ands	r3, r2
 8002656:	d100      	bne.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002658:	e08f      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800265a:	2317      	movs	r3, #23
 800265c:	18fb      	adds	r3, r7, r3
 800265e:	2200      	movs	r2, #0
 8002660:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002662:	4b67      	ldr	r3, [pc, #412]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002664:	69da      	ldr	r2, [r3, #28]
 8002666:	2380      	movs	r3, #128	; 0x80
 8002668:	055b      	lsls	r3, r3, #21
 800266a:	4013      	ands	r3, r2
 800266c:	d111      	bne.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800266e:	4b64      	ldr	r3, [pc, #400]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002670:	69da      	ldr	r2, [r3, #28]
 8002672:	4b63      	ldr	r3, [pc, #396]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002674:	2180      	movs	r1, #128	; 0x80
 8002676:	0549      	lsls	r1, r1, #21
 8002678:	430a      	orrs	r2, r1
 800267a:	61da      	str	r2, [r3, #28]
 800267c:	4b60      	ldr	r3, [pc, #384]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800267e:	69da      	ldr	r2, [r3, #28]
 8002680:	2380      	movs	r3, #128	; 0x80
 8002682:	055b      	lsls	r3, r3, #21
 8002684:	4013      	ands	r3, r2
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800268a:	2317      	movs	r3, #23
 800268c:	18fb      	adds	r3, r7, r3
 800268e:	2201      	movs	r2, #1
 8002690:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002692:	4b5c      	ldr	r3, [pc, #368]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	2380      	movs	r3, #128	; 0x80
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	4013      	ands	r3, r2
 800269c:	d11a      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800269e:	4b59      	ldr	r3, [pc, #356]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	4b58      	ldr	r3, [pc, #352]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80026a4:	2180      	movs	r1, #128	; 0x80
 80026a6:	0049      	lsls	r1, r1, #1
 80026a8:	430a      	orrs	r2, r1
 80026aa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ac:	f7fe f9e2 	bl	8000a74 <HAL_GetTick>
 80026b0:	0003      	movs	r3, r0
 80026b2:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b4:	e008      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b6:	f7fe f9dd 	bl	8000a74 <HAL_GetTick>
 80026ba:	0002      	movs	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b64      	cmp	r3, #100	; 0x64
 80026c2:	d901      	bls.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e097      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c8:	4b4e      	ldr	r3, [pc, #312]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	2380      	movs	r3, #128	; 0x80
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	4013      	ands	r3, r2
 80026d2:	d0f0      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026d4:	4b4a      	ldr	r3, [pc, #296]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80026d6:	6a1a      	ldr	r2, [r3, #32]
 80026d8:	23c0      	movs	r3, #192	; 0xc0
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4013      	ands	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d034      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	23c0      	movs	r3, #192	; 0xc0
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4013      	ands	r3, r2
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d02c      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026f6:	4b42      	ldr	r3, [pc, #264]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	4a43      	ldr	r2, [pc, #268]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80026fc:	4013      	ands	r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002700:	4b3f      	ldr	r3, [pc, #252]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002702:	6a1a      	ldr	r2, [r3, #32]
 8002704:	4b3e      	ldr	r3, [pc, #248]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002706:	2180      	movs	r1, #128	; 0x80
 8002708:	0249      	lsls	r1, r1, #9
 800270a:	430a      	orrs	r2, r1
 800270c:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800270e:	4b3c      	ldr	r3, [pc, #240]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002710:	6a1a      	ldr	r2, [r3, #32]
 8002712:	4b3b      	ldr	r3, [pc, #236]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002714:	493d      	ldr	r1, [pc, #244]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002716:	400a      	ands	r2, r1
 8002718:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800271a:	4b39      	ldr	r3, [pc, #228]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2201      	movs	r2, #1
 8002724:	4013      	ands	r3, r2
 8002726:	d013      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7fe f9a4 	bl	8000a74 <HAL_GetTick>
 800272c:	0003      	movs	r3, r0
 800272e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002730:	e009      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002732:	f7fe f99f 	bl	8000a74 <HAL_GetTick>
 8002736:	0002      	movs	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	4a34      	ldr	r2, [pc, #208]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d901      	bls.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e058      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002746:	4b2e      	ldr	r3, [pc, #184]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	2202      	movs	r2, #2
 800274c:	4013      	ands	r3, r2
 800274e:	d0f0      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002750:	4b2b      	ldr	r3, [pc, #172]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	4a2c      	ldr	r2, [pc, #176]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002756:	4013      	ands	r3, r2
 8002758:	0019      	movs	r1, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	4b28      	ldr	r3, [pc, #160]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002760:	430a      	orrs	r2, r1
 8002762:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002764:	2317      	movs	r3, #23
 8002766:	18fb      	adds	r3, r7, r3
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d105      	bne.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800276e:	4b24      	ldr	r3, [pc, #144]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002770:	69da      	ldr	r2, [r3, #28]
 8002772:	4b23      	ldr	r3, [pc, #140]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002774:	4927      	ldr	r1, [pc, #156]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002776:	400a      	ands	r2, r1
 8002778:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2201      	movs	r2, #1
 8002780:	4013      	ands	r3, r2
 8002782:	d009      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002784:	4b1e      	ldr	r3, [pc, #120]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002788:	2203      	movs	r2, #3
 800278a:	4393      	bics	r3, r2
 800278c:	0019      	movs	r1, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	4b1b      	ldr	r3, [pc, #108]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002794:	430a      	orrs	r2, r1
 8002796:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2220      	movs	r2, #32
 800279e:	4013      	ands	r3, r2
 80027a0:	d009      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027a2:	4b17      	ldr	r3, [pc, #92]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	2210      	movs	r2, #16
 80027a8:	4393      	bics	r3, r2
 80027aa:	0019      	movs	r1, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68da      	ldr	r2, [r3, #12]
 80027b0:	4b13      	ldr	r3, [pc, #76]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80027b2:	430a      	orrs	r2, r1
 80027b4:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	2380      	movs	r3, #128	; 0x80
 80027bc:	029b      	lsls	r3, r3, #10
 80027be:	4013      	ands	r3, r2
 80027c0:	d009      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027c2:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	2280      	movs	r2, #128	; 0x80
 80027c8:	4393      	bics	r3, r2
 80027ca:	0019      	movs	r1, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	695a      	ldr	r2, [r3, #20]
 80027d0:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80027d2:	430a      	orrs	r2, r1
 80027d4:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	2380      	movs	r3, #128	; 0x80
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	4013      	ands	r3, r2
 80027e0:	d009      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80027e2:	4b07      	ldr	r3, [pc, #28]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	2240      	movs	r2, #64	; 0x40
 80027e8:	4393      	bics	r3, r2
 80027ea:	0019      	movs	r1, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691a      	ldr	r2, [r3, #16]
 80027f0:	4b03      	ldr	r3, [pc, #12]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80027f2:	430a      	orrs	r2, r1
 80027f4:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	0018      	movs	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	b006      	add	sp, #24
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40021000 	.word	0x40021000
 8002804:	40007000 	.word	0x40007000
 8002808:	fffffcff 	.word	0xfffffcff
 800280c:	fffeffff 	.word	0xfffeffff
 8002810:	00001388 	.word	0x00001388
 8002814:	efffffff 	.word	0xefffffff

08002818 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e044      	b.n	80028b4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800282e:	2b00      	cmp	r3, #0
 8002830:	d107      	bne.n	8002842 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2270      	movs	r2, #112	; 0x70
 8002836:	2100      	movs	r1, #0
 8002838:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	0018      	movs	r0, r3
 800283e:	f7fd ff05 	bl	800064c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2224      	movs	r2, #36	; 0x24
 8002846:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2101      	movs	r1, #1
 8002854:	438a      	bics	r2, r1
 8002856:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	0018      	movs	r0, r3
 800285c:	f000 f8d8 	bl	8002a10 <UART_SetConfig>
 8002860:	0003      	movs	r3, r0
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e024      	b.n	80028b4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	0018      	movs	r0, r3
 8002876:	f000 fa51 	bl	8002d1c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	490d      	ldr	r1, [pc, #52]	; (80028bc <HAL_UART_Init+0xa4>)
 8002886:	400a      	ands	r2, r1
 8002888:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	212a      	movs	r1, #42	; 0x2a
 8002896:	438a      	bics	r2, r1
 8002898:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2101      	movs	r1, #1
 80028a6:	430a      	orrs	r2, r1
 80028a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	0018      	movs	r0, r3
 80028ae:	f000 fae9 	bl	8002e84 <UART_CheckIdleState>
 80028b2:	0003      	movs	r3, r0
}
 80028b4:	0018      	movs	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	b002      	add	sp, #8
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	ffffb7ff 	.word	0xffffb7ff

080028c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08a      	sub	sp, #40	; 0x28
 80028c4:	af02      	add	r7, sp, #8
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	603b      	str	r3, [r7, #0]
 80028cc:	1dbb      	adds	r3, r7, #6
 80028ce:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d4:	2b20      	cmp	r3, #32
 80028d6:	d000      	beq.n	80028da <HAL_UART_Transmit+0x1a>
 80028d8:	e095      	b.n	8002a06 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_UART_Transmit+0x28>
 80028e0:	1dbb      	adds	r3, r7, #6
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e08d      	b.n	8002a08 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	2380      	movs	r3, #128	; 0x80
 80028f2:	015b      	lsls	r3, r3, #5
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d109      	bne.n	800290c <HAL_UART_Transmit+0x4c>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d105      	bne.n	800290c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	2201      	movs	r2, #1
 8002904:	4013      	ands	r3, r2
 8002906:	d001      	beq.n	800290c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e07d      	b.n	8002a08 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2270      	movs	r2, #112	; 0x70
 8002910:	5c9b      	ldrb	r3, [r3, r2]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d101      	bne.n	800291a <HAL_UART_Transmit+0x5a>
 8002916:	2302      	movs	r3, #2
 8002918:	e076      	b.n	8002a08 <HAL_UART_Transmit+0x148>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2270      	movs	r2, #112	; 0x70
 800291e:	2101      	movs	r1, #1
 8002920:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2221      	movs	r2, #33	; 0x21
 800292c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800292e:	f7fe f8a1 	bl	8000a74 <HAL_GetTick>
 8002932:	0003      	movs	r3, r0
 8002934:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	1dba      	adds	r2, r7, #6
 800293a:	2150      	movs	r1, #80	; 0x50
 800293c:	8812      	ldrh	r2, [r2, #0]
 800293e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	1dba      	adds	r2, r7, #6
 8002944:	2152      	movs	r1, #82	; 0x52
 8002946:	8812      	ldrh	r2, [r2, #0]
 8002948:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	2380      	movs	r3, #128	; 0x80
 8002950:	015b      	lsls	r3, r3, #5
 8002952:	429a      	cmp	r2, r3
 8002954:	d108      	bne.n	8002968 <HAL_UART_Transmit+0xa8>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d104      	bne.n	8002968 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 800295e:	2300      	movs	r3, #0
 8002960:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	61bb      	str	r3, [r7, #24]
 8002966:	e003      	b.n	8002970 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800296c:	2300      	movs	r3, #0
 800296e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002970:	e02d      	b.n	80029ce <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	0013      	movs	r3, r2
 800297c:	2200      	movs	r2, #0
 800297e:	2180      	movs	r1, #128	; 0x80
 8002980:	f000 fac6 	bl	8002f10 <UART_WaitOnFlagUntilTimeout>
 8002984:	1e03      	subs	r3, r0, #0
 8002986:	d001      	beq.n	800298c <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e03d      	b.n	8002a08 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10b      	bne.n	80029aa <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	881a      	ldrh	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	05d2      	lsls	r2, r2, #23
 800299c:	0dd2      	lsrs	r2, r2, #23
 800299e:	b292      	uxth	r2, r2
 80029a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	3302      	adds	r3, #2
 80029a6:	61bb      	str	r3, [r7, #24]
 80029a8:	e008      	b.n	80029bc <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	781a      	ldrb	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	b292      	uxth	r2, r2
 80029b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	3301      	adds	r3, #1
 80029ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2252      	movs	r2, #82	; 0x52
 80029c0:	5a9b      	ldrh	r3, [r3, r2]
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	3b01      	subs	r3, #1
 80029c6:	b299      	uxth	r1, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2252      	movs	r2, #82	; 0x52
 80029cc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2252      	movs	r2, #82	; 0x52
 80029d2:	5a9b      	ldrh	r3, [r3, r2]
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1cb      	bne.n	8002972 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	0013      	movs	r3, r2
 80029e4:	2200      	movs	r2, #0
 80029e6:	2140      	movs	r1, #64	; 0x40
 80029e8:	f000 fa92 	bl	8002f10 <UART_WaitOnFlagUntilTimeout>
 80029ec:	1e03      	subs	r3, r0, #0
 80029ee:	d001      	beq.n	80029f4 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e009      	b.n	8002a08 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2220      	movs	r2, #32
 80029f8:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2270      	movs	r2, #112	; 0x70
 80029fe:	2100      	movs	r1, #0
 8002a00:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002a02:	2300      	movs	r3, #0
 8002a04:	e000      	b.n	8002a08 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002a06:	2302      	movs	r3, #2
  }
}
 8002a08:	0018      	movs	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	b008      	add	sp, #32
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b088      	sub	sp, #32
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a1c:	2317      	movs	r3, #23
 8002a1e:	18fb      	adds	r3, r7, r3
 8002a20:	2200      	movs	r2, #0
 8002a22:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	69db      	ldr	r3, [r3, #28]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4aad      	ldr	r2, [pc, #692]	; (8002cf8 <UART_SetConfig+0x2e8>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	0019      	movs	r1, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	4aa8      	ldr	r2, [pc, #672]	; (8002cfc <UART_SetConfig+0x2ec>)
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	0019      	movs	r1, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68da      	ldr	r2, [r3, #12]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	4a9f      	ldr	r2, [pc, #636]	; (8002d00 <UART_SetConfig+0x2f0>)
 8002a82:	4013      	ands	r3, r2
 8002a84:	0019      	movs	r1, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a9b      	ldr	r2, [pc, #620]	; (8002d04 <UART_SetConfig+0x2f4>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d125      	bne.n	8002ae6 <UART_SetConfig+0xd6>
 8002a9a:	4b9b      	ldr	r3, [pc, #620]	; (8002d08 <UART_SetConfig+0x2f8>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d00f      	beq.n	8002ac6 <UART_SetConfig+0xb6>
 8002aa6:	d304      	bcc.n	8002ab2 <UART_SetConfig+0xa2>
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d011      	beq.n	8002ad0 <UART_SetConfig+0xc0>
 8002aac:	2b03      	cmp	r3, #3
 8002aae:	d005      	beq.n	8002abc <UART_SetConfig+0xac>
 8002ab0:	e013      	b.n	8002ada <UART_SetConfig+0xca>
 8002ab2:	231f      	movs	r3, #31
 8002ab4:	18fb      	adds	r3, r7, r3
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	701a      	strb	r2, [r3, #0]
 8002aba:	e022      	b.n	8002b02 <UART_SetConfig+0xf2>
 8002abc:	231f      	movs	r3, #31
 8002abe:	18fb      	adds	r3, r7, r3
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	701a      	strb	r2, [r3, #0]
 8002ac4:	e01d      	b.n	8002b02 <UART_SetConfig+0xf2>
 8002ac6:	231f      	movs	r3, #31
 8002ac8:	18fb      	adds	r3, r7, r3
 8002aca:	2204      	movs	r2, #4
 8002acc:	701a      	strb	r2, [r3, #0]
 8002ace:	e018      	b.n	8002b02 <UART_SetConfig+0xf2>
 8002ad0:	231f      	movs	r3, #31
 8002ad2:	18fb      	adds	r3, r7, r3
 8002ad4:	2208      	movs	r2, #8
 8002ad6:	701a      	strb	r2, [r3, #0]
 8002ad8:	e013      	b.n	8002b02 <UART_SetConfig+0xf2>
 8002ada:	231f      	movs	r3, #31
 8002adc:	18fb      	adds	r3, r7, r3
 8002ade:	2210      	movs	r2, #16
 8002ae0:	701a      	strb	r2, [r3, #0]
 8002ae2:	46c0      	nop			; (mov r8, r8)
 8002ae4:	e00d      	b.n	8002b02 <UART_SetConfig+0xf2>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a88      	ldr	r2, [pc, #544]	; (8002d0c <UART_SetConfig+0x2fc>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d104      	bne.n	8002afa <UART_SetConfig+0xea>
 8002af0:	231f      	movs	r3, #31
 8002af2:	18fb      	adds	r3, r7, r3
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]
 8002af8:	e003      	b.n	8002b02 <UART_SetConfig+0xf2>
 8002afa:	231f      	movs	r3, #31
 8002afc:	18fb      	adds	r3, r7, r3
 8002afe:	2210      	movs	r2, #16
 8002b00:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69da      	ldr	r2, [r3, #28]
 8002b06:	2380      	movs	r3, #128	; 0x80
 8002b08:	021b      	lsls	r3, r3, #8
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d000      	beq.n	8002b10 <UART_SetConfig+0x100>
 8002b0e:	e07d      	b.n	8002c0c <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8002b10:	231f      	movs	r3, #31
 8002b12:	18fb      	adds	r3, r7, r3
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d01c      	beq.n	8002b54 <UART_SetConfig+0x144>
 8002b1a:	dc02      	bgt.n	8002b22 <UART_SetConfig+0x112>
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <UART_SetConfig+0x11c>
 8002b20:	e04b      	b.n	8002bba <UART_SetConfig+0x1aa>
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d025      	beq.n	8002b72 <UART_SetConfig+0x162>
 8002b26:	2b08      	cmp	r3, #8
 8002b28:	d037      	beq.n	8002b9a <UART_SetConfig+0x18a>
 8002b2a:	e046      	b.n	8002bba <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b2c:	f7ff fd70 	bl	8002610 <HAL_RCC_GetPCLK1Freq>
 8002b30:	0003      	movs	r3, r0
 8002b32:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	005a      	lsls	r2, r3, #1
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	085b      	lsrs	r3, r3, #1
 8002b3e:	18d2      	adds	r2, r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	0019      	movs	r1, r3
 8002b46:	0010      	movs	r0, r2
 8002b48:	f7fd fade 	bl	8000108 <__udivsi3>
 8002b4c:	0003      	movs	r3, r0
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	61bb      	str	r3, [r7, #24]
        break;
 8002b52:	e037      	b.n	8002bc4 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	085b      	lsrs	r3, r3, #1
 8002b5a:	4a6d      	ldr	r2, [pc, #436]	; (8002d10 <UART_SetConfig+0x300>)
 8002b5c:	189a      	adds	r2, r3, r2
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	0019      	movs	r1, r3
 8002b64:	0010      	movs	r0, r2
 8002b66:	f7fd facf 	bl	8000108 <__udivsi3>
 8002b6a:	0003      	movs	r3, r0
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	61bb      	str	r3, [r7, #24]
        break;
 8002b70:	e028      	b.n	8002bc4 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b72:	f7ff fcc5 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 8002b76:	0003      	movs	r3, r0
 8002b78:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	005a      	lsls	r2, r3, #1
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	085b      	lsrs	r3, r3, #1
 8002b84:	18d2      	adds	r2, r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	0019      	movs	r1, r3
 8002b8c:	0010      	movs	r0, r2
 8002b8e:	f7fd fabb 	bl	8000108 <__udivsi3>
 8002b92:	0003      	movs	r3, r0
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	61bb      	str	r3, [r7, #24]
        break;
 8002b98:	e014      	b.n	8002bc4 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	085b      	lsrs	r3, r3, #1
 8002ba0:	2280      	movs	r2, #128	; 0x80
 8002ba2:	0252      	lsls	r2, r2, #9
 8002ba4:	189a      	adds	r2, r3, r2
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	0019      	movs	r1, r3
 8002bac:	0010      	movs	r0, r2
 8002bae:	f7fd faab 	bl	8000108 <__udivsi3>
 8002bb2:	0003      	movs	r3, r0
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	61bb      	str	r3, [r7, #24]
        break;
 8002bb8:	e004      	b.n	8002bc4 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 8002bba:	2317      	movs	r3, #23
 8002bbc:	18fb      	adds	r3, r7, r3
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	701a      	strb	r2, [r3, #0]
        break;
 8002bc2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	2b0f      	cmp	r3, #15
 8002bc8:	d91b      	bls.n	8002c02 <UART_SetConfig+0x1f2>
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	4a51      	ldr	r2, [pc, #324]	; (8002d14 <UART_SetConfig+0x304>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d817      	bhi.n	8002c02 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	200a      	movs	r0, #10
 8002bd8:	183b      	adds	r3, r7, r0
 8002bda:	210f      	movs	r1, #15
 8002bdc:	438a      	bics	r2, r1
 8002bde:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	085b      	lsrs	r3, r3, #1
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	2207      	movs	r2, #7
 8002be8:	4013      	ands	r3, r2
 8002bea:	b299      	uxth	r1, r3
 8002bec:	183b      	adds	r3, r7, r0
 8002bee:	183a      	adds	r2, r7, r0
 8002bf0:	8812      	ldrh	r2, [r2, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	183a      	adds	r2, r7, r0
 8002bfc:	8812      	ldrh	r2, [r2, #0]
 8002bfe:	60da      	str	r2, [r3, #12]
 8002c00:	e06c      	b.n	8002cdc <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8002c02:	2317      	movs	r3, #23
 8002c04:	18fb      	adds	r3, r7, r3
 8002c06:	2201      	movs	r2, #1
 8002c08:	701a      	strb	r2, [r3, #0]
 8002c0a:	e067      	b.n	8002cdc <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8002c0c:	231f      	movs	r3, #31
 8002c0e:	18fb      	adds	r3, r7, r3
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d01b      	beq.n	8002c4e <UART_SetConfig+0x23e>
 8002c16:	dc02      	bgt.n	8002c1e <UART_SetConfig+0x20e>
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d005      	beq.n	8002c28 <UART_SetConfig+0x218>
 8002c1c:	e049      	b.n	8002cb2 <UART_SetConfig+0x2a2>
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d024      	beq.n	8002c6c <UART_SetConfig+0x25c>
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d035      	beq.n	8002c92 <UART_SetConfig+0x282>
 8002c26:	e044      	b.n	8002cb2 <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c28:	f7ff fcf2 	bl	8002610 <HAL_RCC_GetPCLK1Freq>
 8002c2c:	0003      	movs	r3, r0
 8002c2e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	085a      	lsrs	r2, r3, #1
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	18d2      	adds	r2, r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	0019      	movs	r1, r3
 8002c40:	0010      	movs	r0, r2
 8002c42:	f7fd fa61 	bl	8000108 <__udivsi3>
 8002c46:	0003      	movs	r3, r0
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	61bb      	str	r3, [r7, #24]
        break;
 8002c4c:	e036      	b.n	8002cbc <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	085b      	lsrs	r3, r3, #1
 8002c54:	4a30      	ldr	r2, [pc, #192]	; (8002d18 <UART_SetConfig+0x308>)
 8002c56:	189a      	adds	r2, r3, r2
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	0019      	movs	r1, r3
 8002c5e:	0010      	movs	r0, r2
 8002c60:	f7fd fa52 	bl	8000108 <__udivsi3>
 8002c64:	0003      	movs	r3, r0
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	61bb      	str	r3, [r7, #24]
        break;
 8002c6a:	e027      	b.n	8002cbc <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c6c:	f7ff fc48 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 8002c70:	0003      	movs	r3, r0
 8002c72:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	085a      	lsrs	r2, r3, #1
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	18d2      	adds	r2, r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	0019      	movs	r1, r3
 8002c84:	0010      	movs	r0, r2
 8002c86:	f7fd fa3f 	bl	8000108 <__udivsi3>
 8002c8a:	0003      	movs	r3, r0
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	61bb      	str	r3, [r7, #24]
        break;
 8002c90:	e014      	b.n	8002cbc <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	085b      	lsrs	r3, r3, #1
 8002c98:	2280      	movs	r2, #128	; 0x80
 8002c9a:	0212      	lsls	r2, r2, #8
 8002c9c:	189a      	adds	r2, r3, r2
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	0019      	movs	r1, r3
 8002ca4:	0010      	movs	r0, r2
 8002ca6:	f7fd fa2f 	bl	8000108 <__udivsi3>
 8002caa:	0003      	movs	r3, r0
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	61bb      	str	r3, [r7, #24]
        break;
 8002cb0:	e004      	b.n	8002cbc <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 8002cb2:	2317      	movs	r3, #23
 8002cb4:	18fb      	adds	r3, r7, r3
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	701a      	strb	r2, [r3, #0]
        break;
 8002cba:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	2b0f      	cmp	r3, #15
 8002cc0:	d908      	bls.n	8002cd4 <UART_SetConfig+0x2c4>
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	4a13      	ldr	r2, [pc, #76]	; (8002d14 <UART_SetConfig+0x304>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d804      	bhi.n	8002cd4 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	60da      	str	r2, [r3, #12]
 8002cd2:	e003      	b.n	8002cdc <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8002cd4:	2317      	movs	r3, #23
 8002cd6:	18fb      	adds	r3, r7, r3
 8002cd8:	2201      	movs	r2, #1
 8002cda:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002ce8:	2317      	movs	r3, #23
 8002cea:	18fb      	adds	r3, r7, r3
 8002cec:	781b      	ldrb	r3, [r3, #0]
}
 8002cee:	0018      	movs	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	b008      	add	sp, #32
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	efff69f3 	.word	0xefff69f3
 8002cfc:	ffffcfff 	.word	0xffffcfff
 8002d00:	fffff4ff 	.word	0xfffff4ff
 8002d04:	40013800 	.word	0x40013800
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40004400 	.word	0x40004400
 8002d10:	00f42400 	.word	0x00f42400
 8002d14:	0000ffff 	.word	0x0000ffff
 8002d18:	007a1200 	.word	0x007a1200

08002d1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	2201      	movs	r2, #1
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	d00b      	beq.n	8002d46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	4a4a      	ldr	r2, [pc, #296]	; (8002e60 <UART_AdvFeatureConfig+0x144>)
 8002d36:	4013      	ands	r3, r2
 8002d38:	0019      	movs	r1, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d00b      	beq.n	8002d68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	4a43      	ldr	r2, [pc, #268]	; (8002e64 <UART_AdvFeatureConfig+0x148>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	0019      	movs	r1, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	2204      	movs	r2, #4
 8002d6e:	4013      	ands	r3, r2
 8002d70:	d00b      	beq.n	8002d8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	4a3b      	ldr	r2, [pc, #236]	; (8002e68 <UART_AdvFeatureConfig+0x14c>)
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	0019      	movs	r1, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8e:	2208      	movs	r2, #8
 8002d90:	4013      	ands	r3, r2
 8002d92:	d00b      	beq.n	8002dac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	4a34      	ldr	r2, [pc, #208]	; (8002e6c <UART_AdvFeatureConfig+0x150>)
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	0019      	movs	r1, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	2210      	movs	r2, #16
 8002db2:	4013      	ands	r3, r2
 8002db4:	d00b      	beq.n	8002dce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	4a2c      	ldr	r2, [pc, #176]	; (8002e70 <UART_AdvFeatureConfig+0x154>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	0019      	movs	r1, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d00b      	beq.n	8002df0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	4a25      	ldr	r2, [pc, #148]	; (8002e74 <UART_AdvFeatureConfig+0x158>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	0019      	movs	r1, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	2240      	movs	r2, #64	; 0x40
 8002df6:	4013      	ands	r3, r2
 8002df8:	d01d      	beq.n	8002e36 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	4a1d      	ldr	r2, [pc, #116]	; (8002e78 <UART_AdvFeatureConfig+0x15c>)
 8002e02:	4013      	ands	r3, r2
 8002e04:	0019      	movs	r1, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e16:	2380      	movs	r3, #128	; 0x80
 8002e18:	035b      	lsls	r3, r3, #13
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d10b      	bne.n	8002e36 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	4a15      	ldr	r2, [pc, #84]	; (8002e7c <UART_AdvFeatureConfig+0x160>)
 8002e26:	4013      	ands	r3, r2
 8002e28:	0019      	movs	r1, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	2280      	movs	r2, #128	; 0x80
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	d00b      	beq.n	8002e58 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	4a0e      	ldr	r2, [pc, #56]	; (8002e80 <UART_AdvFeatureConfig+0x164>)
 8002e48:	4013      	ands	r3, r2
 8002e4a:	0019      	movs	r1, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	605a      	str	r2, [r3, #4]
  }
}
 8002e58:	46c0      	nop			; (mov r8, r8)
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	b002      	add	sp, #8
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	fffdffff 	.word	0xfffdffff
 8002e64:	fffeffff 	.word	0xfffeffff
 8002e68:	fffbffff 	.word	0xfffbffff
 8002e6c:	ffff7fff 	.word	0xffff7fff
 8002e70:	ffffefff 	.word	0xffffefff
 8002e74:	ffffdfff 	.word	0xffffdfff
 8002e78:	ffefffff 	.word	0xffefffff
 8002e7c:	ff9fffff 	.word	0xff9fffff
 8002e80:	fff7ffff 	.word	0xfff7ffff

08002e84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af02      	add	r7, sp, #8
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002e92:	f7fd fdef 	bl	8000a74 <HAL_GetTick>
 8002e96:	0003      	movs	r3, r0
 8002e98:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2208      	movs	r2, #8
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	d10d      	bne.n	8002ec4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	2380      	movs	r3, #128	; 0x80
 8002eac:	0399      	lsls	r1, r3, #14
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	4b16      	ldr	r3, [pc, #88]	; (8002f0c <UART_CheckIdleState+0x88>)
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	0013      	movs	r3, r2
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f000 f82a 	bl	8002f10 <UART_WaitOnFlagUntilTimeout>
 8002ebc:	1e03      	subs	r3, r0, #0
 8002ebe:	d001      	beq.n	8002ec4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e01f      	b.n	8002f04 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2204      	movs	r2, #4
 8002ecc:	4013      	ands	r3, r2
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d10d      	bne.n	8002eee <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	2380      	movs	r3, #128	; 0x80
 8002ed6:	03d9      	lsls	r1, r3, #15
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <UART_CheckIdleState+0x88>)
 8002edc:	9300      	str	r3, [sp, #0]
 8002ede:	0013      	movs	r3, r2
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f000 f815 	bl	8002f10 <UART_WaitOnFlagUntilTimeout>
 8002ee6:	1e03      	subs	r3, r0, #0
 8002ee8:	d001      	beq.n	8002eee <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e00a      	b.n	8002f04 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2270      	movs	r2, #112	; 0x70
 8002efe:	2100      	movs	r1, #0
 8002f00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	0018      	movs	r0, r3
 8002f06:	46bd      	mov	sp, r7
 8002f08:	b004      	add	sp, #16
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	01ffffff 	.word	0x01ffffff

08002f10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	603b      	str	r3, [r7, #0]
 8002f1c:	1dfb      	adds	r3, r7, #7
 8002f1e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f20:	e05d      	b.n	8002fde <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	3301      	adds	r3, #1
 8002f26:	d05a      	beq.n	8002fde <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f28:	f7fd fda4 	bl	8000a74 <HAL_GetTick>
 8002f2c:	0002      	movs	r2, r0
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d302      	bcc.n	8002f3e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d11b      	bne.n	8002f76 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	492f      	ldr	r1, [pc, #188]	; (8003008 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002f4a:	400a      	ands	r2, r1
 8002f4c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2101      	movs	r1, #1
 8002f5a:	438a      	bics	r2, r1
 8002f5c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2220      	movs	r2, #32
 8002f62:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2220      	movs	r2, #32
 8002f68:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2270      	movs	r2, #112	; 0x70
 8002f6e:	2100      	movs	r1, #0
 8002f70:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e043      	b.n	8002ffe <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2204      	movs	r2, #4
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d02d      	beq.n	8002fde <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	69da      	ldr	r2, [r3, #28]
 8002f88:	2380      	movs	r3, #128	; 0x80
 8002f8a:	011b      	lsls	r3, r3, #4
 8002f8c:	401a      	ands	r2, r3
 8002f8e:	2380      	movs	r3, #128	; 0x80
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d123      	bne.n	8002fde <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2280      	movs	r2, #128	; 0x80
 8002f9c:	0112      	lsls	r2, r2, #4
 8002f9e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4917      	ldr	r1, [pc, #92]	; (8003008 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002fac:	400a      	ands	r2, r1
 8002fae:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2101      	movs	r1, #1
 8002fbc:	438a      	bics	r2, r1
 8002fbe:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2270      	movs	r2, #112	; 0x70
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e00f      	b.n	8002ffe <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	425a      	negs	r2, r3
 8002fee:	4153      	adcs	r3, r2
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	001a      	movs	r2, r3
 8002ff4:	1dfb      	adds	r3, r7, #7
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d092      	beq.n	8002f22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	0018      	movs	r0, r3
 8003000:	46bd      	mov	sp, r7
 8003002:	b004      	add	sp, #16
 8003004:	bd80      	pop	{r7, pc}
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	fffffe5f 	.word	0xfffffe5f

0800300c <__errno>:
 800300c:	4b01      	ldr	r3, [pc, #4]	; (8003014 <__errno+0x8>)
 800300e:	6818      	ldr	r0, [r3, #0]
 8003010:	4770      	bx	lr
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	20000034 	.word	0x20000034

08003018 <__libc_init_array>:
 8003018:	b570      	push	{r4, r5, r6, lr}
 800301a:	2600      	movs	r6, #0
 800301c:	4d0c      	ldr	r5, [pc, #48]	; (8003050 <__libc_init_array+0x38>)
 800301e:	4c0d      	ldr	r4, [pc, #52]	; (8003054 <__libc_init_array+0x3c>)
 8003020:	1b64      	subs	r4, r4, r5
 8003022:	10a4      	asrs	r4, r4, #2
 8003024:	42a6      	cmp	r6, r4
 8003026:	d109      	bne.n	800303c <__libc_init_array+0x24>
 8003028:	2600      	movs	r6, #0
 800302a:	f000 fc29 	bl	8003880 <_init>
 800302e:	4d0a      	ldr	r5, [pc, #40]	; (8003058 <__libc_init_array+0x40>)
 8003030:	4c0a      	ldr	r4, [pc, #40]	; (800305c <__libc_init_array+0x44>)
 8003032:	1b64      	subs	r4, r4, r5
 8003034:	10a4      	asrs	r4, r4, #2
 8003036:	42a6      	cmp	r6, r4
 8003038:	d105      	bne.n	8003046 <__libc_init_array+0x2e>
 800303a:	bd70      	pop	{r4, r5, r6, pc}
 800303c:	00b3      	lsls	r3, r6, #2
 800303e:	58eb      	ldr	r3, [r5, r3]
 8003040:	4798      	blx	r3
 8003042:	3601      	adds	r6, #1
 8003044:	e7ee      	b.n	8003024 <__libc_init_array+0xc>
 8003046:	00b3      	lsls	r3, r6, #2
 8003048:	58eb      	ldr	r3, [r5, r3]
 800304a:	4798      	blx	r3
 800304c:	3601      	adds	r6, #1
 800304e:	e7f2      	b.n	8003036 <__libc_init_array+0x1e>
 8003050:	08003910 	.word	0x08003910
 8003054:	08003910 	.word	0x08003910
 8003058:	08003910 	.word	0x08003910
 800305c:	08003914 	.word	0x08003914

08003060 <memset>:
 8003060:	0003      	movs	r3, r0
 8003062:	1812      	adds	r2, r2, r0
 8003064:	4293      	cmp	r3, r2
 8003066:	d100      	bne.n	800306a <memset+0xa>
 8003068:	4770      	bx	lr
 800306a:	7019      	strb	r1, [r3, #0]
 800306c:	3301      	adds	r3, #1
 800306e:	e7f9      	b.n	8003064 <memset+0x4>

08003070 <siprintf>:
 8003070:	b40e      	push	{r1, r2, r3}
 8003072:	b500      	push	{lr}
 8003074:	490b      	ldr	r1, [pc, #44]	; (80030a4 <siprintf+0x34>)
 8003076:	b09c      	sub	sp, #112	; 0x70
 8003078:	ab1d      	add	r3, sp, #116	; 0x74
 800307a:	9002      	str	r0, [sp, #8]
 800307c:	9006      	str	r0, [sp, #24]
 800307e:	9107      	str	r1, [sp, #28]
 8003080:	9104      	str	r1, [sp, #16]
 8003082:	4809      	ldr	r0, [pc, #36]	; (80030a8 <siprintf+0x38>)
 8003084:	4909      	ldr	r1, [pc, #36]	; (80030ac <siprintf+0x3c>)
 8003086:	cb04      	ldmia	r3!, {r2}
 8003088:	9105      	str	r1, [sp, #20]
 800308a:	6800      	ldr	r0, [r0, #0]
 800308c:	a902      	add	r1, sp, #8
 800308e:	9301      	str	r3, [sp, #4]
 8003090:	f000 f870 	bl	8003174 <_svfiprintf_r>
 8003094:	2300      	movs	r3, #0
 8003096:	9a02      	ldr	r2, [sp, #8]
 8003098:	7013      	strb	r3, [r2, #0]
 800309a:	b01c      	add	sp, #112	; 0x70
 800309c:	bc08      	pop	{r3}
 800309e:	b003      	add	sp, #12
 80030a0:	4718      	bx	r3
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	7fffffff 	.word	0x7fffffff
 80030a8:	20000034 	.word	0x20000034
 80030ac:	ffff0208 	.word	0xffff0208

080030b0 <__ssputs_r>:
 80030b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030b2:	688e      	ldr	r6, [r1, #8]
 80030b4:	b085      	sub	sp, #20
 80030b6:	0007      	movs	r7, r0
 80030b8:	000c      	movs	r4, r1
 80030ba:	9203      	str	r2, [sp, #12]
 80030bc:	9301      	str	r3, [sp, #4]
 80030be:	429e      	cmp	r6, r3
 80030c0:	d83c      	bhi.n	800313c <__ssputs_r+0x8c>
 80030c2:	2390      	movs	r3, #144	; 0x90
 80030c4:	898a      	ldrh	r2, [r1, #12]
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	421a      	tst	r2, r3
 80030ca:	d034      	beq.n	8003136 <__ssputs_r+0x86>
 80030cc:	2503      	movs	r5, #3
 80030ce:	6909      	ldr	r1, [r1, #16]
 80030d0:	6823      	ldr	r3, [r4, #0]
 80030d2:	1a5b      	subs	r3, r3, r1
 80030d4:	9302      	str	r3, [sp, #8]
 80030d6:	6963      	ldr	r3, [r4, #20]
 80030d8:	9802      	ldr	r0, [sp, #8]
 80030da:	435d      	muls	r5, r3
 80030dc:	0feb      	lsrs	r3, r5, #31
 80030de:	195d      	adds	r5, r3, r5
 80030e0:	9b01      	ldr	r3, [sp, #4]
 80030e2:	106d      	asrs	r5, r5, #1
 80030e4:	3301      	adds	r3, #1
 80030e6:	181b      	adds	r3, r3, r0
 80030e8:	42ab      	cmp	r3, r5
 80030ea:	d900      	bls.n	80030ee <__ssputs_r+0x3e>
 80030ec:	001d      	movs	r5, r3
 80030ee:	0553      	lsls	r3, r2, #21
 80030f0:	d532      	bpl.n	8003158 <__ssputs_r+0xa8>
 80030f2:	0029      	movs	r1, r5
 80030f4:	0038      	movs	r0, r7
 80030f6:	f000 fb23 	bl	8003740 <_malloc_r>
 80030fa:	1e06      	subs	r6, r0, #0
 80030fc:	d109      	bne.n	8003112 <__ssputs_r+0x62>
 80030fe:	230c      	movs	r3, #12
 8003100:	603b      	str	r3, [r7, #0]
 8003102:	2340      	movs	r3, #64	; 0x40
 8003104:	2001      	movs	r0, #1
 8003106:	89a2      	ldrh	r2, [r4, #12]
 8003108:	4240      	negs	r0, r0
 800310a:	4313      	orrs	r3, r2
 800310c:	81a3      	strh	r3, [r4, #12]
 800310e:	b005      	add	sp, #20
 8003110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003112:	9a02      	ldr	r2, [sp, #8]
 8003114:	6921      	ldr	r1, [r4, #16]
 8003116:	f000 faac 	bl	8003672 <memcpy>
 800311a:	89a3      	ldrh	r3, [r4, #12]
 800311c:	4a14      	ldr	r2, [pc, #80]	; (8003170 <__ssputs_r+0xc0>)
 800311e:	401a      	ands	r2, r3
 8003120:	2380      	movs	r3, #128	; 0x80
 8003122:	4313      	orrs	r3, r2
 8003124:	81a3      	strh	r3, [r4, #12]
 8003126:	9b02      	ldr	r3, [sp, #8]
 8003128:	6126      	str	r6, [r4, #16]
 800312a:	18f6      	adds	r6, r6, r3
 800312c:	6026      	str	r6, [r4, #0]
 800312e:	6165      	str	r5, [r4, #20]
 8003130:	9e01      	ldr	r6, [sp, #4]
 8003132:	1aed      	subs	r5, r5, r3
 8003134:	60a5      	str	r5, [r4, #8]
 8003136:	9b01      	ldr	r3, [sp, #4]
 8003138:	429e      	cmp	r6, r3
 800313a:	d900      	bls.n	800313e <__ssputs_r+0x8e>
 800313c:	9e01      	ldr	r6, [sp, #4]
 800313e:	0032      	movs	r2, r6
 8003140:	9903      	ldr	r1, [sp, #12]
 8003142:	6820      	ldr	r0, [r4, #0]
 8003144:	f000 fa9e 	bl	8003684 <memmove>
 8003148:	68a3      	ldr	r3, [r4, #8]
 800314a:	2000      	movs	r0, #0
 800314c:	1b9b      	subs	r3, r3, r6
 800314e:	60a3      	str	r3, [r4, #8]
 8003150:	6823      	ldr	r3, [r4, #0]
 8003152:	199e      	adds	r6, r3, r6
 8003154:	6026      	str	r6, [r4, #0]
 8003156:	e7da      	b.n	800310e <__ssputs_r+0x5e>
 8003158:	002a      	movs	r2, r5
 800315a:	0038      	movs	r0, r7
 800315c:	f000 fb4e 	bl	80037fc <_realloc_r>
 8003160:	1e06      	subs	r6, r0, #0
 8003162:	d1e0      	bne.n	8003126 <__ssputs_r+0x76>
 8003164:	6921      	ldr	r1, [r4, #16]
 8003166:	0038      	movs	r0, r7
 8003168:	f000 faa0 	bl	80036ac <_free_r>
 800316c:	e7c7      	b.n	80030fe <__ssputs_r+0x4e>
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	fffffb7f 	.word	0xfffffb7f

08003174 <_svfiprintf_r>:
 8003174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003176:	b0a1      	sub	sp, #132	; 0x84
 8003178:	9003      	str	r0, [sp, #12]
 800317a:	001d      	movs	r5, r3
 800317c:	898b      	ldrh	r3, [r1, #12]
 800317e:	000f      	movs	r7, r1
 8003180:	0016      	movs	r6, r2
 8003182:	061b      	lsls	r3, r3, #24
 8003184:	d511      	bpl.n	80031aa <_svfiprintf_r+0x36>
 8003186:	690b      	ldr	r3, [r1, #16]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10e      	bne.n	80031aa <_svfiprintf_r+0x36>
 800318c:	2140      	movs	r1, #64	; 0x40
 800318e:	f000 fad7 	bl	8003740 <_malloc_r>
 8003192:	6038      	str	r0, [r7, #0]
 8003194:	6138      	str	r0, [r7, #16]
 8003196:	2800      	cmp	r0, #0
 8003198:	d105      	bne.n	80031a6 <_svfiprintf_r+0x32>
 800319a:	230c      	movs	r3, #12
 800319c:	9a03      	ldr	r2, [sp, #12]
 800319e:	3801      	subs	r0, #1
 80031a0:	6013      	str	r3, [r2, #0]
 80031a2:	b021      	add	sp, #132	; 0x84
 80031a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031a6:	2340      	movs	r3, #64	; 0x40
 80031a8:	617b      	str	r3, [r7, #20]
 80031aa:	2300      	movs	r3, #0
 80031ac:	ac08      	add	r4, sp, #32
 80031ae:	6163      	str	r3, [r4, #20]
 80031b0:	3320      	adds	r3, #32
 80031b2:	7663      	strb	r3, [r4, #25]
 80031b4:	3310      	adds	r3, #16
 80031b6:	76a3      	strb	r3, [r4, #26]
 80031b8:	9507      	str	r5, [sp, #28]
 80031ba:	0035      	movs	r5, r6
 80031bc:	782b      	ldrb	r3, [r5, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <_svfiprintf_r+0x52>
 80031c2:	2b25      	cmp	r3, #37	; 0x25
 80031c4:	d146      	bne.n	8003254 <_svfiprintf_r+0xe0>
 80031c6:	1bab      	subs	r3, r5, r6
 80031c8:	9305      	str	r3, [sp, #20]
 80031ca:	d00c      	beq.n	80031e6 <_svfiprintf_r+0x72>
 80031cc:	0032      	movs	r2, r6
 80031ce:	0039      	movs	r1, r7
 80031d0:	9803      	ldr	r0, [sp, #12]
 80031d2:	f7ff ff6d 	bl	80030b0 <__ssputs_r>
 80031d6:	1c43      	adds	r3, r0, #1
 80031d8:	d100      	bne.n	80031dc <_svfiprintf_r+0x68>
 80031da:	e0ae      	b.n	800333a <_svfiprintf_r+0x1c6>
 80031dc:	6962      	ldr	r2, [r4, #20]
 80031de:	9b05      	ldr	r3, [sp, #20]
 80031e0:	4694      	mov	ip, r2
 80031e2:	4463      	add	r3, ip
 80031e4:	6163      	str	r3, [r4, #20]
 80031e6:	782b      	ldrb	r3, [r5, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d100      	bne.n	80031ee <_svfiprintf_r+0x7a>
 80031ec:	e0a5      	b.n	800333a <_svfiprintf_r+0x1c6>
 80031ee:	2201      	movs	r2, #1
 80031f0:	2300      	movs	r3, #0
 80031f2:	4252      	negs	r2, r2
 80031f4:	6062      	str	r2, [r4, #4]
 80031f6:	a904      	add	r1, sp, #16
 80031f8:	3254      	adds	r2, #84	; 0x54
 80031fa:	1852      	adds	r2, r2, r1
 80031fc:	1c6e      	adds	r6, r5, #1
 80031fe:	6023      	str	r3, [r4, #0]
 8003200:	60e3      	str	r3, [r4, #12]
 8003202:	60a3      	str	r3, [r4, #8]
 8003204:	7013      	strb	r3, [r2, #0]
 8003206:	65a3      	str	r3, [r4, #88]	; 0x58
 8003208:	7831      	ldrb	r1, [r6, #0]
 800320a:	2205      	movs	r2, #5
 800320c:	4853      	ldr	r0, [pc, #332]	; (800335c <_svfiprintf_r+0x1e8>)
 800320e:	f000 fa25 	bl	800365c <memchr>
 8003212:	1c75      	adds	r5, r6, #1
 8003214:	2800      	cmp	r0, #0
 8003216:	d11f      	bne.n	8003258 <_svfiprintf_r+0xe4>
 8003218:	6822      	ldr	r2, [r4, #0]
 800321a:	06d3      	lsls	r3, r2, #27
 800321c:	d504      	bpl.n	8003228 <_svfiprintf_r+0xb4>
 800321e:	2353      	movs	r3, #83	; 0x53
 8003220:	a904      	add	r1, sp, #16
 8003222:	185b      	adds	r3, r3, r1
 8003224:	2120      	movs	r1, #32
 8003226:	7019      	strb	r1, [r3, #0]
 8003228:	0713      	lsls	r3, r2, #28
 800322a:	d504      	bpl.n	8003236 <_svfiprintf_r+0xc2>
 800322c:	2353      	movs	r3, #83	; 0x53
 800322e:	a904      	add	r1, sp, #16
 8003230:	185b      	adds	r3, r3, r1
 8003232:	212b      	movs	r1, #43	; 0x2b
 8003234:	7019      	strb	r1, [r3, #0]
 8003236:	7833      	ldrb	r3, [r6, #0]
 8003238:	2b2a      	cmp	r3, #42	; 0x2a
 800323a:	d016      	beq.n	800326a <_svfiprintf_r+0xf6>
 800323c:	0035      	movs	r5, r6
 800323e:	2100      	movs	r1, #0
 8003240:	200a      	movs	r0, #10
 8003242:	68e3      	ldr	r3, [r4, #12]
 8003244:	782a      	ldrb	r2, [r5, #0]
 8003246:	1c6e      	adds	r6, r5, #1
 8003248:	3a30      	subs	r2, #48	; 0x30
 800324a:	2a09      	cmp	r2, #9
 800324c:	d94e      	bls.n	80032ec <_svfiprintf_r+0x178>
 800324e:	2900      	cmp	r1, #0
 8003250:	d018      	beq.n	8003284 <_svfiprintf_r+0x110>
 8003252:	e010      	b.n	8003276 <_svfiprintf_r+0x102>
 8003254:	3501      	adds	r5, #1
 8003256:	e7b1      	b.n	80031bc <_svfiprintf_r+0x48>
 8003258:	4b40      	ldr	r3, [pc, #256]	; (800335c <_svfiprintf_r+0x1e8>)
 800325a:	6822      	ldr	r2, [r4, #0]
 800325c:	1ac0      	subs	r0, r0, r3
 800325e:	2301      	movs	r3, #1
 8003260:	4083      	lsls	r3, r0
 8003262:	4313      	orrs	r3, r2
 8003264:	6023      	str	r3, [r4, #0]
 8003266:	002e      	movs	r6, r5
 8003268:	e7ce      	b.n	8003208 <_svfiprintf_r+0x94>
 800326a:	9b07      	ldr	r3, [sp, #28]
 800326c:	1d19      	adds	r1, r3, #4
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	9107      	str	r1, [sp, #28]
 8003272:	2b00      	cmp	r3, #0
 8003274:	db01      	blt.n	800327a <_svfiprintf_r+0x106>
 8003276:	930b      	str	r3, [sp, #44]	; 0x2c
 8003278:	e004      	b.n	8003284 <_svfiprintf_r+0x110>
 800327a:	425b      	negs	r3, r3
 800327c:	60e3      	str	r3, [r4, #12]
 800327e:	2302      	movs	r3, #2
 8003280:	4313      	orrs	r3, r2
 8003282:	6023      	str	r3, [r4, #0]
 8003284:	782b      	ldrb	r3, [r5, #0]
 8003286:	2b2e      	cmp	r3, #46	; 0x2e
 8003288:	d10a      	bne.n	80032a0 <_svfiprintf_r+0x12c>
 800328a:	786b      	ldrb	r3, [r5, #1]
 800328c:	2b2a      	cmp	r3, #42	; 0x2a
 800328e:	d135      	bne.n	80032fc <_svfiprintf_r+0x188>
 8003290:	9b07      	ldr	r3, [sp, #28]
 8003292:	3502      	adds	r5, #2
 8003294:	1d1a      	adds	r2, r3, #4
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	9207      	str	r2, [sp, #28]
 800329a:	2b00      	cmp	r3, #0
 800329c:	db2b      	blt.n	80032f6 <_svfiprintf_r+0x182>
 800329e:	9309      	str	r3, [sp, #36]	; 0x24
 80032a0:	4e2f      	ldr	r6, [pc, #188]	; (8003360 <_svfiprintf_r+0x1ec>)
 80032a2:	7829      	ldrb	r1, [r5, #0]
 80032a4:	2203      	movs	r2, #3
 80032a6:	0030      	movs	r0, r6
 80032a8:	f000 f9d8 	bl	800365c <memchr>
 80032ac:	2800      	cmp	r0, #0
 80032ae:	d006      	beq.n	80032be <_svfiprintf_r+0x14a>
 80032b0:	2340      	movs	r3, #64	; 0x40
 80032b2:	1b80      	subs	r0, r0, r6
 80032b4:	4083      	lsls	r3, r0
 80032b6:	6822      	ldr	r2, [r4, #0]
 80032b8:	3501      	adds	r5, #1
 80032ba:	4313      	orrs	r3, r2
 80032bc:	6023      	str	r3, [r4, #0]
 80032be:	7829      	ldrb	r1, [r5, #0]
 80032c0:	2206      	movs	r2, #6
 80032c2:	4828      	ldr	r0, [pc, #160]	; (8003364 <_svfiprintf_r+0x1f0>)
 80032c4:	1c6e      	adds	r6, r5, #1
 80032c6:	7621      	strb	r1, [r4, #24]
 80032c8:	f000 f9c8 	bl	800365c <memchr>
 80032cc:	2800      	cmp	r0, #0
 80032ce:	d03c      	beq.n	800334a <_svfiprintf_r+0x1d6>
 80032d0:	4b25      	ldr	r3, [pc, #148]	; (8003368 <_svfiprintf_r+0x1f4>)
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d125      	bne.n	8003322 <_svfiprintf_r+0x1ae>
 80032d6:	2207      	movs	r2, #7
 80032d8:	9b07      	ldr	r3, [sp, #28]
 80032da:	3307      	adds	r3, #7
 80032dc:	4393      	bics	r3, r2
 80032de:	3308      	adds	r3, #8
 80032e0:	9307      	str	r3, [sp, #28]
 80032e2:	6963      	ldr	r3, [r4, #20]
 80032e4:	9a04      	ldr	r2, [sp, #16]
 80032e6:	189b      	adds	r3, r3, r2
 80032e8:	6163      	str	r3, [r4, #20]
 80032ea:	e766      	b.n	80031ba <_svfiprintf_r+0x46>
 80032ec:	4343      	muls	r3, r0
 80032ee:	2101      	movs	r1, #1
 80032f0:	189b      	adds	r3, r3, r2
 80032f2:	0035      	movs	r5, r6
 80032f4:	e7a6      	b.n	8003244 <_svfiprintf_r+0xd0>
 80032f6:	2301      	movs	r3, #1
 80032f8:	425b      	negs	r3, r3
 80032fa:	e7d0      	b.n	800329e <_svfiprintf_r+0x12a>
 80032fc:	2300      	movs	r3, #0
 80032fe:	200a      	movs	r0, #10
 8003300:	001a      	movs	r2, r3
 8003302:	3501      	adds	r5, #1
 8003304:	6063      	str	r3, [r4, #4]
 8003306:	7829      	ldrb	r1, [r5, #0]
 8003308:	1c6e      	adds	r6, r5, #1
 800330a:	3930      	subs	r1, #48	; 0x30
 800330c:	2909      	cmp	r1, #9
 800330e:	d903      	bls.n	8003318 <_svfiprintf_r+0x1a4>
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0c5      	beq.n	80032a0 <_svfiprintf_r+0x12c>
 8003314:	9209      	str	r2, [sp, #36]	; 0x24
 8003316:	e7c3      	b.n	80032a0 <_svfiprintf_r+0x12c>
 8003318:	4342      	muls	r2, r0
 800331a:	2301      	movs	r3, #1
 800331c:	1852      	adds	r2, r2, r1
 800331e:	0035      	movs	r5, r6
 8003320:	e7f1      	b.n	8003306 <_svfiprintf_r+0x192>
 8003322:	ab07      	add	r3, sp, #28
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	003a      	movs	r2, r7
 8003328:	4b10      	ldr	r3, [pc, #64]	; (800336c <_svfiprintf_r+0x1f8>)
 800332a:	0021      	movs	r1, r4
 800332c:	9803      	ldr	r0, [sp, #12]
 800332e:	e000      	b.n	8003332 <_svfiprintf_r+0x1be>
 8003330:	bf00      	nop
 8003332:	9004      	str	r0, [sp, #16]
 8003334:	9b04      	ldr	r3, [sp, #16]
 8003336:	3301      	adds	r3, #1
 8003338:	d1d3      	bne.n	80032e2 <_svfiprintf_r+0x16e>
 800333a:	89bb      	ldrh	r3, [r7, #12]
 800333c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800333e:	065b      	lsls	r3, r3, #25
 8003340:	d400      	bmi.n	8003344 <_svfiprintf_r+0x1d0>
 8003342:	e72e      	b.n	80031a2 <_svfiprintf_r+0x2e>
 8003344:	2001      	movs	r0, #1
 8003346:	4240      	negs	r0, r0
 8003348:	e72b      	b.n	80031a2 <_svfiprintf_r+0x2e>
 800334a:	ab07      	add	r3, sp, #28
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	003a      	movs	r2, r7
 8003350:	4b06      	ldr	r3, [pc, #24]	; (800336c <_svfiprintf_r+0x1f8>)
 8003352:	0021      	movs	r1, r4
 8003354:	9803      	ldr	r0, [sp, #12]
 8003356:	f000 f879 	bl	800344c <_printf_i>
 800335a:	e7ea      	b.n	8003332 <_svfiprintf_r+0x1be>
 800335c:	080038dc 	.word	0x080038dc
 8003360:	080038e2 	.word	0x080038e2
 8003364:	080038e6 	.word	0x080038e6
 8003368:	00000000 	.word	0x00000000
 800336c:	080030b1 	.word	0x080030b1

08003370 <_printf_common>:
 8003370:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003372:	0015      	movs	r5, r2
 8003374:	9301      	str	r3, [sp, #4]
 8003376:	688a      	ldr	r2, [r1, #8]
 8003378:	690b      	ldr	r3, [r1, #16]
 800337a:	9000      	str	r0, [sp, #0]
 800337c:	000c      	movs	r4, r1
 800337e:	4293      	cmp	r3, r2
 8003380:	da00      	bge.n	8003384 <_printf_common+0x14>
 8003382:	0013      	movs	r3, r2
 8003384:	0022      	movs	r2, r4
 8003386:	602b      	str	r3, [r5, #0]
 8003388:	3243      	adds	r2, #67	; 0x43
 800338a:	7812      	ldrb	r2, [r2, #0]
 800338c:	2a00      	cmp	r2, #0
 800338e:	d001      	beq.n	8003394 <_printf_common+0x24>
 8003390:	3301      	adds	r3, #1
 8003392:	602b      	str	r3, [r5, #0]
 8003394:	6823      	ldr	r3, [r4, #0]
 8003396:	069b      	lsls	r3, r3, #26
 8003398:	d502      	bpl.n	80033a0 <_printf_common+0x30>
 800339a:	682b      	ldr	r3, [r5, #0]
 800339c:	3302      	adds	r3, #2
 800339e:	602b      	str	r3, [r5, #0]
 80033a0:	2706      	movs	r7, #6
 80033a2:	6823      	ldr	r3, [r4, #0]
 80033a4:	401f      	ands	r7, r3
 80033a6:	d027      	beq.n	80033f8 <_printf_common+0x88>
 80033a8:	0023      	movs	r3, r4
 80033aa:	3343      	adds	r3, #67	; 0x43
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	1e5a      	subs	r2, r3, #1
 80033b0:	4193      	sbcs	r3, r2
 80033b2:	6822      	ldr	r2, [r4, #0]
 80033b4:	0692      	lsls	r2, r2, #26
 80033b6:	d430      	bmi.n	800341a <_printf_common+0xaa>
 80033b8:	0022      	movs	r2, r4
 80033ba:	9901      	ldr	r1, [sp, #4]
 80033bc:	3243      	adds	r2, #67	; 0x43
 80033be:	9800      	ldr	r0, [sp, #0]
 80033c0:	9e08      	ldr	r6, [sp, #32]
 80033c2:	47b0      	blx	r6
 80033c4:	1c43      	adds	r3, r0, #1
 80033c6:	d025      	beq.n	8003414 <_printf_common+0xa4>
 80033c8:	2306      	movs	r3, #6
 80033ca:	6820      	ldr	r0, [r4, #0]
 80033cc:	682a      	ldr	r2, [r5, #0]
 80033ce:	68e1      	ldr	r1, [r4, #12]
 80033d0:	4003      	ands	r3, r0
 80033d2:	2500      	movs	r5, #0
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d103      	bne.n	80033e0 <_printf_common+0x70>
 80033d8:	1a8d      	subs	r5, r1, r2
 80033da:	43eb      	mvns	r3, r5
 80033dc:	17db      	asrs	r3, r3, #31
 80033de:	401d      	ands	r5, r3
 80033e0:	68a3      	ldr	r3, [r4, #8]
 80033e2:	6922      	ldr	r2, [r4, #16]
 80033e4:	4293      	cmp	r3, r2
 80033e6:	dd01      	ble.n	80033ec <_printf_common+0x7c>
 80033e8:	1a9b      	subs	r3, r3, r2
 80033ea:	18ed      	adds	r5, r5, r3
 80033ec:	2700      	movs	r7, #0
 80033ee:	42bd      	cmp	r5, r7
 80033f0:	d120      	bne.n	8003434 <_printf_common+0xc4>
 80033f2:	2000      	movs	r0, #0
 80033f4:	e010      	b.n	8003418 <_printf_common+0xa8>
 80033f6:	3701      	adds	r7, #1
 80033f8:	68e3      	ldr	r3, [r4, #12]
 80033fa:	682a      	ldr	r2, [r5, #0]
 80033fc:	1a9b      	subs	r3, r3, r2
 80033fe:	42bb      	cmp	r3, r7
 8003400:	ddd2      	ble.n	80033a8 <_printf_common+0x38>
 8003402:	0022      	movs	r2, r4
 8003404:	2301      	movs	r3, #1
 8003406:	3219      	adds	r2, #25
 8003408:	9901      	ldr	r1, [sp, #4]
 800340a:	9800      	ldr	r0, [sp, #0]
 800340c:	9e08      	ldr	r6, [sp, #32]
 800340e:	47b0      	blx	r6
 8003410:	1c43      	adds	r3, r0, #1
 8003412:	d1f0      	bne.n	80033f6 <_printf_common+0x86>
 8003414:	2001      	movs	r0, #1
 8003416:	4240      	negs	r0, r0
 8003418:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800341a:	2030      	movs	r0, #48	; 0x30
 800341c:	18e1      	adds	r1, r4, r3
 800341e:	3143      	adds	r1, #67	; 0x43
 8003420:	7008      	strb	r0, [r1, #0]
 8003422:	0021      	movs	r1, r4
 8003424:	1c5a      	adds	r2, r3, #1
 8003426:	3145      	adds	r1, #69	; 0x45
 8003428:	7809      	ldrb	r1, [r1, #0]
 800342a:	18a2      	adds	r2, r4, r2
 800342c:	3243      	adds	r2, #67	; 0x43
 800342e:	3302      	adds	r3, #2
 8003430:	7011      	strb	r1, [r2, #0]
 8003432:	e7c1      	b.n	80033b8 <_printf_common+0x48>
 8003434:	0022      	movs	r2, r4
 8003436:	2301      	movs	r3, #1
 8003438:	321a      	adds	r2, #26
 800343a:	9901      	ldr	r1, [sp, #4]
 800343c:	9800      	ldr	r0, [sp, #0]
 800343e:	9e08      	ldr	r6, [sp, #32]
 8003440:	47b0      	blx	r6
 8003442:	1c43      	adds	r3, r0, #1
 8003444:	d0e6      	beq.n	8003414 <_printf_common+0xa4>
 8003446:	3701      	adds	r7, #1
 8003448:	e7d1      	b.n	80033ee <_printf_common+0x7e>
	...

0800344c <_printf_i>:
 800344c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800344e:	b089      	sub	sp, #36	; 0x24
 8003450:	9204      	str	r2, [sp, #16]
 8003452:	000a      	movs	r2, r1
 8003454:	3243      	adds	r2, #67	; 0x43
 8003456:	9305      	str	r3, [sp, #20]
 8003458:	9003      	str	r0, [sp, #12]
 800345a:	9202      	str	r2, [sp, #8]
 800345c:	7e0a      	ldrb	r2, [r1, #24]
 800345e:	000c      	movs	r4, r1
 8003460:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003462:	2a6e      	cmp	r2, #110	; 0x6e
 8003464:	d100      	bne.n	8003468 <_printf_i+0x1c>
 8003466:	e086      	b.n	8003576 <_printf_i+0x12a>
 8003468:	d81f      	bhi.n	80034aa <_printf_i+0x5e>
 800346a:	2a63      	cmp	r2, #99	; 0x63
 800346c:	d033      	beq.n	80034d6 <_printf_i+0x8a>
 800346e:	d808      	bhi.n	8003482 <_printf_i+0x36>
 8003470:	2a00      	cmp	r2, #0
 8003472:	d100      	bne.n	8003476 <_printf_i+0x2a>
 8003474:	e08c      	b.n	8003590 <_printf_i+0x144>
 8003476:	2a58      	cmp	r2, #88	; 0x58
 8003478:	d04d      	beq.n	8003516 <_printf_i+0xca>
 800347a:	0025      	movs	r5, r4
 800347c:	3542      	adds	r5, #66	; 0x42
 800347e:	702a      	strb	r2, [r5, #0]
 8003480:	e030      	b.n	80034e4 <_printf_i+0x98>
 8003482:	2a64      	cmp	r2, #100	; 0x64
 8003484:	d001      	beq.n	800348a <_printf_i+0x3e>
 8003486:	2a69      	cmp	r2, #105	; 0x69
 8003488:	d1f7      	bne.n	800347a <_printf_i+0x2e>
 800348a:	6819      	ldr	r1, [r3, #0]
 800348c:	6825      	ldr	r5, [r4, #0]
 800348e:	1d0a      	adds	r2, r1, #4
 8003490:	0628      	lsls	r0, r5, #24
 8003492:	d529      	bpl.n	80034e8 <_printf_i+0x9c>
 8003494:	6808      	ldr	r0, [r1, #0]
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	2800      	cmp	r0, #0
 800349a:	da03      	bge.n	80034a4 <_printf_i+0x58>
 800349c:	232d      	movs	r3, #45	; 0x2d
 800349e:	9a02      	ldr	r2, [sp, #8]
 80034a0:	4240      	negs	r0, r0
 80034a2:	7013      	strb	r3, [r2, #0]
 80034a4:	4e6b      	ldr	r6, [pc, #428]	; (8003654 <_printf_i+0x208>)
 80034a6:	270a      	movs	r7, #10
 80034a8:	e04f      	b.n	800354a <_printf_i+0xfe>
 80034aa:	2a73      	cmp	r2, #115	; 0x73
 80034ac:	d074      	beq.n	8003598 <_printf_i+0x14c>
 80034ae:	d808      	bhi.n	80034c2 <_printf_i+0x76>
 80034b0:	2a6f      	cmp	r2, #111	; 0x6f
 80034b2:	d01f      	beq.n	80034f4 <_printf_i+0xa8>
 80034b4:	2a70      	cmp	r2, #112	; 0x70
 80034b6:	d1e0      	bne.n	800347a <_printf_i+0x2e>
 80034b8:	2220      	movs	r2, #32
 80034ba:	6809      	ldr	r1, [r1, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	6022      	str	r2, [r4, #0]
 80034c0:	e003      	b.n	80034ca <_printf_i+0x7e>
 80034c2:	2a75      	cmp	r2, #117	; 0x75
 80034c4:	d016      	beq.n	80034f4 <_printf_i+0xa8>
 80034c6:	2a78      	cmp	r2, #120	; 0x78
 80034c8:	d1d7      	bne.n	800347a <_printf_i+0x2e>
 80034ca:	0022      	movs	r2, r4
 80034cc:	2178      	movs	r1, #120	; 0x78
 80034ce:	3245      	adds	r2, #69	; 0x45
 80034d0:	7011      	strb	r1, [r2, #0]
 80034d2:	4e61      	ldr	r6, [pc, #388]	; (8003658 <_printf_i+0x20c>)
 80034d4:	e022      	b.n	800351c <_printf_i+0xd0>
 80034d6:	0025      	movs	r5, r4
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	3542      	adds	r5, #66	; 0x42
 80034dc:	1d11      	adds	r1, r2, #4
 80034de:	6019      	str	r1, [r3, #0]
 80034e0:	6813      	ldr	r3, [r2, #0]
 80034e2:	702b      	strb	r3, [r5, #0]
 80034e4:	2301      	movs	r3, #1
 80034e6:	e065      	b.n	80035b4 <_printf_i+0x168>
 80034e8:	6808      	ldr	r0, [r1, #0]
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	0669      	lsls	r1, r5, #25
 80034ee:	d5d3      	bpl.n	8003498 <_printf_i+0x4c>
 80034f0:	b200      	sxth	r0, r0
 80034f2:	e7d1      	b.n	8003498 <_printf_i+0x4c>
 80034f4:	6819      	ldr	r1, [r3, #0]
 80034f6:	6825      	ldr	r5, [r4, #0]
 80034f8:	1d08      	adds	r0, r1, #4
 80034fa:	6018      	str	r0, [r3, #0]
 80034fc:	6808      	ldr	r0, [r1, #0]
 80034fe:	062e      	lsls	r6, r5, #24
 8003500:	d505      	bpl.n	800350e <_printf_i+0xc2>
 8003502:	4e54      	ldr	r6, [pc, #336]	; (8003654 <_printf_i+0x208>)
 8003504:	2708      	movs	r7, #8
 8003506:	2a6f      	cmp	r2, #111	; 0x6f
 8003508:	d01b      	beq.n	8003542 <_printf_i+0xf6>
 800350a:	270a      	movs	r7, #10
 800350c:	e019      	b.n	8003542 <_printf_i+0xf6>
 800350e:	066d      	lsls	r5, r5, #25
 8003510:	d5f7      	bpl.n	8003502 <_printf_i+0xb6>
 8003512:	b280      	uxth	r0, r0
 8003514:	e7f5      	b.n	8003502 <_printf_i+0xb6>
 8003516:	3145      	adds	r1, #69	; 0x45
 8003518:	4e4e      	ldr	r6, [pc, #312]	; (8003654 <_printf_i+0x208>)
 800351a:	700a      	strb	r2, [r1, #0]
 800351c:	6818      	ldr	r0, [r3, #0]
 800351e:	6822      	ldr	r2, [r4, #0]
 8003520:	1d01      	adds	r1, r0, #4
 8003522:	6800      	ldr	r0, [r0, #0]
 8003524:	6019      	str	r1, [r3, #0]
 8003526:	0615      	lsls	r5, r2, #24
 8003528:	d521      	bpl.n	800356e <_printf_i+0x122>
 800352a:	07d3      	lsls	r3, r2, #31
 800352c:	d502      	bpl.n	8003534 <_printf_i+0xe8>
 800352e:	2320      	movs	r3, #32
 8003530:	431a      	orrs	r2, r3
 8003532:	6022      	str	r2, [r4, #0]
 8003534:	2710      	movs	r7, #16
 8003536:	2800      	cmp	r0, #0
 8003538:	d103      	bne.n	8003542 <_printf_i+0xf6>
 800353a:	2320      	movs	r3, #32
 800353c:	6822      	ldr	r2, [r4, #0]
 800353e:	439a      	bics	r2, r3
 8003540:	6022      	str	r2, [r4, #0]
 8003542:	0023      	movs	r3, r4
 8003544:	2200      	movs	r2, #0
 8003546:	3343      	adds	r3, #67	; 0x43
 8003548:	701a      	strb	r2, [r3, #0]
 800354a:	6863      	ldr	r3, [r4, #4]
 800354c:	60a3      	str	r3, [r4, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	db58      	blt.n	8003604 <_printf_i+0x1b8>
 8003552:	2204      	movs	r2, #4
 8003554:	6821      	ldr	r1, [r4, #0]
 8003556:	4391      	bics	r1, r2
 8003558:	6021      	str	r1, [r4, #0]
 800355a:	2800      	cmp	r0, #0
 800355c:	d154      	bne.n	8003608 <_printf_i+0x1bc>
 800355e:	9d02      	ldr	r5, [sp, #8]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d05a      	beq.n	800361a <_printf_i+0x1ce>
 8003564:	0025      	movs	r5, r4
 8003566:	7833      	ldrb	r3, [r6, #0]
 8003568:	3542      	adds	r5, #66	; 0x42
 800356a:	702b      	strb	r3, [r5, #0]
 800356c:	e055      	b.n	800361a <_printf_i+0x1ce>
 800356e:	0655      	lsls	r5, r2, #25
 8003570:	d5db      	bpl.n	800352a <_printf_i+0xde>
 8003572:	b280      	uxth	r0, r0
 8003574:	e7d9      	b.n	800352a <_printf_i+0xde>
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	680d      	ldr	r5, [r1, #0]
 800357a:	1d10      	adds	r0, r2, #4
 800357c:	6949      	ldr	r1, [r1, #20]
 800357e:	6018      	str	r0, [r3, #0]
 8003580:	6813      	ldr	r3, [r2, #0]
 8003582:	062e      	lsls	r6, r5, #24
 8003584:	d501      	bpl.n	800358a <_printf_i+0x13e>
 8003586:	6019      	str	r1, [r3, #0]
 8003588:	e002      	b.n	8003590 <_printf_i+0x144>
 800358a:	066d      	lsls	r5, r5, #25
 800358c:	d5fb      	bpl.n	8003586 <_printf_i+0x13a>
 800358e:	8019      	strh	r1, [r3, #0]
 8003590:	2300      	movs	r3, #0
 8003592:	9d02      	ldr	r5, [sp, #8]
 8003594:	6123      	str	r3, [r4, #16]
 8003596:	e04f      	b.n	8003638 <_printf_i+0x1ec>
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	1d11      	adds	r1, r2, #4
 800359c:	6019      	str	r1, [r3, #0]
 800359e:	6815      	ldr	r5, [r2, #0]
 80035a0:	2100      	movs	r1, #0
 80035a2:	6862      	ldr	r2, [r4, #4]
 80035a4:	0028      	movs	r0, r5
 80035a6:	f000 f859 	bl	800365c <memchr>
 80035aa:	2800      	cmp	r0, #0
 80035ac:	d001      	beq.n	80035b2 <_printf_i+0x166>
 80035ae:	1b40      	subs	r0, r0, r5
 80035b0:	6060      	str	r0, [r4, #4]
 80035b2:	6863      	ldr	r3, [r4, #4]
 80035b4:	6123      	str	r3, [r4, #16]
 80035b6:	2300      	movs	r3, #0
 80035b8:	9a02      	ldr	r2, [sp, #8]
 80035ba:	7013      	strb	r3, [r2, #0]
 80035bc:	e03c      	b.n	8003638 <_printf_i+0x1ec>
 80035be:	6923      	ldr	r3, [r4, #16]
 80035c0:	002a      	movs	r2, r5
 80035c2:	9904      	ldr	r1, [sp, #16]
 80035c4:	9803      	ldr	r0, [sp, #12]
 80035c6:	9d05      	ldr	r5, [sp, #20]
 80035c8:	47a8      	blx	r5
 80035ca:	1c43      	adds	r3, r0, #1
 80035cc:	d03e      	beq.n	800364c <_printf_i+0x200>
 80035ce:	6823      	ldr	r3, [r4, #0]
 80035d0:	079b      	lsls	r3, r3, #30
 80035d2:	d415      	bmi.n	8003600 <_printf_i+0x1b4>
 80035d4:	9b07      	ldr	r3, [sp, #28]
 80035d6:	68e0      	ldr	r0, [r4, #12]
 80035d8:	4298      	cmp	r0, r3
 80035da:	da39      	bge.n	8003650 <_printf_i+0x204>
 80035dc:	0018      	movs	r0, r3
 80035de:	e037      	b.n	8003650 <_printf_i+0x204>
 80035e0:	0022      	movs	r2, r4
 80035e2:	2301      	movs	r3, #1
 80035e4:	3219      	adds	r2, #25
 80035e6:	9904      	ldr	r1, [sp, #16]
 80035e8:	9803      	ldr	r0, [sp, #12]
 80035ea:	9e05      	ldr	r6, [sp, #20]
 80035ec:	47b0      	blx	r6
 80035ee:	1c43      	adds	r3, r0, #1
 80035f0:	d02c      	beq.n	800364c <_printf_i+0x200>
 80035f2:	3501      	adds	r5, #1
 80035f4:	68e3      	ldr	r3, [r4, #12]
 80035f6:	9a07      	ldr	r2, [sp, #28]
 80035f8:	1a9b      	subs	r3, r3, r2
 80035fa:	42ab      	cmp	r3, r5
 80035fc:	dcf0      	bgt.n	80035e0 <_printf_i+0x194>
 80035fe:	e7e9      	b.n	80035d4 <_printf_i+0x188>
 8003600:	2500      	movs	r5, #0
 8003602:	e7f7      	b.n	80035f4 <_printf_i+0x1a8>
 8003604:	2800      	cmp	r0, #0
 8003606:	d0ad      	beq.n	8003564 <_printf_i+0x118>
 8003608:	9d02      	ldr	r5, [sp, #8]
 800360a:	0039      	movs	r1, r7
 800360c:	f7fc fe02 	bl	8000214 <__aeabi_uidivmod>
 8003610:	5c73      	ldrb	r3, [r6, r1]
 8003612:	3d01      	subs	r5, #1
 8003614:	702b      	strb	r3, [r5, #0]
 8003616:	2800      	cmp	r0, #0
 8003618:	d1f7      	bne.n	800360a <_printf_i+0x1be>
 800361a:	2f08      	cmp	r7, #8
 800361c:	d109      	bne.n	8003632 <_printf_i+0x1e6>
 800361e:	6823      	ldr	r3, [r4, #0]
 8003620:	07db      	lsls	r3, r3, #31
 8003622:	d506      	bpl.n	8003632 <_printf_i+0x1e6>
 8003624:	6863      	ldr	r3, [r4, #4]
 8003626:	6922      	ldr	r2, [r4, #16]
 8003628:	4293      	cmp	r3, r2
 800362a:	dc02      	bgt.n	8003632 <_printf_i+0x1e6>
 800362c:	2330      	movs	r3, #48	; 0x30
 800362e:	3d01      	subs	r5, #1
 8003630:	702b      	strb	r3, [r5, #0]
 8003632:	9b02      	ldr	r3, [sp, #8]
 8003634:	1b5b      	subs	r3, r3, r5
 8003636:	6123      	str	r3, [r4, #16]
 8003638:	9b05      	ldr	r3, [sp, #20]
 800363a:	aa07      	add	r2, sp, #28
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	0021      	movs	r1, r4
 8003640:	9b04      	ldr	r3, [sp, #16]
 8003642:	9803      	ldr	r0, [sp, #12]
 8003644:	f7ff fe94 	bl	8003370 <_printf_common>
 8003648:	1c43      	adds	r3, r0, #1
 800364a:	d1b8      	bne.n	80035be <_printf_i+0x172>
 800364c:	2001      	movs	r0, #1
 800364e:	4240      	negs	r0, r0
 8003650:	b009      	add	sp, #36	; 0x24
 8003652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003654:	080038ed 	.word	0x080038ed
 8003658:	080038fe 	.word	0x080038fe

0800365c <memchr>:
 800365c:	b2c9      	uxtb	r1, r1
 800365e:	1882      	adds	r2, r0, r2
 8003660:	4290      	cmp	r0, r2
 8003662:	d101      	bne.n	8003668 <memchr+0xc>
 8003664:	2000      	movs	r0, #0
 8003666:	4770      	bx	lr
 8003668:	7803      	ldrb	r3, [r0, #0]
 800366a:	428b      	cmp	r3, r1
 800366c:	d0fb      	beq.n	8003666 <memchr+0xa>
 800366e:	3001      	adds	r0, #1
 8003670:	e7f6      	b.n	8003660 <memchr+0x4>

08003672 <memcpy>:
 8003672:	2300      	movs	r3, #0
 8003674:	b510      	push	{r4, lr}
 8003676:	429a      	cmp	r2, r3
 8003678:	d100      	bne.n	800367c <memcpy+0xa>
 800367a:	bd10      	pop	{r4, pc}
 800367c:	5ccc      	ldrb	r4, [r1, r3]
 800367e:	54c4      	strb	r4, [r0, r3]
 8003680:	3301      	adds	r3, #1
 8003682:	e7f8      	b.n	8003676 <memcpy+0x4>

08003684 <memmove>:
 8003684:	b510      	push	{r4, lr}
 8003686:	4288      	cmp	r0, r1
 8003688:	d902      	bls.n	8003690 <memmove+0xc>
 800368a:	188b      	adds	r3, r1, r2
 800368c:	4298      	cmp	r0, r3
 800368e:	d303      	bcc.n	8003698 <memmove+0x14>
 8003690:	2300      	movs	r3, #0
 8003692:	e007      	b.n	80036a4 <memmove+0x20>
 8003694:	5c8b      	ldrb	r3, [r1, r2]
 8003696:	5483      	strb	r3, [r0, r2]
 8003698:	3a01      	subs	r2, #1
 800369a:	d2fb      	bcs.n	8003694 <memmove+0x10>
 800369c:	bd10      	pop	{r4, pc}
 800369e:	5ccc      	ldrb	r4, [r1, r3]
 80036a0:	54c4      	strb	r4, [r0, r3]
 80036a2:	3301      	adds	r3, #1
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d1fa      	bne.n	800369e <memmove+0x1a>
 80036a8:	e7f8      	b.n	800369c <memmove+0x18>
	...

080036ac <_free_r>:
 80036ac:	b570      	push	{r4, r5, r6, lr}
 80036ae:	0005      	movs	r5, r0
 80036b0:	2900      	cmp	r1, #0
 80036b2:	d010      	beq.n	80036d6 <_free_r+0x2a>
 80036b4:	1f0c      	subs	r4, r1, #4
 80036b6:	6823      	ldr	r3, [r4, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	da00      	bge.n	80036be <_free_r+0x12>
 80036bc:	18e4      	adds	r4, r4, r3
 80036be:	0028      	movs	r0, r5
 80036c0:	f000 f8d4 	bl	800386c <__malloc_lock>
 80036c4:	4a1d      	ldr	r2, [pc, #116]	; (800373c <_free_r+0x90>)
 80036c6:	6813      	ldr	r3, [r2, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d105      	bne.n	80036d8 <_free_r+0x2c>
 80036cc:	6063      	str	r3, [r4, #4]
 80036ce:	6014      	str	r4, [r2, #0]
 80036d0:	0028      	movs	r0, r5
 80036d2:	f000 f8cc 	bl	800386e <__malloc_unlock>
 80036d6:	bd70      	pop	{r4, r5, r6, pc}
 80036d8:	42a3      	cmp	r3, r4
 80036da:	d909      	bls.n	80036f0 <_free_r+0x44>
 80036dc:	6821      	ldr	r1, [r4, #0]
 80036de:	1860      	adds	r0, r4, r1
 80036e0:	4283      	cmp	r3, r0
 80036e2:	d1f3      	bne.n	80036cc <_free_r+0x20>
 80036e4:	6818      	ldr	r0, [r3, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	1841      	adds	r1, r0, r1
 80036ea:	6021      	str	r1, [r4, #0]
 80036ec:	e7ee      	b.n	80036cc <_free_r+0x20>
 80036ee:	0013      	movs	r3, r2
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	2a00      	cmp	r2, #0
 80036f4:	d001      	beq.n	80036fa <_free_r+0x4e>
 80036f6:	42a2      	cmp	r2, r4
 80036f8:	d9f9      	bls.n	80036ee <_free_r+0x42>
 80036fa:	6819      	ldr	r1, [r3, #0]
 80036fc:	1858      	adds	r0, r3, r1
 80036fe:	42a0      	cmp	r0, r4
 8003700:	d10b      	bne.n	800371a <_free_r+0x6e>
 8003702:	6820      	ldr	r0, [r4, #0]
 8003704:	1809      	adds	r1, r1, r0
 8003706:	1858      	adds	r0, r3, r1
 8003708:	6019      	str	r1, [r3, #0]
 800370a:	4282      	cmp	r2, r0
 800370c:	d1e0      	bne.n	80036d0 <_free_r+0x24>
 800370e:	6810      	ldr	r0, [r2, #0]
 8003710:	6852      	ldr	r2, [r2, #4]
 8003712:	1841      	adds	r1, r0, r1
 8003714:	6019      	str	r1, [r3, #0]
 8003716:	605a      	str	r2, [r3, #4]
 8003718:	e7da      	b.n	80036d0 <_free_r+0x24>
 800371a:	42a0      	cmp	r0, r4
 800371c:	d902      	bls.n	8003724 <_free_r+0x78>
 800371e:	230c      	movs	r3, #12
 8003720:	602b      	str	r3, [r5, #0]
 8003722:	e7d5      	b.n	80036d0 <_free_r+0x24>
 8003724:	6821      	ldr	r1, [r4, #0]
 8003726:	1860      	adds	r0, r4, r1
 8003728:	4282      	cmp	r2, r0
 800372a:	d103      	bne.n	8003734 <_free_r+0x88>
 800372c:	6810      	ldr	r0, [r2, #0]
 800372e:	6852      	ldr	r2, [r2, #4]
 8003730:	1841      	adds	r1, r0, r1
 8003732:	6021      	str	r1, [r4, #0]
 8003734:	6062      	str	r2, [r4, #4]
 8003736:	605c      	str	r4, [r3, #4]
 8003738:	e7ca      	b.n	80036d0 <_free_r+0x24>
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	200000b8 	.word	0x200000b8

08003740 <_malloc_r>:
 8003740:	2303      	movs	r3, #3
 8003742:	b570      	push	{r4, r5, r6, lr}
 8003744:	1ccd      	adds	r5, r1, #3
 8003746:	439d      	bics	r5, r3
 8003748:	3508      	adds	r5, #8
 800374a:	0006      	movs	r6, r0
 800374c:	2d0c      	cmp	r5, #12
 800374e:	d21e      	bcs.n	800378e <_malloc_r+0x4e>
 8003750:	250c      	movs	r5, #12
 8003752:	42a9      	cmp	r1, r5
 8003754:	d81d      	bhi.n	8003792 <_malloc_r+0x52>
 8003756:	0030      	movs	r0, r6
 8003758:	f000 f888 	bl	800386c <__malloc_lock>
 800375c:	4a25      	ldr	r2, [pc, #148]	; (80037f4 <_malloc_r+0xb4>)
 800375e:	6814      	ldr	r4, [r2, #0]
 8003760:	0021      	movs	r1, r4
 8003762:	2900      	cmp	r1, #0
 8003764:	d119      	bne.n	800379a <_malloc_r+0x5a>
 8003766:	4c24      	ldr	r4, [pc, #144]	; (80037f8 <_malloc_r+0xb8>)
 8003768:	6823      	ldr	r3, [r4, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d103      	bne.n	8003776 <_malloc_r+0x36>
 800376e:	0030      	movs	r0, r6
 8003770:	f000 f86a 	bl	8003848 <_sbrk_r>
 8003774:	6020      	str	r0, [r4, #0]
 8003776:	0029      	movs	r1, r5
 8003778:	0030      	movs	r0, r6
 800377a:	f000 f865 	bl	8003848 <_sbrk_r>
 800377e:	1c43      	adds	r3, r0, #1
 8003780:	d12b      	bne.n	80037da <_malloc_r+0x9a>
 8003782:	230c      	movs	r3, #12
 8003784:	0030      	movs	r0, r6
 8003786:	6033      	str	r3, [r6, #0]
 8003788:	f000 f871 	bl	800386e <__malloc_unlock>
 800378c:	e003      	b.n	8003796 <_malloc_r+0x56>
 800378e:	2d00      	cmp	r5, #0
 8003790:	dadf      	bge.n	8003752 <_malloc_r+0x12>
 8003792:	230c      	movs	r3, #12
 8003794:	6033      	str	r3, [r6, #0]
 8003796:	2000      	movs	r0, #0
 8003798:	bd70      	pop	{r4, r5, r6, pc}
 800379a:	680b      	ldr	r3, [r1, #0]
 800379c:	1b5b      	subs	r3, r3, r5
 800379e:	d419      	bmi.n	80037d4 <_malloc_r+0x94>
 80037a0:	2b0b      	cmp	r3, #11
 80037a2:	d903      	bls.n	80037ac <_malloc_r+0x6c>
 80037a4:	600b      	str	r3, [r1, #0]
 80037a6:	18cc      	adds	r4, r1, r3
 80037a8:	6025      	str	r5, [r4, #0]
 80037aa:	e003      	b.n	80037b4 <_malloc_r+0x74>
 80037ac:	684b      	ldr	r3, [r1, #4]
 80037ae:	428c      	cmp	r4, r1
 80037b0:	d10d      	bne.n	80037ce <_malloc_r+0x8e>
 80037b2:	6013      	str	r3, [r2, #0]
 80037b4:	0030      	movs	r0, r6
 80037b6:	f000 f85a 	bl	800386e <__malloc_unlock>
 80037ba:	0020      	movs	r0, r4
 80037bc:	2207      	movs	r2, #7
 80037be:	300b      	adds	r0, #11
 80037c0:	1d23      	adds	r3, r4, #4
 80037c2:	4390      	bics	r0, r2
 80037c4:	1ac3      	subs	r3, r0, r3
 80037c6:	d0e7      	beq.n	8003798 <_malloc_r+0x58>
 80037c8:	425a      	negs	r2, r3
 80037ca:	50e2      	str	r2, [r4, r3]
 80037cc:	e7e4      	b.n	8003798 <_malloc_r+0x58>
 80037ce:	6063      	str	r3, [r4, #4]
 80037d0:	000c      	movs	r4, r1
 80037d2:	e7ef      	b.n	80037b4 <_malloc_r+0x74>
 80037d4:	000c      	movs	r4, r1
 80037d6:	6849      	ldr	r1, [r1, #4]
 80037d8:	e7c3      	b.n	8003762 <_malloc_r+0x22>
 80037da:	2303      	movs	r3, #3
 80037dc:	1cc4      	adds	r4, r0, #3
 80037de:	439c      	bics	r4, r3
 80037e0:	42a0      	cmp	r0, r4
 80037e2:	d0e1      	beq.n	80037a8 <_malloc_r+0x68>
 80037e4:	1a21      	subs	r1, r4, r0
 80037e6:	0030      	movs	r0, r6
 80037e8:	f000 f82e 	bl	8003848 <_sbrk_r>
 80037ec:	1c43      	adds	r3, r0, #1
 80037ee:	d1db      	bne.n	80037a8 <_malloc_r+0x68>
 80037f0:	e7c7      	b.n	8003782 <_malloc_r+0x42>
 80037f2:	46c0      	nop			; (mov r8, r8)
 80037f4:	200000b8 	.word	0x200000b8
 80037f8:	200000bc 	.word	0x200000bc

080037fc <_realloc_r>:
 80037fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fe:	0007      	movs	r7, r0
 8003800:	000d      	movs	r5, r1
 8003802:	0016      	movs	r6, r2
 8003804:	2900      	cmp	r1, #0
 8003806:	d105      	bne.n	8003814 <_realloc_r+0x18>
 8003808:	0011      	movs	r1, r2
 800380a:	f7ff ff99 	bl	8003740 <_malloc_r>
 800380e:	0004      	movs	r4, r0
 8003810:	0020      	movs	r0, r4
 8003812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003814:	2a00      	cmp	r2, #0
 8003816:	d103      	bne.n	8003820 <_realloc_r+0x24>
 8003818:	f7ff ff48 	bl	80036ac <_free_r>
 800381c:	0034      	movs	r4, r6
 800381e:	e7f7      	b.n	8003810 <_realloc_r+0x14>
 8003820:	f000 f826 	bl	8003870 <_malloc_usable_size_r>
 8003824:	002c      	movs	r4, r5
 8003826:	42b0      	cmp	r0, r6
 8003828:	d2f2      	bcs.n	8003810 <_realloc_r+0x14>
 800382a:	0031      	movs	r1, r6
 800382c:	0038      	movs	r0, r7
 800382e:	f7ff ff87 	bl	8003740 <_malloc_r>
 8003832:	1e04      	subs	r4, r0, #0
 8003834:	d0ec      	beq.n	8003810 <_realloc_r+0x14>
 8003836:	0029      	movs	r1, r5
 8003838:	0032      	movs	r2, r6
 800383a:	f7ff ff1a 	bl	8003672 <memcpy>
 800383e:	0029      	movs	r1, r5
 8003840:	0038      	movs	r0, r7
 8003842:	f7ff ff33 	bl	80036ac <_free_r>
 8003846:	e7e3      	b.n	8003810 <_realloc_r+0x14>

08003848 <_sbrk_r>:
 8003848:	2300      	movs	r3, #0
 800384a:	b570      	push	{r4, r5, r6, lr}
 800384c:	4c06      	ldr	r4, [pc, #24]	; (8003868 <_sbrk_r+0x20>)
 800384e:	0005      	movs	r5, r0
 8003850:	0008      	movs	r0, r1
 8003852:	6023      	str	r3, [r4, #0]
 8003854:	f7fd f836 	bl	80008c4 <_sbrk>
 8003858:	1c43      	adds	r3, r0, #1
 800385a:	d103      	bne.n	8003864 <_sbrk_r+0x1c>
 800385c:	6823      	ldr	r3, [r4, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d000      	beq.n	8003864 <_sbrk_r+0x1c>
 8003862:	602b      	str	r3, [r5, #0]
 8003864:	bd70      	pop	{r4, r5, r6, pc}
 8003866:	46c0      	nop			; (mov r8, r8)
 8003868:	20000224 	.word	0x20000224

0800386c <__malloc_lock>:
 800386c:	4770      	bx	lr

0800386e <__malloc_unlock>:
 800386e:	4770      	bx	lr

08003870 <_malloc_usable_size_r>:
 8003870:	1f0b      	subs	r3, r1, #4
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	1f18      	subs	r0, r3, #4
 8003876:	2b00      	cmp	r3, #0
 8003878:	da01      	bge.n	800387e <_malloc_usable_size_r+0xe>
 800387a:	580b      	ldr	r3, [r1, r0]
 800387c:	18c0      	adds	r0, r0, r3
 800387e:	4770      	bx	lr

08003880 <_init>:
 8003880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003882:	46c0      	nop			; (mov r8, r8)
 8003884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003886:	bc08      	pop	{r3}
 8003888:	469e      	mov	lr, r3
 800388a:	4770      	bx	lr

0800388c <_fini>:
 800388c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003892:	bc08      	pop	{r3}
 8003894:	469e      	mov	lr, r3
 8003896:	4770      	bx	lr
